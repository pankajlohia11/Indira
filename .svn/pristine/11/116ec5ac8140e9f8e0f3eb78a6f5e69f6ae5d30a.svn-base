using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.Mvc;
using System.Web.Script.Serialization;
using System.Web.Routing;
using BusinessEntity.EntityModels;
using BusinessEntity.CustomModels;
using BusinessLogic.Admin_BL;
using BusinessLogic;
using System.IO;

namespace Euro.Controllers.Admin
{
    public class ET_Admin_SupplierModuleController : Controller
    {
        // GET: ET_Admin_SupplierModule
        ET_Admin_CustomerModule_BL objBL = new ET_Admin_CustomerModule_BL();
        error_master objERR = new error_master();
        BAL bal = new BAL();
        tbl_loginfo objLOG = new tbl_loginfo();
        EntityClasses dbcontext = new EntityClasses();
        public ActionResult ET_Admin_SupplierModule()
        {
            bool val = Session["UserID"] == null ? false : true;
            if (val)
            {
                try
                {
                    return View();
                }
                catch (Exception exe)
                {
                    string actionName = this.ControllerContext.RouteData.Values["action"].ToString();
                    string controllerName = this.ControllerContext.RouteData.Values["controller"].ToString();
                    objERR.err_title = controllerName + "-" + controllerName;
                    objERR.err_message = "Sorry for the inconvience. Some error has been occured.";
                    objERR.err_details = exe.Message.Replace("'", "");
                    int errid = bal.ExceptionInsertLogs_BL(objERR);
                    return Json("ERR" + errid.ToString(), JsonRequestBehavior.AllowGet);
                }
            }
            else
            {
                return RedirectToAction("ET_SessionExpire", "ET_Login");
            }
        }
        public ActionResult GetSupplierList()
        {
            bool val = Session["UserID"] == null ? false : true;
            if (val)
            {
                try
                {

                    CompanyModule__CM objMaster = new CompanyModule__CM();
                    objMaster.CustomerMasterList = objBL.GetSupplier_BL();
                    //var data = dbcontext.Tbl_Master_CompanyDetails.Where(m => m.Cust_Supp != 1);
                    var json = new JavaScriptSerializer().Serialize(objMaster.CustomerMasterList);
                    return Json(json, JsonRequestBehavior.AllowGet);
                }
                catch (Exception exe)
                {
                    string actionName = this.ControllerContext.RouteData.Values["action"].ToString();
                    string controllerName = this.ControllerContext.RouteData.Values["controller"].ToString();
                    objERR.err_title = controllerName + "-" + controllerName;
                    objERR.err_message = "Sorry for the inconvience. Some error has been occured.";
                    objERR.err_details = exe.Message.Replace("'", "");
                    int errid = bal.ExceptionInsertLogs_BL(objERR);
                    return Json("ERR" + errid.ToString(), JsonRequestBehavior.AllowGet);
                }
            }
            else
            {
                return Json("Expired", JsonRequestBehavior.AllowGet);
            }

        }
        public ActionResult GetSupplierInfo(int id)
        {
            bool val = Session["UserID"] == null ? false : true;
            if (val)
            {
                try
                {
                    dbcontext.Configuration.ProxyCreationEnabled = false;
                    // Company Details
                    var data1 = (from a in dbcontext.Tbl_Master_CompanyDetails
                                 where a.COM_ID == id
                                 select new
                                 {
                                     a.COM_CODE,
                                     a.COM_DISPLAYNAME,
                                     a.COM_NAME,
                                     a.COM_MOBILE,
                                     a.COM_EMAIL,
                                     a.COM_USTID,
                                     a.Tax_No,
                                     a.COM_STREET,
                                     a.COM_ZIP,
                                     CustType =
                                    (
                                    a.Cust_Supp == 0 ? "Customer" :
                                    a.Cust_Supp == 1 ? "Supplier" : "Both"
                                    ),
                                     a.CREATED_DATE,
                                     activeStatus = a.DELETED == false ? "Active" : "InActive",
                                     country = (dbcontext.locations.Where(m => m.location_id == a.COM_COUNTRY).Select(m => m.name)).FirstOrDefault(),
                                     city =a.COM_CITY,
                                     state = a.COM_STATE
                                 });
                    var json1 = new JavaScriptSerializer().Serialize(data1);
                    // Contact Details
                    var data2 = dbcontext.Tbl_Master_CompanyContacts.Where(m => m.COM_ID == id);
                    var json2 = new JavaScriptSerializer().Serialize(data2);
                    // Order Details
                    int com_key = Convert.ToInt32(Session["Companykey"]);
                    var data3 = (from Ol in dbcontext.Tbl_Master_Order
                                 join Mu in dbcontext.Tbl_Master_User on Ol.SO_SalesPersonID equals Mu.USER_ID
                                 where Ol.DELETED == false && Ol.COM_KEY == com_key && Ol.SO_SupplierID == id
                                 select new
                                 {
                                     SO_ID = Ol.SO_ID,
                                     SO_CODE = Ol.SO_Code,
                                     USER_NAME = Mu.USER_NAME,
                                     Ol.SO_OrderDate,
                                     Ol.SO_CusPONO,
                                     Ol.SO_CusPODate,
                                     Type =
                                     (
                                     Ol.SO_OrderType == 1 ? "Agency" :
                                     Ol.SO_OrderType == 2 ? "Trading" : "Stock"
                                     ),
                                     Status = Ol.SO_Approval == 1 ? "Approved" : "Unapproved"
                                 }).ToList();
                    var json3 = new JavaScriptSerializer().Serialize(data3);
                    // Shipment
                    var data4 = (from a in dbcontext.Tbl_Shipment_Header
                                 join c in dbcontext.Tbl_Master_CompanyDetails on a.S_CustSup equals c.COM_ID into ord
                                 from y in ord
                                 where a.DELETED == false && a.COM_KEY == com_key && a.S_CustSup == id && a.S_Type == 1
                                 select new Shipment_CM
                                 {
                                     S_ID = a.S_ID,
                                     S_Code = a.S_Code,
                                     S_ETD = a.S_ETD,
                                     S_ETA = a.S_ETA,
                                     COM_DISPLAYNAME = y.COM_DISPLAYNAME,
                                     S_DeparturePort = a.S_DeparturePort,
                                     S_ArrivalPort = a.S_ArrivalPort,
                                     S_Type = a.S_Type,
                                     S_STATUS = a.S_STATUS,
                                     S_DebitNoteStatus = a.S_DebitNoteStatus,
                                     S_CommissionRecievedStatus = a.S_CommissionRecievedStatus,
                                     S_DebitNoteApprovalStatus = a.S_DebitNoteApprovalStatus,
                                     S_INV_AMT = a.S_INV_AMT
                                 }).ToList();
                    var json4 = new JavaScriptSerializer().Serialize(data4);
                    // Schedule
                    var data5 = (from a in dbcontext.Tbl_Schedule
                                 join c in dbcontext.Tbl_Master_Order on a.SH_OrderID equals c.SO_ID into ord
                                 from y in ord
                                 join c in dbcontext.Tbl_Master_CompanyDetails on y.SO_SupplierID equals c.COM_ID into comp
                                 from com in comp
                                 where a.DELETED == false && a.COM_KEY == com_key && y.SO_SupplierID == id
                                 select new
                                 {
                                     SH_ID = a.SH_ID,
                                     SH_Code = a.SH_Code,
                                     SH_DATE = a.SH_DATE,
                                     SO_Code = y.SO_Code,
                                     SH_Status = a.SH_Status,
                                     SH_Type = a.SH_Type,
                                     Customer = com.COM_NAME

                                 }
                                ).ToList().GroupBy(x => x.SH_Code).Select(x => x.FirstOrDefault());
                    var json5 = new JavaScriptSerializer().Serialize(data5);
                    var data6 = (from Cr in dbcontext.Tbl_CommissionRecieve
                                 join Sh in dbcontext.Tbl_Shipment_Header on Cr.CR_ShipmentID equals Sh.S_ID
                                 where Cr.DELETED == false && Cr.COM_KEY == com_key && Sh.S_CustSup == id && Sh.S_Type == 1
                                 select new
                                 {
                                    Sh.S_Code,
                                     CR_Code = Cr.CR_Code,
                                     Cr.CR_ShipmentAmount,
                                     Cr.CR_FABAmount,
                                     Cr.CR_CommissionAmount,
                                     Cr.CR_CommissionRecieved
                                 }).ToList();
                    var json6 = new JavaScriptSerializer().Serialize(data6);

                    var result = new { Result = json1, Contact = json2, Order = json3, Shipment = json4, Schedule = json5 , Payment = json6};
                    return Json(result, JsonRequestBehavior.AllowGet);
                }
                catch (Exception exe)
                {
                    string actionName = this.ControllerContext.RouteData.Values["action"].ToString();
                    string controllerName = this.ControllerContext.RouteData.Values["controller"].ToString();
                    objERR.err_title = controllerName + "-" + controllerName;
                    objERR.err_message = "Sorry for the inconvience. Some error has been occured.";
                    objERR.err_details = exe.Message.Replace("'", "");
                    int errid = bal.ExceptionInsertLogs_BL(objERR);
                    return Json("ERR" + errid.ToString(), JsonRequestBehavior.AllowGet);
                }
            }
            else
            {
                return Json("Expired", JsonRequestBehavior.AllowGet);
            }

        }

        private string validations(string SUBJECT)
        {

            if (SUBJECT == "")
            {
                return "Subject";
            }
            return "";
        }

        public JsonResult ET_Company_Comm_Add(string SUBJECT, string DATE_COMM, string CONVERSATION, bool TYPE, decimal PID)
        {
            bool val = Session["UserID"] == null ? false : true;
            if (val)
            {
                try
                {
                    string valid = validations(SUBJECT);
                    if (valid == "")
                    {
                        //FILE_NAME = FILE_NAME,
                        //Tbl_Company_Communication.FILE_NAME = FILE_NAME,
                        decimal data = 0;
                        string urlpath = "";
                        DateTime Comm_date;
                        if (DATE_COMM != "") { Comm_date = Convert.ToDateTime(DATE_COMM); } else { Comm_date = DateTime.Now; }

                        if (Request.Files.Count > 0)
                        {
                            HttpPostedFileBase file = Request.Files[0]; //Uploaded file
                                                                        //Use the following properties to get file's name, size and MIMEType

                            int fileSize = file.ContentLength;
                            string fileName = file.FileName;
                            string mimeType = file.ContentType;
                            System.IO.Stream fileContent = file.InputStream;

                            //To save file, use SaveAs method
                            string subPath = "~/conversationFile/";
                            bool exists = System.IO.Directory.Exists(Server.MapPath(subPath));
                            if (!exists)
                                System.IO.Directory.CreateDirectory(Server.MapPath(subPath));

                            string path1 = System.Web.Hosting.HostingEnvironment.MapPath(subPath) + "\\";
                            string path = System.Web.Hosting.HostingEnvironment.MapPath(subPath) + "\\" + fileName;
                            string url = subPath.Replace("~", "") + fileName;

                            FileInfo file1 = new FileInfo(path);
                            int k = 1;
                            while (file1.Exists)
                            {
                                path = path1 + "Copy" + k + fileName;
                                url = subPath.Replace("~", "") + "Copy" + k + fileName;
                                k++;
                                file1 = new FileInfo(path);
                            }
                            urlpath = url;
                            file.SaveAs(path); //File will be saved in application root
                        }

                        Tbl_Company_Communication Objmc = new Tbl_Company_Communication()
                        {
                            CC_PID = PID,
                            SUBJECT = SUBJECT,
                            DATE_COMM = Comm_date,
                            CONVERSATION = CONVERSATION,
                            TYPE = TYPE,
                            FILE_NAME = urlpath,
                            MS_UserId = Convert.ToInt32(Session["UserID"].ToString()),
                            CREATED_BY = Convert.ToInt32(Session["UserID"].ToString()),
                            CREATED_DATE = DateTime.Now,
                            DELETED = false
                        };
                        dbcontext.Tbl_Company_Communication.Add(Objmc);
                        dbcontext.SaveChanges();
                        data = Objmc.CC_ID;



                        if (data != 0)
                        {
                            objLOG.log_dockey = "8019";
                            objLOG.log_userid = Session["UserID"].ToString();
                            objLOG.log_recordkey = data.ToString();
                            //if (CC_ID == 0)
                            //{
                            objLOG.log_operation = "Insert";
                            objLOG.log_Remarks = "Record Inserted Successfully";
                            //}
                            //else
                            //{
                            //    objLOG.log_operation = "Update";
                            //    objLOG.log_Remarks = "Record Updated Successfully";
                            //}
                            bal.OperationInsertLogs_BL(objLOG);
                        }
                        var json = new JavaScriptSerializer().Serialize(data);
                        return Json(json, JsonRequestBehavior.AllowGet);
                    }
                    else
                    {
                        var json = "Validation:" + valid;
                        return Json(json, JsonRequestBehavior.AllowGet);
                    }
                }
                catch (Exception exe)
                {
                    //Insert Error Log
                    string actionName = this.ControllerContext.RouteData.Values["action"].ToString();
                    string controllerName = this.ControllerContext.RouteData.Values["controller"].ToString();
                    objERR.err_title = controllerName + "-" + controllerName;
                    objERR.err_message = "Sorry for the inconvience. Some error has been occured.";
                    objERR.err_details = exe.Message.Replace("'", "");
                    int errid = bal.ExceptionInsertLogs_BL(objERR);
                    return Json("ERR" + errid.ToString(), JsonRequestBehavior.AllowGet);
                }
            }
            else
            {
                var json = "Session Expired:";
                return Json(json, JsonRequestBehavior.AllowGet);
            }
        }

        public ActionResult GetCompanyCommList(int id)
        {
            bool val = Session["UserID"] == null ? false : true;
            if (val)
            {
                try
                {
                    dbcontext.Configuration.ProxyCreationEnabled = false;


                    int com_key = Convert.ToInt32(Session["Companykey"]);
                    var dataComm = (from Ol in dbcontext.Tbl_Company_Communication
                                    where Ol.DELETED == false && Ol.CC_PID == id
                                    select new
                                    {
                                        Ol.CC_ID,
                                        Ol.CC_PID,
                                        Ol.SUBJECT,
                                        Ol.DATE_COMM,
                                        Ol.FILE_NAME,
                                        Ol.CONVERSATION,
                                        Type = Ol.TYPE == false ? "Offline" : "Tele"
                                    }).ToList();
                    var jsonComm = new JavaScriptSerializer().Serialize(dataComm);

                    //                    var result = new { Result = jsonComm };
                    return Json(jsonComm, JsonRequestBehavior.AllowGet);
                }
                catch (Exception exe)
                {
                    string actionName = this.ControllerContext.RouteData.Values["action"].ToString();
                    string controllerName = this.ControllerContext.RouteData.Values["controller"].ToString();
                    objERR.err_title = controllerName + "-" + controllerName;
                    objERR.err_message = "Sorry for the inconvience. Some error has been occured.";
                    objERR.err_details = exe.Message.Replace("'", "");
                    int errid = bal.ExceptionInsertLogs_BL(objERR);
                    return Json("ERR" + errid.ToString(), JsonRequestBehavior.AllowGet);
                }
            }
            else
            {
                return Json("Expired", JsonRequestBehavior.AllowGet);
            }

        }
    }
}