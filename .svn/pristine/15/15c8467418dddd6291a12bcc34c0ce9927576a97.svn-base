using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.Mvc;
using BusinessEntity.EntityModels;
using BusinessLogic;
using BusinessLogic.Admin_BL;
using System.Web.Script.Serialization;
using BusinessEntity.CustomModels;
using iTextSharp.text.pdf;
using iTextSharp.text;
using System.IO;
using System.Globalization;

namespace Euro.Controllers.Admin
{
    public class ET_Admin_GeneralOfferController : Controller
    {
        ET_Admin_GeneralOffer_BL ObjBL = new ET_Admin_GeneralOffer_BL();
        EntityClasses dbcontext = new EntityClasses();
        public static string prefix = "";
        public static bool automanual = false;
        BAL bal = new BAL();
        error_master objERR = new error_master();
        tbl_loginfo objLOG = new tbl_loginfo();

        // GET: ET_Admin_GeneralOffer
        public ActionResult ET_Admin_GeneralOffer(string type)
        {
            bool val = Session["UserID"] == null ? false : true;
            if (val)
            {
                if (type != null)
                {
                    if (type == "Agency" || type == "Trading" || type == "Store")
                    {
                        try
                        {
                            AutoManual();
                            ViewBag.Login_Name = Session["DisplayName"].ToString();
                            return View();

                        }
                        catch (Exception exe)
                        {
                            string actionName = this.ControllerContext.RouteData.Values["action"].ToString();
                            string controllerName = this.ControllerContext.RouteData.Values["controller"].ToString();
                            objERR.err_title = controllerName + "-" + controllerName;
                            objERR.err_message = "Sorry for the inconvience. Some error has been occured.";
                            objERR.err_details = exe.Message.Replace("'", "");
                            int errid = bal.ExceptionInsertLogs_BL(objERR);
                            return Json("ERR" + errid.ToString(), JsonRequestBehavior.AllowGet);
                        }
                    }
                    else
                    {
                        return RedirectToAction("ET_InvalidRequest", "ET_Login");
                    }
                }
                else
                {
                    return RedirectToAction("ET_InvalidRequest", "ET_Login");
                }
            }
            else
            {
                return RedirectToAction("ET_SessionExpire", "ET_Login");
            }

        }
        
        //Checking privilages
        public JsonResult GetPrivilages()
        {

            bool val = Session["UserID"] == null ? false : true;
            if (val)
            {
                try
                {
                    using (EntityClasses dbcontext = new EntityClasses())
                    {
                        var privilagelist = bal.GetPrivilages_BL(Convert.ToInt32(Session["UserID"].ToString()), 4013);
                        var json = new JavaScriptSerializer().Serialize(privilagelist);
                        return Json(json, JsonRequestBehavior.AllowGet);
                    }
                }
                catch (Exception exe)
                {
                    string actionName = this.ControllerContext.RouteData.Values["action"].ToString();
                    string controllerName = this.ControllerContext.RouteData.Values["controller"].ToString();
                    objERR.err_title = controllerName + "-" + controllerName;
                    objERR.err_message = "Sorry for the inconvience. Some error has been occured.";
                    objERR.err_details = exe.Message.Replace("'", "");
                    int errid = bal.ExceptionInsertLogs_BL(objERR);
                    return Json("ERR" + errid.ToString(), JsonRequestBehavior.AllowGet);
                }
            }
            else
            {
                return Json("Expired", JsonRequestBehavior.AllowGet);
            }
        }
        //Binding the customer
        public JsonResult Bind_dropdown_Customer(int id)
        {
            bool val = Session["UserID"] == null ? false : true;
            if (val)
            {
                try
                {
                    using (EntityClasses dbcontext = new EntityClasses())
                    {
                        dbcontext.Configuration.ProxyCreationEnabled = false;
                        int companykey = Convert.ToInt32(Session["CompanyKey"]);
                        if (id == 0)
                        {
                            var Customer = dbcontext.Tbl_Master_CompanyDetails.Where(m => m.Cust_Supp != 1 && m.COM_KEY == companykey && m.DELETED == false).OrderBy(m => m.COM_NAME).ToList();
                            var json = new JavaScriptSerializer().Serialize(Customer);
                            return Json(json, JsonRequestBehavior.AllowGet);
                        }
                        else
                        {
                            var cust = dbcontext.Tbl_Offers_Master.Single(m => m.OFFER_ID == id).CUST_ID;
                            var Customer = dbcontext.Tbl_Master_CompanyDetails.Where(m => m.Cust_Supp != 1 && m.COM_KEY == companykey && (m.DELETED == false || m.COM_ID == cust)).ToList();
                            var json = new JavaScriptSerializer().Serialize(Customer);
                            return Json(json, JsonRequestBehavior.AllowGet);
                        }
                    }

                }
                catch (Exception exe)
                {
                    string actionName = this.ControllerContext.RouteData.Values["action"].ToString();
                    string controllerName = this.ControllerContext.RouteData.Values["controller"].ToString();
                    objERR.err_title = controllerName + "-" + controllerName;
                    objERR.err_message = "Sorry for the inconvience. Some error has been occured.";
                    objERR.err_details = exe.Message.Replace("'", "");
                    int errid = bal.ExceptionInsertLogs_BL(objERR);
                    return Json("ERR" + errid.ToString(), JsonRequestBehavior.AllowGet);
                }
            }
            else
            {
                return Json("Expired", JsonRequestBehavior.AllowGet);
            }
        }
        //Bind the supplier
        public JsonResult Bind_dropdown_Supplier(int id)
        {
            bool val = Session["UserID"] == null ? false : true;
            if (val)
            {
                try
                {
                    using (EntityClasses dbcontext = new EntityClasses())
                    {
                        dbcontext.Configuration.ProxyCreationEnabled = false;
                        int companykey = Convert.ToInt32(Session["CompanyKey"]);
                        if (id == 0)
                        {
                            var Customer = dbcontext.Tbl_Master_CompanyDetails.Where(m => m.Cust_Supp != 0 && m.COM_KEY == companykey && m.DELETED == false).OrderBy(m => m.COM_NAME).ToList();
                            var json = new JavaScriptSerializer().Serialize(Customer);
                            return Json(json, JsonRequestBehavior.AllowGet);
                        }
                        else
                        {
                            var cust = dbcontext.Tbl_Offers_Master.Single(m => m.OFFER_ID == id).COM_ID;
                            var Customer = dbcontext.Tbl_Master_CompanyDetails.Where(m => m.Cust_Supp != 0 && m.COM_KEY == companykey && (m.DELETED == false || m.COM_ID == cust)).ToList();
                            var json = new JavaScriptSerializer().Serialize(Customer);
                            return Json(json, JsonRequestBehavior.AllowGet);
                        }
                    }

                }
                catch (Exception exe)
                {
                    string actionName = this.ControllerContext.RouteData.Values["action"].ToString();
                    string controllerName = this.ControllerContext.RouteData.Values["controller"].ToString();
                    objERR.err_title = controllerName + "-" + controllerName;
                    objERR.err_message = "Sorry for the inconvience. Some error has been occured.";
                    objERR.err_details = exe.Message.Replace("'", "");
                    int errid = bal.ExceptionInsertLogs_BL(objERR);
                    return Json("ERR" + errid.ToString(), JsonRequestBehavior.AllowGet);
                }
            }
            else
            {
                return Json("Expired", JsonRequestBehavior.AllowGet);
            }
        }
        //Bind the contact person
        public JsonResult Dropdown_ContactPerson(int id)
        {
            bool val = Session["UserID"] == null ? false : true;
            if (val)
            {
                try
                {
                    var data = bal.Dropdown_ContactPerson_BL(id);
                    var json = new JavaScriptSerializer().Serialize(data);
                    return Json(json, JsonRequestBehavior.AllowGet);
                }
                catch (Exception exe)
                {
                    string actionName = this.ControllerContext.RouteData.Values["action"].ToString();
                    string controllerName = this.ControllerContext.RouteData.Values["controller"].ToString();
                    objERR.err_title = controllerName + "-" + controllerName;
                    objERR.err_message = "Sorry for the inconvience. Some error has been occured.";
                    objERR.err_details = exe.Message.Replace("'", "");
                    int errid = bal.ExceptionInsertLogs_BL(objERR);
                    return Json("ERR" + errid.ToString(), JsonRequestBehavior.AllowGet);
                }
            }
            else
            {
                return Json("Expired", JsonRequestBehavior.AllowGet);
            }
        }
        //Bind the CAtegory
        public JsonResult Dropdown_Category()
        {
            bool val = Session["UserID"] == null ? false : true;
            if (val)
            {
                try
                {
                    decimal companykey = Convert.ToInt64(Session["CompanyKey"]);
                    var data = bal.Dropdown_Category_BL(companykey);
                    var json = new JavaScriptSerializer().Serialize(data);
                    return Json(json, JsonRequestBehavior.AllowGet);
                }
                catch (Exception exe)
                {
                    string actionName = this.ControllerContext.RouteData.Values["action"].ToString();
                    string controllerName = this.ControllerContext.RouteData.Values["controller"].ToString();
                    objERR.err_title = controllerName + "-" + controllerName;
                    objERR.err_message = "Sorry for the inconvience. Some error has been occured.";
                    objERR.err_details = exe.Message.Replace("'", "");
                    int errid = bal.ExceptionInsertLogs_BL(objERR);
                    return Json("ERR" + errid.ToString(), JsonRequestBehavior.AllowGet);
                }
            }
            else
            {
                return Json("Expired", JsonRequestBehavior.AllowGet);
            }
        }
        //Bind the product details
        public JsonResult Dropdown_ProductDetails(int id)
        {
            bool val = Session["UserID"] == null ? false : true;
            if (val)
            {
                try
                {
                    dbcontext.Configuration.ProxyCreationEnabled = false;
                    int companykey = Convert.ToInt32(Session["CompanyKey"]);
                    if (id == 0)
                    {
                        var Customer = dbcontext.Tbl_Product_Master.Where(m => m.COM_KEY == companykey && m.DELETED == false).OrderBy(m => m.P_ArticleNo).ToList();
                        var json = new JavaScriptSerializer().Serialize(Customer);
                        return Json(json, JsonRequestBehavior.AllowGet);
                    }
                    else
                    {
                        var product = dbcontext.tbl_QuotationDetails.Where(m => m.QD_PID == id).Select(a => a.QD_ProductID);
                        var Customer = dbcontext.Tbl_Product_Master.Where(m => m.COM_KEY == companykey && (m.DELETED == false || product.Contains(m.P_ID))).OrderBy(m => m.P_ArticleNo).ToList();
                        var json = new JavaScriptSerializer().Serialize(Customer);
                        return Json(json, JsonRequestBehavior.AllowGet);
                    }
                }
                catch (Exception exe)
                {
                    string actionName = this.ControllerContext.RouteData.Values["action"].ToString();
                    string controllerName = this.ControllerContext.RouteData.Values["controller"].ToString();
                    objERR.err_title = controllerName + "-" + controllerName;
                    objERR.err_message = "Sorry for the inconvience. Some error has been occured.";
                    objERR.err_details = exe.Message.Replace("'", "");
                    int errid = bal.ExceptionInsertLogs_BL(objERR);
                    return Json("ERR" + errid.ToString(), JsonRequestBehavior.AllowGet);
                }
            }
            else
            {
                return Json("Expired", JsonRequestBehavior.AllowGet);
            }
        }
        //Get the single product details
        public JsonResult ProductDetails(int id)
        {
            bool val = Session["UserID"] == null ? false : true;
            if (val)
            {
                try
                {
                    dbcontext.Configuration.ProxyCreationEnabled = false;
                    var data = (from a in dbcontext.Tbl_Product_Master
                                join b in dbcontext.Tbl_ProductGroup on a.P_CategoryID equals b.PG_ID
                                join c in dbcontext.tbl_LookUp on a.P_UOM equals c.LU_Code
                                  into m
                                from n in m.DefaultIfEmpty()
                                where a.P_ID == id && n.LU_Type == 2
                                select new
                                {
                                    b.PG_NAME,
                                    a.P_ShortName,
                                    n.LU_Description
                                });
                    var json = new JavaScriptSerializer().Serialize(data);
                    return Json(json, JsonRequestBehavior.AllowGet);
                }
                catch (Exception exe)
                {
                    string actionName = this.ControllerContext.RouteData.Values["action"].ToString();
                    string controllerName = this.ControllerContext.RouteData.Values["controller"].ToString();
                    objERR.err_title = controllerName + "-" + controllerName;
                    objERR.err_message = "Sorry for the inconvience. Some error has been occured.";
                    objERR.err_details = exe.Message.Replace("'", "");
                    int errid = bal.ExceptionInsertLogs_BL(objERR);
                    return Json("ERR" + errid.ToString(), JsonRequestBehavior.AllowGet);
                }
            }
            else
            {
                return Json("Expired", JsonRequestBehavior.AllowGet);
            }
        }
        //Bind the currency
        public JsonResult Bind_Currency()
        {
            bool val = Session["UserID"] == null ? false : true;
            if (val)
            {
                try
                {
                    decimal companykey = Convert.ToInt64(Session["CompanyKey"]);
                    var data = bal.Bind_Currency_BL();
                    var json = new JavaScriptSerializer().Serialize(data);
                    return Json(json, JsonRequestBehavior.AllowGet);
                }
                catch (Exception exe)
                {
                    string actionName = this.ControllerContext.RouteData.Values["action"].ToString();
                    string controllerName = this.ControllerContext.RouteData.Values["controller"].ToString();
                    objERR.err_title = controllerName + "-" + controllerName;
                    objERR.err_message = "Sorry for the inconvience. Some error has been occured.";
                    objERR.err_details = exe.Message.Replace("'", "");
                    int errid = bal.ExceptionInsertLogs_BL(objERR);
                    return Json("ERR" + errid.ToString(), JsonRequestBehavior.AllowGet);
                }
            }
            else
            {
                return Json("Expired", JsonRequestBehavior.AllowGet);
            }
        }
        //Check that auto/manual
        private void AutoManual()
        {
            ViewBag.AutoManual = false;
            automanual = false;
            List<Tbl_Document_Master> ObjDoc = bal.AutoManual_BL(4013);
            if (ObjDoc.Count > 0)
            {
                foreach (var item in ObjDoc)
                {
                    if (item.autogen_type == "Automatic")
                    {
                        ViewBag.AutoManual = true;
                        prefix = item.autogen_prefix;
                        automanual = true;
                    }
                    else
                    {
                        ViewBag.Required = "required";
                    }
                }
            }
        }
        //Get the payment terms
        [HttpPost]
        public JsonResult Payment_terms_dropdown(int id)
        {
            bool val = Session["UserID"] == null ? false : true;
            if (val)
            {
                try
                {
                    dbcontext.Configuration.ProxyCreationEnabled = false;
                    int companykey = Convert.ToInt32(Session["CompanyKey"]);
                    if (id == 0)
                    {
                        var paymentdata = dbcontext.Tbl_Payment_Terms.Where(m => m.COM_KEY == companykey && m.DELETED == false).OrderBy(m => m.PT_Name).ToList();
                        var json = new JavaScriptSerializer().Serialize(paymentdata);
                        return Json(json, JsonRequestBehavior.AllowGet);
                    }
                    else
                    {
                        var payment = dbcontext.Tbl_Offers_Master.Single(m => m.OFFER_ID == id).PaymentTerms;
                        var paymentdata = dbcontext.Tbl_Payment_Terms.Where(m => m.COM_KEY == companykey && (m.DELETED == false || m.PT_ID == payment)).OrderBy(m => m.PT_Name).ToList();
                        var json = new JavaScriptSerializer().Serialize(paymentdata);
                        return Json(json, JsonRequestBehavior.AllowGet);
                    }
                }

                catch (Exception exe)
                {
                    string actionName = this.ControllerContext.RouteData.Values["action"].ToString();
                    string controllerName = this.ControllerContext.RouteData.Values["controller"].ToString();
                    objERR.err_title = controllerName + "-" + controllerName;
                    objERR.err_message = "Sorry for the inconvience. Some error has been occured.";
                    objERR.err_details = exe.Message.Replace("'", "");
                    int errid = bal.ExceptionInsertLogs_BL(objERR);
                    return Json("ERR" + errid.ToString(), JsonRequestBehavior.AllowGet);
                }
            }
            else
            {
                return Json("Expired", JsonRequestBehavior.AllowGet);
            }
        }
        //Get the offer list
        public JsonResult GetOffersList(bool deleted,int type)
        {
            bool val = Session["UserID"] == null ? false : true;
            if (val)
            {
                try
                {

                    var data =(from a in dbcontext.Tbl_Offers_Master
                               //join c in dbcontext.Tbl_Master_CompanyDetails on a.CUST_ID equals c.COM_ID
                               join b in dbcontext.Tbl_Master_CompanyDetails on a.COM_ID equals b.COM_ID
                               where a.DELETED == deleted && a.AGENCY_TRADING == type

                               select new{
                                   a.OFFER_CODE,
                                   b.COM_DISPLAYNAME,
                                   SalesPerson = b.COM_DISPLAYNAME,
                                   a.OFFER_NO,
                                   a.OFFER_DATE,
                                   a.PLACE_DEST,
                                   a.DESTINATION,
                                   a.OFFER_ID,
                                   a.IS_SPECIFIC,
                                   a.VALIDITY_DATE
                               }).Distinct().OrderByDescending(s=>s.OFFER_ID).ToList();
                    var json = new JavaScriptSerializer().Serialize(data);
                    return Json(json, JsonRequestBehavior.AllowGet);
                }
                catch (Exception exe)
                {
                    string actionName = this.ControllerContext.RouteData.Values["action"].ToString();
                    string controllerName = this.ControllerContext.RouteData.Values["controller"].ToString();
                    objERR.err_title = controllerName + "-" + controllerName;
                    objERR.err_message = "Sorry for the inconvience. Some error has been occured.";
                    objERR.err_details = exe.Message.Replace("'", "");
                    int errid = bal.ExceptionInsertLogs_BL(objERR);
                    return Json("ERR" + errid.ToString(), JsonRequestBehavior.AllowGet);
                }
            }
            else
            {
                return Json("Expired", JsonRequestBehavior.AllowGet);
            }
        }
        //Validate the data
        private string validations(decimal drpSupplier, decimal OfferID, string Offercode, decimal drpcontactperson, string txtOfferNo, string txtOfferdate, string txtOrigin, string txtDest, string txtValidityperiod)
        {
            if (!automanual && Offercode == "")
            {
                return "Enter the Offer Code";
            }
            if (drpSupplier == 0)
            {
                return "Supplier shouldn’t be empty";
            }
            if (drpcontactperson == 0)
            {
                return "Contact person shouldn’t be empty";
            }
            if (txtOfferNo == "")
            {
                return "Enter the OfferNo";
            }
            if (txtOfferdate == "")
            {
                return "Offer date should not be empty.";
            }
            if (txtOrigin == "")
            {
                return "Origin place should not be empty.";
            }           
            if (txtDest == "")
            {
                return "Destination should not be empty.";
            }
            if (txtValidityperiod == "")
            {
                return "Validity period should not be 0.";
            }
            if (!automanual)
            {
                string valid = ObjBL.CheckDuplicateCode_BL(OfferID, Offercode);
                if (valid != "")
                {
                    return "Offer Code Already Exist";
                }
            }

            //{
            //    string valid = ObjBL.CheckDuplicateOfferno_BL(OfferID, txtOfferNo);
            //    if (valid != "")
            //    {
            //        return "Store Name Already Exist";
            //    }
            //}
            return "";
        }
       //Insert/update the offer details
        [HttpPost]
        public JsonResult ET_Admin_GeneralOffer_Add(decimal drpSupplier, decimal OfferID, string Offercode, decimal drpcontactperson, string txtOfferNo, string txtOfferdate, string txtOrigin, string txtDest, string ddlDescription, string ddlShmnt, string txtValidityperiod, int txtDt, bool chk_SpeCus, string drpCustomer, string txtDesc,decimal PaymentTerms, string Contactdata,int type)
        {
            bool val = Session["UserID"] == null ? false : true;
            if (val)
            {
                try
                {
                    string valid = validations(drpSupplier, OfferID, Offercode, drpcontactperson, txtOfferNo, txtOfferdate, txtOrigin, txtDest, txtValidityperiod);
                    if (valid == "")
                    {
                       
                        DateTime offerdate = DateTime.ParseExact(txtOfferdate, "dd-MM-yyyy", null);
                        DateTime validatedate = DateTime.ParseExact(txtValidityperiod, "dd-MM-yyyy", null);
                       
                        txtDt = (validatedate - offerdate).Days;
                        Tbl_Offers_Master obj = new Tbl_Offers_Master()
                        {
                            COM_ID = drpSupplier,
                            OFFER_ID = OfferID ,
                            OFFER_CODE = Offercode,
                            IS_SPECIFIC = chk_SpeCus,
                            CUST_SUPP = "1",
                            CUST_ID = Convert.ToDecimal(drpCustomer),
                            OFFER_NO = txtOfferNo,
                            OFFER_DATE = offerdate,
                            DESCRIPTION = txtDesc,
                            PLACE_DEST = txtOrigin,
                            DESTINATION = txtDest,
                            CONTACT_PERSON = drpcontactperson,
                            PAYMENT = ddlDescription,
                            SHIPMENT = ddlShmnt,
                            VALIDITY_DAYS = txtDt,
                            VALIDITY_DATE = validatedate,
                            IS_ORDER = false,
                            //AGENCY_TRADING = 0,
                            AGENCY_TRADING=type,
                            CREATED_BY = Convert.ToInt32(Session["UserID"]),
                            LAST_UPDATED_BY = Convert.ToInt32(Session["UserID"]),
                            COM_KEY = Convert.ToInt32(Session["Companykey"]),
                            PaymentTerms=PaymentTerms

                        };
                        string genCode;
                        var data = ObjBL.ET_Admin_GeneralOffer_Add_BL(obj, prefix, automanual, Contactdata,out genCode);

                       
                        //var ActiveRecords = dbcontext.Tbl_Offer_Details.Where(m => m.PRODUCT_ID == ProductId && m.DELETED == false).ToList();
                        //ActiveRecords.ForEach(m => m.ACTIVE_STATUS = false);
                        var json = "Success:"+ genCode;
                        if (data == 0)
                        {
                            json = "Failed";
                        }
                        else
                        {
                            objLOG.log_dockey = "4013";
                            objLOG.log_userid = Session["UserID"].ToString();
                            objLOG.log_recordkey = data.ToString();
                            if (OfferID == 0)
                            {
                                objLOG.log_operation = "Insert";
                                objLOG.log_Remarks = "Record Inserted Successfully";
                            }
                            else
                            {
                                objLOG.log_operation = "Update";
                                objLOG.log_Remarks = "Record Updated Successfully";
                            }
                            bal.OperationInsertLogs_BL(objLOG);
                        }
                        return Json(json, JsonRequestBehavior.AllowGet);
                    }
                    else
                    {
                        var json = "Validation:" + valid;
                        return Json(json, JsonRequestBehavior.AllowGet);
                    }
                }
                catch (Exception exe)
                {
                    string actionName = this.ControllerContext.RouteData.Values["action"].ToString();
                    string controllerName = this.ControllerContext.RouteData.Values["controller"].ToString();
                    objERR.err_title = controllerName + "-" + controllerName;
                    objERR.err_message = "Sorry for the inconvience. Some error has been occured.";
                    objERR.err_details = exe.Message.Replace("'", "");
                    int errid = bal.ExceptionInsertLogs_BL(objERR);
                    return Json("ERR" + errid.ToString(), JsonRequestBehavior.AllowGet);
                }
            }
            else
            {
                return Json("ET_SessionExpire", "ET_Login");
            }
        }
        //Edit the offer details
        [HttpPost]
        public JsonResult ET_Admin_GeneralOffer_Update_GetbyID(int id)
        {
            bool val = Session["UserID"] == null ? false : true;
            if (val)
            {
                try
                {
                    var data = ObjBL.ET_Admin_GeneralOffer_Update_GetbyID_BL(id);
                    var json = new JavaScriptSerializer().Serialize(data);
                    return Json(json, JsonRequestBehavior.AllowGet);
                }
                catch (Exception exe)
                {
                    string actionName = this.ControllerContext.RouteData.Values["action"].ToString();
                    string controllerName = this.ControllerContext.RouteData.Values["controller"].ToString();
                    objERR.err_title = controllerName + "-" + controllerName;
                    objERR.err_message = "Sorry for the inconvience. Some error has been occured.";
                    objERR.err_details = exe.Message.Replace("'", "");
                    int errid = bal.ExceptionInsertLogs_BL(objERR);
                    return Json("ERR" + errid.ToString(), JsonRequestBehavior.AllowGet);
                }
            }
            else
            {
                return Json("ET_SessionExpire", "ET_Login");
            }
        }
        //Get the deleted records
        [HttpPost]
        public JsonResult ET_Admin_GeneralOffer_Restore_Delete(int id, bool type)
        {
            bool val = Session["UserID"] == null ? false : true;
            if (val)
            {
                try
                {
                    var Updatedby = Convert.ToInt64(Session["UserID"]);
                    var result = ObjBL.ET_Admin_GeneralOffer_Restore_Delete_BL(id, Updatedby, type);
                    var json = "Failed";
                    if (result != 0)
                    {
                        json = "Success";
                    }
                    else
                    {
                        objLOG.log_dockey = "4013";
                        objLOG.log_operation = "Restore";
                        objLOG.log_userid = Session["UserID"].ToString();
                        objLOG.log_recordkey = id.ToString();
                        objLOG.log_Remarks = "Record Restored Successfully";
                        bal.OperationInsertLogs_BL(objLOG);
                    }
                    return Json(json, JsonRequestBehavior.AllowGet);
                }
                catch (Exception exe)
                {
                    string actionName = this.ControllerContext.RouteData.Values["action"].ToString();
                    string controllerName = this.ControllerContext.RouteData.Values["controller"].ToString();
                    objERR.err_title = controllerName + "-" + controllerName;
                    objERR.err_message = "Sorry for the inconvience. Some error has been occured.";
                    objERR.err_details = exe.Message.Replace("'", "");
                    int errid = bal.ExceptionInsertLogs_BL(objERR);
                    return Json("ERR" + errid.ToString(), JsonRequestBehavior.AllowGet);
                }
            }
            else
            {
                return Json("ET_SessionExpire", "ET_Login");
            }

        }
        //View:Popup view
        [HttpPost]
        public ActionResult ET_Admin_GeneralOffer_View(int id)
        {
            bool val = Session["UserID"] == null ? false : true;
            if (val)
            {
                try
                {
                    var data = ObjBL.ET_Admin_GeneralOffer_View_BL(id);
                    return PartialView("/Views/Admin/ET_Admin_GeneralOffer/_ET_Admin_GeneralOffer_View.cshtml", data);
                }
                catch (Exception exe)
                {
                    string actionName = this.ControllerContext.RouteData.Values["action"].ToString();
                    string controllerName = this.ControllerContext.RouteData.Values["controller"].ToString();
                    objERR.err_title = controllerName + "-" + controllerName;
                    objERR.err_message = "Sorry for the inconvience. Some error has been occured.";
                    objERR.err_details = exe.Message.Replace("'", "");
                    int errid = bal.ExceptionInsertLogs_BL(objERR);
                    return Json("ERR" + errid.ToString(), JsonRequestBehavior.AllowGet);
                }
            }
            else
            {
                return Json("ET_SessionExpire", "ET_Login");
            }
        }
        //Print for offer details

        [HttpPost]
        public ActionResult ET_Admin_GeneralOffer_Print(int id,string lang)
        {
            bool val = Session["UserID"] == null ? false : true;
            if (val)
            {
                try
                {
                    int com_key = Convert.ToInt32(Session["Companykey"]);
                    Tbl_Offer_Details_Print_CM obj = new Tbl_Offer_Details_Print_CM();
                    obj.Head = (from Moffer in dbcontext.Tbl_Offers_Master
                                join cust in dbcontext.Tbl_Master_CompanyDetails on Moffer.CUST_ID equals cust.COM_ID
                                where Moffer.OFFER_ID == id && Moffer.DELETED == false
                                select new Tbl_Offer_Details_CM
                                {
                                    OFFER_ID = Moffer.OFFER_ID,
                                    CompanyCode = cust.COM_CODE,
                                    CompanyName = cust.COM_NAME,
                                    Street = cust.COM_STREET,
                                    CityState = (cust.COM_CITY + ", " + cust.COM_STATE),
                                    USTID = cust.COM_USTID,
                                    CountryZip = ((dbcontext.locations.Where(a=> a.location_id == cust.COM_COUNTRY).Select(a=>a.name).FirstOrDefault())+ ", " + (cust.COM_ZIP)),
                                    VatPer = (dbcontext.Tbl_SystemSetUp.Where(a=> a.COMPANY_ID == com_key).Select(a=>a.TAX).FirstOrDefault()),
                                    imgurl = (dbcontext.Tbl_SystemSetUp.Where(a => a.COMPANY_ID == com_key).Select(a => a.COMPANY_LOGO).FirstOrDefault()),
                                    SystemCompany = (dbcontext.Tbl_SystemSetUp.Where(a => a.COMPANY_ID == com_key).Select(a => a.COMPANY_NAME).FirstOrDefault()),
                                    OFFER_CODE =Moffer.OFFER_CODE,
                                    COM_ID = Moffer.COM_ID,
                                    CUST_SUPP = Moffer.CUST_SUPP,
                                    CONTACT_PERSON = Moffer.CONTACT_PERSON,
                                    OFFER_NO = Moffer.OFFER_NO,
                                    OFFER_DATE = Moffer.OFFER_DATE,
                                    PLACE_DEST = Moffer.PLACE_DEST,
                                    DESTINATION = Moffer.DESTINATION,
                                    DESCRIPTION = Moffer.DESCRIPTION,
                                    PAYMENT = Moffer.PAYMENT,
                                    PaymentName=(dbcontext.Tbl_Payment_Terms.Where(a=>a.PT_ID==Moffer.PaymentTerms).Select(a=>a.PT_Details).FirstOrDefault()),
                                    SHIPMENT = Moffer.SHIPMENT,
                                    VALIDITY_DATE = Moffer.VALIDITY_DATE ,
                                    VALIDITY_DAYS = Moffer.VALIDITY_DAYS,
                                    CUST_ID = Moffer.CUST_ID,
                                    IS_SPECIFIC = Moffer.IS_SPECIFIC ?? true
                                }).ToList();
                    obj.Detail = (from offer in dbcontext.Tbl_Offer_Details
                                  join product in dbcontext.Tbl_Product_Master on offer.PRODUCT_ID equals product.P_ID
                                  join c in dbcontext.tbl_LookUp on product.P_UOM equals c.LU_Code into m
                                  from n in m.DefaultIfEmpty()
                                  join cry in dbcontext.Tbl_Currency_Master on offer.CURRENCY_ID equals cry.CURRENCY_ID
                                  where offer.OFFER_ID == id && offer.DELETED == false && n.LU_Type == 2
                                  select new Tbl_Offer_Details_CM
                                  {
                                      OFFER_ID = offer.OFFER_ID,
                                      PRODUCT_ID = offer.PRODUCT_ID,
                                      CATEGORY_NAME = offer.CATEGORY_NAME,
                                      PRODUCT_NAME = product.P_Name,
                                      PRICE = offer.PRICE,
                                      QUANTITY = offer.QUANTITY??0,
                                      UOM_NAME = n.LU_Description,
                                      CURRENCY_NAME = cry.CURRENCY_NAME,
                                      SHORT_NAME = product.P_ShortName,
                                      ProductFullDescription = product.P_Description
                                  }).ToList();
                    if (lang == "E")
                        return PartialView("/Views/Admin/ET_Admin_GeneralOffer/_ET_Admin_GeneralOffer_Print.cshtml", obj);
                    else
                        return PartialView("/Views/Admin/ET_Admin_GeneralOffer/ET_Admin_GeneralOffer_Print_German.cshtml", obj);
                }
                catch (Exception exe)
                {
                    string actionName = this.ControllerContext.RouteData.Values["action"].ToString();
                    string controllerName = this.ControllerContext.RouteData.Values["controller"].ToString();
                    objERR.err_title = controllerName + "-" + controllerName;
                    objERR.err_message = "Sorry for the inconvience. Some error has been occured.";
                    objERR.err_details = exe.Message.Replace("'", "");
                    int errid = bal.ExceptionInsertLogs_BL(objERR);
                    return Json("ERR" + errid.ToString(), JsonRequestBehavior.AllowGet);
                }
            }
            else
            {
                return Json("ET_SessionExpire", "ET_Login");
            }
        }
        [HttpPost]
        public ActionResult ET_Admin_GeneralOfferPrint(int id, string lang)
        {
            bool val = Session["UserID"] == null ? false : true;
            if (val)
            {
                try
                {
                    int com_key = Convert.ToInt32(Session["Companykey"]);
                    Tbl_Offer_Details_Print_CM obj = new Tbl_Offer_Details_Print_CM();
                    obj.Head = (from Moffer in dbcontext.Tbl_Offers_Master
                                join cust in dbcontext.Tbl_Master_CompanyDetails on Moffer.CUST_ID equals cust.COM_ID
                                where Moffer.OFFER_ID == id && Moffer.DELETED == false
                                select new Tbl_Offer_Details_CM
                                {
                                    OFFER_ID = Moffer.OFFER_ID,
                                    CompanyCode = cust.COM_CODE,
                                    CompanyName = cust.COM_NAME,
                                    Street = cust.COM_STREET,
                                    Zipcode = cust.COM_COUNTRY,
                                    CityState = (cust.COM_CITY + ", " + cust.COM_STATE),
                                    USTID = cust.COM_USTID,
                                    CountryZip = ((dbcontext.locations.Where(a => a.location_id == cust.COM_COUNTRY).Select(a => a.name).FirstOrDefault()) + ", " + (cust.COM_ZIP)),
                                    VatPer = (dbcontext.Tbl_SystemSetUp.Where(a => a.COMPANY_ID == com_key).Select(a => a.TAX).FirstOrDefault()),
                                    imgurl = (dbcontext.Tbl_SystemSetUp.Where(a => a.COMPANY_ID == com_key).Select(a => a.COMPANY_LOGO).FirstOrDefault()),
                                    SystemCompany = (dbcontext.Tbl_SystemSetUp.Where(a => a.COMPANY_ID == com_key).Select(a => a.COMPANY_NAME).FirstOrDefault()),
                                    OFFER_CODE = Moffer.OFFER_CODE,
                                    COM_ID = Moffer.COM_ID,
                                    CUST_SUPP = Moffer.CUST_SUPP,
                                    CONTACT_PERSON = Moffer.CONTACT_PERSON,
                                    OFFER_NO = Moffer.OFFER_NO,
                                    OFFER_DATE = Moffer.OFFER_DATE,
                                    PLACE_DEST = Moffer.PLACE_DEST,
                                    DESTINATION = Moffer.DESTINATION,
                                    DESCRIPTION = Moffer.DESCRIPTION,
                                    PAYMENT = Moffer.PAYMENT,
                                    PaymentName = (dbcontext.Tbl_Payment_Terms.Where(a => a.PT_ID == Moffer.PaymentTerms).Select(a => a.PT_Details).FirstOrDefault()),
                                    SHIPMENT = Moffer.SHIPMENT,
                                    VALIDITY_DATE = Moffer.VALIDITY_DATE,
                                    VALIDITY_DAYS = Moffer.VALIDITY_DAYS,
                                    CUST_ID = Moffer.CUST_ID,
                                    IS_SPECIFIC = Moffer.IS_SPECIFIC ?? true
                                }).ToList();
                    obj.Detail = (from offer in dbcontext.Tbl_Offer_Details
                                  join product in dbcontext.Tbl_Product_Master on offer.PRODUCT_ID equals product.P_ID
                                  join c in dbcontext.tbl_LookUp on product.P_UOM equals c.LU_Code into m
                                  from n in m.DefaultIfEmpty()
                                  join cry in dbcontext.Tbl_Currency_Master on offer.CURRENCY_ID equals cry.CURRENCY_ID
                                  where offer.OFFER_ID == id && offer.DELETED == false && n.LU_Type == 2
                                  select new Tbl_Offer_Details_CM
                                  {
                                      OFFER_ID = offer.OFFER_ID,
                                      PRODUCT_ID = offer.PRODUCT_ID,
                                      CATEGORY_NAME = offer.CATEGORY_NAME,
                                      PRODUCT_NAME = product.P_Name,
                                      PRICE = offer.PRICE,
                                      QUANTITY = offer.QUANTITY ?? 0,
                                      UOM_NAME = n.LU_Description,
                                      CURRENCY_NAME = cry.CURRENCY_NAME,
                                      SHORT_NAME = product.P_ShortName,
                                      ProductFullDescription = product.P_Description
                                  }).ToList();
                    string path = "";
                    if (lang == "E")
                    {
                        for (int i = 0; i < obj.Head.Count; i++)
                        {

                            var doc1 = new iTextSharp.text.Document(PageSize.A4, 30, 25, 130, 90);
                            string subPath = "~/Sales/PDFList/SupplierOffer/" + obj.Head[i].OFFER_CODE + "/";
                            bool exists = System.IO.Directory.Exists(HttpContext.Server.MapPath(subPath));
                            if (!exists)
                                System.IO.Directory.CreateDirectory(HttpContext.Server.MapPath(subPath));
                            var output = new FileStream(Server.MapPath(subPath + obj.Head[i].OFFER_CODE + ".pdf"), FileMode.Create);
                            var writer = PdfWriter.GetInstance(doc1, output);
                            writer.PageEvent = new pdffooterclass();
                            //PdfWriter.GetInstance(doc1, new FileStream(Request.PhysicalApplicationPath + "\\Invoice_Statement.pdf", FileMode.Create));
                            doc1.Open();
                            path = output.Name;
                            //font size change from default  added by gv on 12/12/18
                            FontFactory.RegisterDirectories();
                            Font font = new Font(FontFactory.GetFont("Arial", 10, Font.NORMAL));
                            Font fontsmall = new Font(FontFactory.GetFont("Arial", 9, Font.NORMAL));
                            Font fontsmall1 = new Font(FontFactory.GetFont("Arial", 10, Font.NORMAL | Font.UNDERLINE));
                            Font Fontbigger = new Font(FontFactory.GetFont("Arial", 20, Font.BOLD));
                            Font Fontsmaller = new Font(FontFactory.GetFont("Arial", 10, Font.BOLD));
                            Font Fontsmaller1 = new Font(FontFactory.GetFont("Arial", 12, Font.BOLD));

                            PdfPTable table1 = new PdfPTable(1);
                            table1.DefaultCell.Border = 0;
                            table1.WidthPercentage = 100f;

                           
                            Paragraph pg2 = new Paragraph();
                            Phrase phraseConstant2 = new Phrase("" + obj.Head[i].CompanyName + "\n", font);
                            Phrase phraseConstant3 = new Phrase("" + obj.Head[i].Street + "\n", font);
                            Phrase phraseConstant4 = new Phrase("" + obj.Head[i].CityState + "\n", font);
                            Phrase phraseConstant5 = new Phrase("" + obj.Head[i].CountryZip + "\n", font);
                            pg2.Add(phraseConstant2);
                            pg2.Add(phraseConstant3);
                            pg2.Add(phraseConstant4);
                            pg2.Add(phraseConstant5);
                            PdfPCell cell21 = new PdfPCell(pg2);
                            cell21.HorizontalAlignment = 0;
                            cell21.PaddingTop = 1.0f;
                            cell21.PaddingLeft = 1.0f;
                            cell21.Border = 0;
                            table1.AddCell(cell21);
                            doc1.Add(table1);

                            PdfPTable table2 = new PdfPTable(3);
                            table2.WidthPercentage = 100f;
                            float[] widthsvalforcus = new float[] { 13f, 4f, 5f };
                            table2.TotalWidth = 100f;
                            table2.WidthPercentage = 100f;
                            table2.SetWidths(widthsvalforcus);

                            Phrase emp1 = new Phrase("", font);
                            PdfPCell cell26emp = new PdfPCell(emp1);
                            cell26emp.Border = 0;
                            cell26emp.HorizontalAlignment = 2;
                            cell26emp.PaddingBottom = 2.5f;
                            table2.AddCell(cell26emp);
                            Phrase cuscode = new Phrase("Customer Code:", font);
                            PdfPCell cell26 = new PdfPCell(cuscode);
                            cell26.Border = 0;
                            cell26.HorizontalAlignment = 0;
                            cell26.PaddingBottom = 2.5f;
                            table2.AddCell(cell26);
                            Phrase cuscodeval = new Phrase("" + obj.Head[i].CompanyCode + "", font);
                            PdfPCell cell26val = new PdfPCell(cuscodeval);
                            cell26val.Border = 0;
                            cell26val.HorizontalAlignment = 0;
                            cell26val.PaddingBottom = 2.5f;
                            table2.AddCell(cell26val);

                            Phrase emp2 = new Phrase("", font);
                            PdfPCell cell26emp1 = new PdfPCell(emp2);
                            cell26emp1.Border = 0;
                            cell26emp1.HorizontalAlignment = 0;
                            cell26emp1.PaddingBottom = 2.5f;
                            table2.AddCell(cell26emp1);
                            Phrase Processby = new Phrase("KD. USt-IdNr.:", font);
                            PdfPCell cell26Processby = new PdfPCell(Processby);
                            cell26Processby.Border = 0;
                            cell26Processby.HorizontalAlignment = 0;
                            cell26Processby.PaddingBottom = 2.5f;
                            table2.AddCell(cell26Processby);
                            Phrase cuscodeval1 = new Phrase("" + obj.Head[i].USTID + "", font);
                            PdfPCell cell26Processby1 = new PdfPCell(cuscodeval1);
                            cell26Processby1.Border = 0;
                            cell26Processby1.HorizontalAlignment = 0;
                            cell26Processby1.PaddingBottom = 2.5f;
                            table2.AddCell(cell26Processby1);

                            Phrase emp3 = new Phrase("", font);
                            PdfPCell cell26emp2 = new PdfPCell(emp3);
                            cell26emp2.Border = 0;
                            cell26emp2.HorizontalAlignment = 2;
                            cell26emp2.PaddingBottom = 2.5f;
                            table2.AddCell(cell26emp2);
                            Phrase Datecell = new Phrase("Date:", font);
                            PdfPCell cell26Datecell = new PdfPCell(Datecell);
                            cell26Datecell.Border = 0;
                            cell26Datecell.HorizontalAlignment = 0;
                            cell26Datecell.PaddingBottom = 2.5f;
                            table2.AddCell(cell26Datecell);
                            Phrase cuscodeval2 = new Phrase("" + obj.Head[i].OFFER_DATE.ToString("dd-MM-yyyy") + "", font);
                            PdfPCell cell26Processby2 = new PdfPCell(cuscodeval2);
                            cell26Processby2.Border = 0;
                            cell26Processby2.HorizontalAlignment = 0;
                            cell26Processby2.PaddingBottom = 2.5f;
                            table2.AddCell(cell26Processby2);

                            Phrase emp4 = new Phrase("", font);
                            PdfPCell cell26emp4 = new PdfPCell(emp4);
                            cell26emp4.Border = 0;
                            cell26emp4.HorizontalAlignment = 2;
                            cell26emp4.PaddingBottom = 2.5f;
                            table2.AddCell(cell26emp4);
                            Phrase Datecell1 = new Phrase("Valid Up To:", font);
                            PdfPCell cell26Datecell1 = new PdfPCell(Datecell1);
                            cell26Datecell1.Border = 0;
                            cell26Datecell1.HorizontalAlignment = 0;
                            cell26Datecell1.PaddingBottom = 2.5f;
                            table2.AddCell(cell26Datecell1);
                            Phrase cuscodeval3 = new Phrase("" + obj.Head[i].VALIDITY_DATE.ToString("dd-MM-yyyy") + "", font);
                            PdfPCell cell26Processby3 = new PdfPCell(cuscodeval3);
                            cell26Processby3.Border = 0;
                            cell26Processby3.HorizontalAlignment = 0;
                            cell26Processby3.PaddingBottom = 2.5f;
                            table2.AddCell(cell26Processby3);

                            doc1.Add(table2);
                            PdfPTable contenttable = new PdfPTable(1);
                            contenttable.TotalWidth = 100f;
                            contenttable.WidthPercentage = 100f;
                            Paragraph pp1con = new Paragraph();
                            Phrase phar1con = new Phrase("Supplier Offer", Fontsmaller1);
                            pp1con.Add(phar1con);
                            PdfPCell cell29Con = new PdfPCell(pp1con);
                            //cell29Con.AddElement(new Paragraph(new Chunk("" , Fontsmaller)));
                            cell29Con.PaddingTop = 4.5f;
                            cell29Con.HorizontalAlignment = 1;
                            cell29Con.PaddingBottom = 5.5f;
                            cell29Con.Border = 0;
                            contenttable.AddCell(cell29Con);
                            PdfPCell cell29 = new PdfPCell();
                            cell29.AddElement(new Paragraph(new Chunk("Offer No:" + obj.Head[i].OFFER_CODE + "", Fontsmaller)));
                            cell29.PaddingTop = 6.5f;
                            cell29.PaddingBottom = 20.5f;
                            cell29.Border = 0;
                            contenttable.AddCell(cell29);
                            doc1.Add(contenttable);
                            PdfPTable table4 = new PdfPTable(6);
                            float[] widths1 = new float[] { 5f, 10f, 10f, 45f,  10f, 20f };
                            table4.TotalWidth = 100f;
                            table4.WidthPercentage = 100f;
                            table4.HeaderRows = 1;
                            table4.SetWidths(widths1);

                            Phrase phraseConstantde1 = new Phrase("S.No", Fontsmaller);
                            PdfPCell cell41 = new PdfPCell(phraseConstantde1);

                            // cell41.AddElement(new Paragraph(new Chunk("Item", Fontsmaller)));

                            cell41.HorizontalAlignment = 1;
                            cell41.PaddingTop = 2.5f;
                            cell41.PaddingBottom = 2.5f;

                            table4.AddCell(cell41);
                            Phrase phraseConstantde2 = new Phrase("Quantity", Fontsmaller);
                            PdfPCell cell42 = new PdfPCell(phraseConstantde2);
                            cell42.Colspan = 2;
                            //cell42.AddElement(new Paragraph(new Chunk("Qty", Fontsmaller)));
                            cell42.HorizontalAlignment = 1;
                            cell42.PaddingTop = 2.5f;
                            cell42.PaddingBottom = 2.5f;

                            table4.AddCell(cell42);
                            Phrase phraseConstantde3 = new Phrase("Product Description", Fontsmaller);
                            PdfPCell cell421 = new PdfPCell(phraseConstantde3);
                            cell421.HorizontalAlignment = 1;
                            //cell421.AddElement(new Paragraph(new Chunk("UOM", Fontsmaller)));
                            cell421.PaddingTop = 2.5f;
                            cell421.PaddingBottom = 2.5f;

                            table4.AddCell(cell421);
                            Phrase phraseConstantde4 = new Phrase("Price", Fontsmaller);
                            PdfPCell cell431 = new PdfPCell(phraseConstantde4);
                            cell431.HorizontalAlignment = 1;
                            // cell431.Colspan = 2;
                            //cell431.AddElement(new Paragraph(new Chunk("Product Name", Fontsmaller)));

                            cell431.PaddingTop = 2.5f;
                            cell431.PaddingBottom = 2.5f;

                            table4.AddCell(cell431);
                           
                            Phrase phraseConstantde5 = new Phrase("Total", Fontsmaller);
                            PdfPCell cell43 = new PdfPCell(phraseConstantde5);
                            cell43.HorizontalAlignment = 1;

                            // cell43.AddElement(new Paragraph(new Chunk("Description", Fontsmaller)));

                            cell43.PaddingTop = 2.5f;
                            cell43.PaddingBottom = 2.5f;

                            table4.AddCell(cell43);
                            decimal? total = 0;
                            for (int j = 0; j < obj.Detail.Count; j++)
                            {
                                Paragraph Snopp = new Paragraph();
                                Phrase Snophar = new Phrase("" + (j + 1) + "\n", font);
                                Snopp.Add(Snophar);
                                PdfPCell cell51 = new PdfPCell(Snopp);
                                cell51.HorizontalAlignment = 1;
                                //cell51.AddElement(new Paragraph(new Chunk("" + (j + 1) + "", font)));

                                // cell51.PaddingTop = 2.5f;
                                // cell51.PaddingBottom = 2.5f;

                                table4.AddCell(cell51);
                                Paragraph qtypp = new Paragraph();
                                Phrase qtyphar = new Phrase("" + Convert.ToDecimal(obj.Detail[j].QUANTITY).ToString("N2", CultureInfo.CreateSpecificCulture("de-DE")) + "\n", font);
                                qtypp.Add(qtyphar);
                                PdfPCell cell52 = new PdfPCell(qtypp);
                                cell52.HorizontalAlignment = 2;
                                //  cell52.PaddingTop = 2.5f;
                                // cell52.PaddingBottom = 2.5f;

                                table4.AddCell(cell52);
                                Paragraph uompp = new Paragraph();
                                Phrase uomphar = new Phrase("" + obj.Detail[j].UOM_NAME + "\n", font);
                                uompp.Add(uomphar);
                                PdfPCell uomcell = new PdfPCell(uompp);

                                // uomcell.AddElement(new Paragraph(new Chunk("" + obj.Detail[j].UOM_NAME + "", font)));
                                uomcell.HorizontalAlignment = 0;
                                // uomcell.PaddingTop = 2.5f;
                                // uomcell.PaddingBottom = 2.5f;

                                table4.AddCell(uomcell);

                                
                               
                                    Paragraph Productpp = new Paragraph();
                                    Phrase Productphar = new Phrase("" + obj.Detail[j].PRODUCT_NAME + "\n", font);
                                    Productpp.Add(Productphar);
                                    PdfPCell cell53 = new PdfPCell(Productpp);

                                    // cell53.AddElement(new Paragraph(new Chunk("" + obj.Detail[j].PRODUCT_Name + "", font)));
                                    cell53.HorizontalAlignment = 0;
                                    cell53.PaddingTop = 0f;
                                    //cell53.PaddingTop = 2.5f;
                                    // cell53.PaddingBottom = 2.5f;

                                    table4.AddCell(cell53);
                               

                                
                                    Paragraph pp = new Paragraph();
                                    Phrase phar = new Phrase("" + Convert.ToDecimal(obj.Detail[j].PRICE).ToString("c2", CultureInfo.CreateSpecificCulture("de-DE")) + "\n", font);
                                    pp.Add(phar);
                                    PdfPCell cell541 = new PdfPCell(pp);
                                    
                                    cell541.HorizontalAlignment = 2;
                                    cell541.PaddingTop = 2.5f;
                                    cell541.PaddingBottom = 2.5f;

                                    table4.AddCell(cell541);

                                    Paragraph pp12 = new Paragraph();
                                    Phrase phar12 = new Phrase("" + (Convert.ToDecimal(obj.Detail[j].PRICE) * Convert.ToDecimal(obj.Detail[j].QUANTITY)).ToString("c2", CultureInfo.CreateSpecificCulture("de-DE")) + "\n", font);
                                    pp12.Add(phar12);
                                    PdfPCell cell54 = new PdfPCell(pp12);
                                    cell54.HorizontalAlignment = 2;
                                    cell54.PaddingTop = 2.5f;
                                    cell54.PaddingBottom = 2.5f;

                                    table4.AddCell(cell54);
                                    total = total + (Convert.ToDecimal(obj.Detail[j].PRICE) * Convert.ToDecimal(obj.Detail[j].QUANTITY));
                                


                            }

                            PdfPCell NetValCell = new PdfPCell();

                            NetValCell.AddElement(new Paragraph(new Chunk("Net Value", font)));
                            NetValCell.Colspan = 5;
                            NetValCell.PaddingTop = 2.5f;
                            NetValCell.PaddingBottom = 2.5f;

                            table4.AddCell(NetValCell);
                            Paragraph pp1 = new Paragraph();
                            Phrase phar1 = new Phrase("" + Convert.ToDecimal(total).ToString("c2", CultureInfo.CreateSpecificCulture("de-DE")) + "\n", font);
                            pp1.Add(phar1);
                            PdfPCell NetValCell1 = new PdfPCell(pp1);
                            //NetValCell1.Colspan = 6;
                            NetValCell1.HorizontalAlignment = 2;
                            NetValCell1.VerticalAlignment = 2;
                            NetValCell1.PaddingTop = 2.5f;
                            NetValCell1.PaddingBottom = 2.5f;

                            table4.AddCell(NetValCell1);

                            if (obj.Head[i].Zipcode == 82)
                            {
                                PdfPCell inccell = new PdfPCell();

                                inccell.AddElement(new Paragraph(new Chunk("Incl" + Convert.ToDecimal(obj.Head[i].VatPer).ToString("0") + " % Value", font)));
                                inccell.Colspan = 5;
                                inccell.PaddingTop = 2.5f;
                                inccell.PaddingBottom = 2.5f;

                                table4.AddCell(inccell);
                                Paragraph pp1inc = new Paragraph();
                                Phrase phar1inc = new Phrase("" + (Convert.ToDecimal(total * obj.Head[i].VatPer / 100).ToString("C2", CultureInfo.CreateSpecificCulture("de-DE"))) + "\n", font);
                                pp1inc.Add(phar1inc);
                                PdfPCell inccell1 = new PdfPCell(pp1inc);
                                inccell1.HorizontalAlignment = 2;
                                inccell1.VerticalAlignment = 2;
                                inccell1.PaddingTop = 2.5f;
                                inccell1.PaddingBottom = 2.5f;

                                table4.AddCell(inccell1);
                            }
                            else
                            {

                                PdfPCell inccell = new PdfPCell();
                                inccell.AddElement(new Paragraph(new Chunk("Incl 0 % Value", font)));
                                inccell.Colspan = 5;
                                inccell.PaddingTop = 2.5f;
                                inccell.PaddingBottom = 2.5f;

                                table4.AddCell(inccell);
                                Paragraph pp1inc = new Paragraph();
                                Phrase phar1inc = new Phrase("" + (Convert.ToDecimal(total * 0 / 100).ToString("C2", CultureInfo.CreateSpecificCulture("de-DE"))) + "\n", font);
                                pp1inc.Add(phar1inc);
                                PdfPCell inccell1 = new PdfPCell(pp1inc);
                                inccell1.HorizontalAlignment = 2;
                                inccell1.PaddingTop = 2.5f;
                                inccell1.PaddingBottom = 2.5f;

                                table4.AddCell(inccell1);

                            }
                            decimal Discountamt = 0;

                            if (obj.Head[i].Zipcode == 82)
                            {

                                var Vatamount = (Convert.ToDecimal(total + ((total * obj.Head[i].VatPer / 100))));

                                
                                PdfPCell vataddcell = new PdfPCell();

                                vataddcell.AddElement(new Paragraph(new Chunk("Total", font)));
                                vataddcell.Colspan = 5;
                                vataddcell.PaddingTop = 2.5f;
                                vataddcell.PaddingBottom = 2.5f;

                                table4.AddCell(vataddcell);
                                Paragraph pp1vat = new Paragraph();
                                Phrase phar1vat = new Phrase("" + ((Convert.ToDecimal(total - Discountamt)).ToString("C2", CultureInfo.CreateSpecificCulture("de-DE"))) + "\n", Fontsmaller);
                                pp1vat.Add(phar1vat);
                                PdfPCell vataddcell1 = new PdfPCell(pp1vat);
                                vataddcell1.HorizontalAlignment = 2;
                                //vataddcell1.Colspan = 6;
                                vataddcell1.PaddingTop = 2.5f;
                                vataddcell1.PaddingBottom = 2.5f;

                                table4.AddCell(vataddcell1);

                            }
                            else
                            {
                                var Vatamount = (Convert.ToDecimal(total + ((total * 0 / 100))));

                                
                                PdfPCell vataddcell = new PdfPCell();

                                vataddcell.AddElement(new Paragraph(new Chunk("Total", font)));
                                vataddcell.Colspan = 5;
                                vataddcell.PaddingTop = 2.5f;
                                vataddcell.PaddingBottom = 2.5f;

                                table4.AddCell(vataddcell);
                                Paragraph pp1vat = new Paragraph();
                                Phrase phar1vat = new Phrase("" + ((Convert.ToDecimal(total - Discountamt)).ToString("C2", CultureInfo.CreateSpecificCulture("de-DE"))) + "\n", Fontsmaller);
                                pp1vat.Add(phar1vat);
                                PdfPCell vataddcell1 = new PdfPCell(pp1vat);
                                vataddcell1.HorizontalAlignment = 2;
                                //vataddcell1.Colspan = 6;
                                vataddcell1.PaddingTop = 2.5f;
                                vataddcell1.PaddingBottom = 2.5f;

                                table4.AddCell(vataddcell1);

                            }
                            doc1.Add(table4);

                            PdfPTable table6 = new PdfPTable(1);
                            PdfPCell cell31 = new PdfPCell();
                            cell31.Border = 0;
                            cell31.AddElement(new Paragraph(new Chunk("", font)));
                            cell31.PaddingTop = 20.5f;
                            cell31.PaddingBottom = 2.5f;
                            table6.AddCell(cell31);

                            PdfPCell cell39 = new PdfPCell();
                            cell39.Border = 0;
                            cell39.AddElement(new Paragraph(""));
                            //cell39.PaddingTop = 280.0f;
                            cell39.PaddingBottom = 2.5f;
                            table6.AddCell(cell39);
                            doc1.Add(table6);

                            PdfPTable table7 = new PdfPTable(1);
                            table7.WidthPercentage = 100f;
                            PdfPCell cell33 = new PdfPCell();
                            //if (obj.Detail.Count > 11)
                            //{
                            //    doc1.NewPage();
                            //}
                            cell33.AddElement(new Paragraph(new Chunk("Payment Terms: " + obj.Head[i].PaymentName + "", font)));

                            cell33.PaddingTop = 2.5f;
                            cell33.PaddingBottom = 2.5f;
                            cell33.Border = 0;
                            table7.AddCell(cell33);
                            PdfPCell delitercell = new PdfPCell();

                            delitercell.AddElement(new Paragraph(new Chunk("Delivery Terms: " + obj.Head[i].SHIPMENT + "", font)));

                            delitercell.PaddingTop = 2.5f;
                            delitercell.PaddingBottom = 2.5f;
                            delitercell.Border = 0;
                            table7.AddCell(delitercell);
                           
                            PdfPCell signcell = new PdfPCell();

                            signcell.AddElement(new Paragraph(new Chunk("Validity Days: "+obj.Head[i].VALIDITY_DAYS+"", font)));

                            signcell.PaddingTop = 0f;
                            signcell.PaddingBottom = 2.5f;
                            signcell.Border = 0;
                            table7.AddCell(signcell);
                            PdfPCell line1 = new PdfPCell();

                            line1.AddElement(new Paragraph(new Chunk("It is the General Terms and Conditions (GTC) of Eurotextiles GmbH & Co. KG. Downgrades of quality / quantity of goods must be given in writing before use, but in any case 7 days after receipt of the goods. Goods that are washed or washed are excluded from the complaint.", font)));

                            line1.PaddingTop = 6.5f;
                            line1.PaddingBottom = 2.5f;
                            line1.Border = 0;
                            table7.AddCell(line1);
                            PdfPCell line2 = new PdfPCell();

                            line2.AddElement(new Paragraph(new Chunk("Note according to the Federal Data Protection Act: We work with EDP and have stored your name and the data otherwise required in the context of the matter. A transmission to third does not take place.", font)));

                            line2.PaddingTop = 2.5f;
                            line2.PaddingBottom = 2.5f;
                            line2.Border = 0;
                            table7.AddCell(line2);
                            PdfPCell line3 = new PdfPCell();

                            
                            doc1.Add(table7);

                            doc1.Close();

                        }
                    }

                    if (lang == "G")
                    {
                        for (int i = 0; i < obj.Head.Count; i++)
                        {

                            var doc1 = new iTextSharp.text.Document(PageSize.A4, 30, 25, 130, 90);
                            string subPath = "~/Sales/PDFList/SupplierOffer/" + obj.Head[i].OFFER_CODE + "/";
                            bool exists = System.IO.Directory.Exists(HttpContext.Server.MapPath(subPath));
                            if (!exists)
                                System.IO.Directory.CreateDirectory(HttpContext.Server.MapPath(subPath));
                            var output = new FileStream(Server.MapPath(subPath + obj.Head[i].OFFER_CODE + ".pdf"), FileMode.Create);
                            var writer = PdfWriter.GetInstance(doc1, output);
                            writer.PageEvent = new pdffooterclass();
                            //PdfWriter.GetInstance(doc1, new FileStream(Request.PhysicalApplicationPath + "\\Invoice_Statement.pdf", FileMode.Create));
                            doc1.Open();
                            path = output.Name;
                            //font size change from default  added by gv on 12/12/18
                            FontFactory.RegisterDirectories();
                            Font font = new Font(FontFactory.GetFont("Arial", 10, Font.NORMAL));
                            Font fontsmall = new Font(FontFactory.GetFont("Arial", 9, Font.NORMAL));
                            Font fontsmall1 = new Font(FontFactory.GetFont("Arial", 10, Font.NORMAL | Font.UNDERLINE));
                            Font Fontbigger = new Font(FontFactory.GetFont("Arial", 20, Font.BOLD));
                            Font Fontsmaller = new Font(FontFactory.GetFont("Arial", 10, Font.BOLD));
                            Font Fontsmaller1 = new Font(FontFactory.GetFont("Arial", 12, Font.BOLD));

                            PdfPTable table1 = new PdfPTable(1);
                            table1.DefaultCell.Border = 0;
                            table1.WidthPercentage = 100f;


                            Paragraph pg2 = new Paragraph();
                            Phrase phraseConstant2 = new Phrase("" + obj.Head[i].CompanyName + "\n", font);
                            Phrase phraseConstant3 = new Phrase("" + obj.Head[i].Street + "\n", font);
                            Phrase phraseConstant4 = new Phrase("" + obj.Head[i].CityState + "\n", font);
                            Phrase phraseConstant5 = new Phrase("" + obj.Head[i].CountryZip + "\n", font);
                            pg2.Add(phraseConstant2);
                            pg2.Add(phraseConstant3);
                            pg2.Add(phraseConstant4);
                            pg2.Add(phraseConstant5);
                            PdfPCell cell21 = new PdfPCell(pg2);
                            cell21.HorizontalAlignment = 0;
                            cell21.PaddingTop = 1.0f;
                            cell21.PaddingLeft = 1.0f;
                            cell21.Border = 0;
                            table1.AddCell(cell21);
                            doc1.Add(table1);

                            PdfPTable table2 = new PdfPTable(3);
                            table2.WidthPercentage = 100f;
                            float[] widthsvalforcus = new float[] { 13f, 4f, 5f };
                            table2.TotalWidth = 100f;
                            table2.WidthPercentage = 100f;
                            table2.SetWidths(widthsvalforcus);

                            Phrase emp1 = new Phrase("", font);
                            PdfPCell cell26emp = new PdfPCell(emp1);
                            cell26emp.Border = 0;
                            cell26emp.HorizontalAlignment = 2;
                            cell26emp.PaddingBottom = 2.5f;
                            table2.AddCell(cell26emp);
                            Phrase cuscode = new Phrase("Kunden Nr:", font);
                            PdfPCell cell26 = new PdfPCell(cuscode);
                            cell26.Border = 0;
                            cell26.HorizontalAlignment = 0;
                            cell26.PaddingBottom = 2.5f;
                            table2.AddCell(cell26);
                            Phrase cuscodeval = new Phrase("" + obj.Head[i].CompanyCode + "", font);
                            PdfPCell cell26val = new PdfPCell(cuscodeval);
                            cell26val.Border = 0;
                            cell26val.HorizontalAlignment = 0;
                            cell26val.PaddingBottom = 2.5f;
                            table2.AddCell(cell26val);

                            Phrase emp2 = new Phrase("", font);
                            PdfPCell cell26emp1 = new PdfPCell(emp2);
                            cell26emp1.Border = 0;
                            cell26emp1.HorizontalAlignment = 0;
                            cell26emp1.PaddingBottom = 2.5f;
                            table2.AddCell(cell26emp1);
                            Phrase Processby = new Phrase("KD. USt-IdNr.:", font);
                            PdfPCell cell26Processby = new PdfPCell(Processby);
                            cell26Processby.Border = 0;
                            cell26Processby.HorizontalAlignment = 0;
                            cell26Processby.PaddingBottom = 2.5f;
                            table2.AddCell(cell26Processby);
                            Phrase cuscodeval1 = new Phrase("" + obj.Head[i].USTID + "", font);
                            PdfPCell cell26Processby1 = new PdfPCell(cuscodeval1);
                            cell26Processby1.Border = 0;
                            cell26Processby1.HorizontalAlignment = 0;
                            cell26Processby1.PaddingBottom = 2.5f;
                            table2.AddCell(cell26Processby1);

                            Phrase emp3 = new Phrase("", font);
                            PdfPCell cell26emp2 = new PdfPCell(emp3);
                            cell26emp2.Border = 0;
                            cell26emp2.HorizontalAlignment = 2;
                            cell26emp2.PaddingBottom = 2.5f;
                            table2.AddCell(cell26emp2);
                            Phrase Datecell = new Phrase("Datum:", font);
                            PdfPCell cell26Datecell = new PdfPCell(Datecell);
                            cell26Datecell.Border = 0;
                            cell26Datecell.HorizontalAlignment = 0;
                            cell26Datecell.PaddingBottom = 2.5f;
                            table2.AddCell(cell26Datecell);
                            Phrase cuscodeval2 = new Phrase("" + obj.Head[i].OFFER_DATE.ToString("dd-MM-yyyy") + "", font);
                            PdfPCell cell26Processby2 = new PdfPCell(cuscodeval2);
                            cell26Processby2.Border = 0;
                            cell26Processby2.HorizontalAlignment = 0;
                            cell26Processby2.PaddingBottom = 2.5f;
                            table2.AddCell(cell26Processby2);

                            Phrase emp4 = new Phrase("", font);
                            PdfPCell cell26emp4 = new PdfPCell(emp4);
                            cell26emp4.Border = 0;
                            cell26emp4.HorizontalAlignment = 2;
                            cell26emp4.PaddingBottom = 2.5f;
                            table2.AddCell(cell26emp4);
                            Phrase Datecell1 = new Phrase("Gültig bis:", font);
                            PdfPCell cell26Datecell1 = new PdfPCell(Datecell1);
                            cell26Datecell1.Border = 0;
                            cell26Datecell1.HorizontalAlignment = 0;
                            cell26Datecell1.PaddingBottom = 2.5f;
                            table2.AddCell(cell26Datecell1);
                            Phrase cuscodeval3 = new Phrase("" + obj.Head[i].VALIDITY_DATE.ToString("dd-MM-yyyy") + "", font);
                            PdfPCell cell26Processby3 = new PdfPCell(cuscodeval3);
                            cell26Processby3.Border = 0;
                            cell26Processby3.HorizontalAlignment = 0;
                            cell26Processby3.PaddingBottom = 2.5f;
                            table2.AddCell(cell26Processby3);

                            doc1.Add(table2);
                            PdfPTable contenttable = new PdfPTable(1);
                            contenttable.TotalWidth = 100f;
                            contenttable.WidthPercentage = 100f;
                            Paragraph pp1con = new Paragraph();
                            Phrase phar1con = new Phrase("Lieferant Angebot", Fontsmaller1);
                            pp1con.Add(phar1con);
                            PdfPCell cell29Con = new PdfPCell(pp1con);
                            //cell29Con.AddElement(new Paragraph(new Chunk("" , Fontsmaller)));
                            cell29Con.PaddingTop = 4.5f;
                            cell29Con.HorizontalAlignment = 1;
                            cell29Con.PaddingBottom = 5.5f;
                            cell29Con.Border = 0;
                            contenttable.AddCell(cell29Con);
                            PdfPCell cell29 = new PdfPCell();
                            cell29.AddElement(new Paragraph(new Chunk("Angebot Nr:" + obj.Head[i].OFFER_CODE + "", Fontsmaller)));
                            cell29.PaddingTop = 6.5f;
                            cell29.PaddingBottom = 20.5f;
                            cell29.Border = 0;
                            contenttable.AddCell(cell29);
                            doc1.Add(contenttable);
                            PdfPTable table4 = new PdfPTable(6);
                            float[] widths1 = new float[] { 5f, 10f, 10f, 45f, 10f, 20f };
                            table4.TotalWidth = 100f;
                            table4.WidthPercentage = 100f;
                            table4.HeaderRows = 1;
                            table4.SetWidths(widths1);

                            Phrase phraseConstantde1 = new Phrase("Pos", Fontsmaller);
                            PdfPCell cell41 = new PdfPCell(phraseConstantde1);

                            // cell41.AddElement(new Paragraph(new Chunk("Item", Fontsmaller)));

                            cell41.HorizontalAlignment = 1;
                            cell41.PaddingTop = 2.5f;
                            cell41.PaddingBottom = 2.5f;

                            table4.AddCell(cell41);
                            Phrase phraseConstantde2 = new Phrase("Menge", Fontsmaller);
                            PdfPCell cell42 = new PdfPCell(phraseConstantde2);
                            cell42.Colspan = 2;
                            //cell42.AddElement(new Paragraph(new Chunk("Qty", Fontsmaller)));
                            cell42.HorizontalAlignment = 1;
                            cell42.PaddingTop = 2.5f;
                            cell42.PaddingBottom = 2.5f;

                            table4.AddCell(cell42);
                            Phrase phraseConstantde3 = new Phrase("Text", Fontsmaller);
                            PdfPCell cell421 = new PdfPCell(phraseConstantde3);
                            cell421.HorizontalAlignment = 1;
                            //cell421.AddElement(new Paragraph(new Chunk("UOM", Fontsmaller)));
                            cell421.PaddingTop = 2.5f;
                            cell421.PaddingBottom = 2.5f;

                            table4.AddCell(cell421);
                            Phrase phraseConstantde4 = new Phrase("Einzelpreis EUR", Fontsmaller);
                            PdfPCell cell431 = new PdfPCell(phraseConstantde4);
                            cell431.HorizontalAlignment = 1;
                            // cell431.Colspan = 2;
                            //cell431.AddElement(new Paragraph(new Chunk("Product Name", Fontsmaller)));

                            cell431.PaddingTop = 2.5f;
                            cell431.PaddingBottom = 2.5f;

                            table4.AddCell(cell431);

                            Phrase phraseConstantde5 = new Phrase("Gesamtpreis EUR", Fontsmaller);
                            PdfPCell cell43 = new PdfPCell(phraseConstantde5);
                            cell43.HorizontalAlignment = 1;

                            // cell43.AddElement(new Paragraph(new Chunk("Description", Fontsmaller)));

                            cell43.PaddingTop = 2.5f;
                            cell43.PaddingBottom = 2.5f;

                            table4.AddCell(cell43);
                            decimal? total = 0;
                            for (int j = 0; j < obj.Detail.Count; j++)
                            {
                                Paragraph Snopp = new Paragraph();
                                Phrase Snophar = new Phrase("" + (j + 1) + "\n", font);
                                Snopp.Add(Snophar);
                                PdfPCell cell51 = new PdfPCell(Snopp);
                                cell51.HorizontalAlignment = 1;
                                //cell51.AddElement(new Paragraph(new Chunk("" + (j + 1) + "", font)));

                                // cell51.PaddingTop = 2.5f;
                                // cell51.PaddingBottom = 2.5f;

                                table4.AddCell(cell51);
                                Paragraph qtypp = new Paragraph();
                                Phrase qtyphar = new Phrase("" + Convert.ToDecimal(obj.Detail[j].QUANTITY).ToString("N2", CultureInfo.CreateSpecificCulture("de-DE")) + "\n", font);
                                qtypp.Add(qtyphar);
                                PdfPCell cell52 = new PdfPCell(qtypp);
                                cell52.HorizontalAlignment = 2;
                                //  cell52.PaddingTop = 2.5f;
                                // cell52.PaddingBottom = 2.5f;

                                table4.AddCell(cell52);
                                Paragraph uompp = new Paragraph();
                                Phrase uomphar = new Phrase("" + obj.Detail[j].UOM_NAME + "\n", font);
                                uompp.Add(uomphar);
                                PdfPCell uomcell = new PdfPCell(uompp);

                                // uomcell.AddElement(new Paragraph(new Chunk("" + obj.Detail[j].UOM_NAME + "", font)));
                                uomcell.HorizontalAlignment = 0;
                                // uomcell.PaddingTop = 2.5f;
                                // uomcell.PaddingBottom = 2.5f;

                                table4.AddCell(uomcell);



                                Paragraph Productpp = new Paragraph();
                                Phrase Productphar = new Phrase("" + obj.Detail[j].PRODUCT_NAME + "\n", font);
                                Productpp.Add(Productphar);
                                PdfPCell cell53 = new PdfPCell(Productpp);

                                // cell53.AddElement(new Paragraph(new Chunk("" + obj.Detail[j].PRODUCT_Name + "", font)));
                                cell53.HorizontalAlignment = 0;
                                cell53.PaddingTop = 0f;
                                //cell53.PaddingTop = 2.5f;
                                // cell53.PaddingBottom = 2.5f;

                                table4.AddCell(cell53);



                                Paragraph pp = new Paragraph();
                                Phrase phar = new Phrase("" + Convert.ToDecimal(obj.Detail[j].PRICE).ToString("c2", CultureInfo.CreateSpecificCulture("de-DE")) + "\n", font);
                                pp.Add(phar);
                                PdfPCell cell541 = new PdfPCell(pp);
                                //cell541.AddElement(pp);
                                //cell541.Colspan = 2;
                                cell541.HorizontalAlignment = 2;
                                cell541.PaddingTop = 2.5f;
                                cell541.PaddingBottom = 2.5f;

                                table4.AddCell(cell541);

                                Paragraph pp12 = new Paragraph();
                                Phrase phar12 = new Phrase("" + (Convert.ToDecimal(obj.Detail[j].PRICE) * Convert.ToDecimal(obj.Detail[j].QUANTITY)).ToString("c2", CultureInfo.CreateSpecificCulture("de-DE")) + "\n", font);
                                pp12.Add(phar12);
                                PdfPCell cell54 = new PdfPCell(pp12);
                                cell54.HorizontalAlignment = 2;
                                cell54.PaddingTop = 2.5f;
                                cell54.PaddingBottom = 2.5f;

                                table4.AddCell(cell54);
                                total = total + (Convert.ToDecimal(obj.Detail[j].PRICE) * Convert.ToDecimal(obj.Detail[j].QUANTITY));



                            }

                            PdfPCell NetValCell = new PdfPCell();

                            NetValCell.AddElement(new Paragraph(new Chunk("Gesamt Netto", font)));
                            NetValCell.Colspan = 5;
                            NetValCell.PaddingTop = 2.5f;
                            NetValCell.PaddingBottom = 2.5f;

                            table4.AddCell(NetValCell);
                            Paragraph pp1 = new Paragraph();
                            Phrase phar1 = new Phrase("" + Convert.ToDecimal(total).ToString("c2", CultureInfo.CreateSpecificCulture("de-DE")) + "\n", font);
                            pp1.Add(phar1);
                            PdfPCell NetValCell1 = new PdfPCell(pp1);
                           
                            NetValCell1.HorizontalAlignment = 2;
                            NetValCell1.VerticalAlignment = 2;
                            NetValCell1.PaddingTop = 2.5f;
                            NetValCell1.PaddingBottom = 2.5f;

                            table4.AddCell(NetValCell1);

                            if (obj.Head[i].Zipcode == 82)
                            {
                                PdfPCell inccell = new PdfPCell();

                                inccell.AddElement(new Paragraph(new Chunk("zzgl. " + Convert.ToDecimal(obj.Head[i].VatPer).ToString("0") + " % USt. auf", font)));
                                inccell.Colspan = 5;
                                inccell.PaddingTop = 2.5f;
                                inccell.PaddingBottom = 2.5f;

                                table4.AddCell(inccell);
                                Paragraph pp1inc = new Paragraph();
                                Phrase phar1inc = new Phrase("" + (Convert.ToDecimal(total * obj.Head[i].VatPer / 100).ToString("C2", CultureInfo.CreateSpecificCulture("de-DE"))) + "\n", font);
                                pp1inc.Add(phar1inc);
                                PdfPCell inccell1 = new PdfPCell(pp1inc);
                                inccell1.HorizontalAlignment = 2;
                                inccell1.VerticalAlignment = 2;
                                inccell1.PaddingTop = 2.5f;
                                inccell1.PaddingBottom = 2.5f;

                                table4.AddCell(inccell1);
                            }
                            else
                            {

                                PdfPCell inccell = new PdfPCell();
                                inccell.AddElement(new Paragraph(new Chunk("zzgl. 0 % USt. auf", font)));
                                inccell.Colspan = 5;
                                inccell.PaddingTop = 2.5f;
                                inccell.PaddingBottom = 2.5f;

                                table4.AddCell(inccell);
                                Paragraph pp1inc = new Paragraph();
                                Phrase phar1inc = new Phrase("" + (Convert.ToDecimal(total * 0 / 100).ToString("C2", CultureInfo.CreateSpecificCulture("de-DE"))) + "\n", font);
                                pp1inc.Add(phar1inc);
                                PdfPCell inccell1 = new PdfPCell(pp1inc);
                                inccell1.HorizontalAlignment = 2;
                                inccell1.PaddingTop = 2.5f;
                                inccell1.PaddingBottom = 2.5f;

                                table4.AddCell(inccell1);

                            }
         

                            if (obj.Head[i].Zipcode == 82)
                            {

                                var Vatamount = (Convert.ToDecimal(total + ((total * obj.Head[i].VatPer / 100))));


                                PdfPCell vataddcell = new PdfPCell();

                                vataddcell.AddElement(new Paragraph(new Chunk("Gesamtbetrag", font)));
                                vataddcell.Colspan = 5;
                                vataddcell.PaddingTop = 2.5f;
                                vataddcell.PaddingBottom = 2.5f;

                                table4.AddCell(vataddcell);
                                Paragraph pp1vat = new Paragraph();
                                Phrase phar1vat = new Phrase("" + ((Convert.ToDecimal(total)).ToString("C2", CultureInfo.CreateSpecificCulture("de-DE"))) + "\n", Fontsmaller);
                                pp1vat.Add(phar1vat);
                                PdfPCell vataddcell1 = new PdfPCell(pp1vat);
                                vataddcell1.HorizontalAlignment = 2;
                                //vataddcell1.Colspan = 6;
                                vataddcell1.PaddingTop = 2.5f;
                                vataddcell1.PaddingBottom = 2.5f;

                                table4.AddCell(vataddcell1);

                            }
                            else
                            {
                                var Vatamount = (Convert.ToDecimal(total + ((total * 0 / 100))));


                                PdfPCell vataddcell = new PdfPCell();

                                vataddcell.AddElement(new Paragraph(new Chunk("Gesamtbetrag", font)));
                                vataddcell.Colspan = 5;
                                vataddcell.PaddingTop = 2.5f;
                                vataddcell.PaddingBottom = 2.5f;

                                table4.AddCell(vataddcell);
                                Paragraph pp1vat = new Paragraph();
                                Phrase phar1vat = new Phrase("" + ((Convert.ToDecimal(total)).ToString("C2", CultureInfo.CreateSpecificCulture("de-DE"))) + "\n", Fontsmaller);
                                pp1vat.Add(phar1vat);
                                PdfPCell vataddcell1 = new PdfPCell(pp1vat);
                                vataddcell1.HorizontalAlignment = 2;
                                //vataddcell1.Colspan = 6;
                                vataddcell1.PaddingTop = 2.5f;
                                vataddcell1.PaddingBottom = 2.5f;

                                table4.AddCell(vataddcell1);

                            }
                            doc1.Add(table4);

                            PdfPTable table6 = new PdfPTable(1);
                            PdfPCell cell31 = new PdfPCell();
                            cell31.Border = 0;
                            cell31.AddElement(new Paragraph(new Chunk("", font)));
                            cell31.PaddingTop = 20.5f;
                            cell31.PaddingBottom = 2.5f;
                            table6.AddCell(cell31);

                            PdfPCell cell39 = new PdfPCell();
                            cell39.Border = 0;
                            cell39.AddElement(new Paragraph(""));
                            //cell39.PaddingTop = 280.0f;
                            cell39.PaddingBottom = 2.5f;
                            table6.AddCell(cell39);
                            doc1.Add(table6);

                            PdfPTable table7 = new PdfPTable(1);
                            table7.WidthPercentage = 100f;
                            PdfPCell cell33 = new PdfPCell();
                            //if (obj.Detail.Count > 11)
                            //{
                            //    doc1.NewPage();
                            //}
                            cell33.AddElement(new Paragraph(new Chunk("Payment Terms: " + obj.Head[i].PaymentName + "", font)));

                            cell33.PaddingTop = 2.5f;
                            cell33.PaddingBottom = 2.5f;
                            cell33.Border = 0;
                            table7.AddCell(cell33);
                            PdfPCell delitercell = new PdfPCell();

                            delitercell.AddElement(new Paragraph(new Chunk("Delivery Terms: " + obj.Head[i].SHIPMENT + "", font)));

                            delitercell.PaddingTop = 2.5f;
                            delitercell.PaddingBottom = 2.5f;
                            delitercell.Border = 0;
                            table7.AddCell(delitercell);

                            PdfPCell signcell = new PdfPCell();

                            signcell.AddElement(new Paragraph(new Chunk("Validity Days: " + obj.Head[i].VALIDITY_DAYS + "", font)));

                            signcell.PaddingTop = 0f;
                            signcell.PaddingBottom = 2.5f;
                            signcell.Border = 0;
                            table7.AddCell(signcell);
                            PdfPCell line1 = new PdfPCell();

                            line1.AddElement(new Paragraph(new Chunk("Es gelten die Allgemeinen Geschäftsbedingungen (AGB) der Eurotextiles GmbH & Co. KG. Abweichungen von Qualität/Stückzahl der Ware müssen uns vor Benutzung, aber in jedem Fall innerhalb von 7 Tagen nach Erhalt der Ware, schriftlich mitgeteilt werden. Ware die bereits gewaschen oder benutzt wurde ist von der Reklamation ausgeschlossen.", font)));

                            line1.PaddingTop = 6.5f;
                            line1.PaddingBottom = 2.5f;
                            line1.Border = 0;
                            table7.AddCell(line1);
                            PdfPCell line2 = new PdfPCell();

                            line2.AddElement(new Paragraph(new Chunk("Hinweis nach Bundesdatenschutzgesetz: Wir arbeiten mit EDV und haben Ihren Namen und die sonst im Rahmen der Angelegenheit benötigten Daten gespeichert. Eine Übermittlung an Dritte findet nicht statt.", font)));

                            line2.PaddingTop = 2.5f;
                            line2.PaddingBottom = 2.5f;
                            line2.Border = 0;
                            table7.AddCell(line2);
                            PdfPCell line3 = new PdfPCell();


                            doc1.Add(table7);

                            doc1.Close();

                        }
                    }

                    return Json(obj.Head, JsonRequestBehavior.AllowGet);
                }
                catch (Exception exe)
                {
                    string actionName = this.ControllerContext.RouteData.Values["action"].ToString();
                    string controllerName = this.ControllerContext.RouteData.Values["controller"].ToString();
                    objERR.err_title = controllerName + "-" + controllerName;
                    objERR.err_message = "Sorry for the inconvience. Some error has been occured.";
                    objERR.err_details = exe.Message.Replace("'", "");
                    int errid = bal.ExceptionInsertLogs_BL(objERR);
                    return Json("ERR" + errid.ToString(), JsonRequestBehavior.AllowGet);
                }
            }
            else
            {
                return Json("ET_SessionExpire", "ET_Login");
            }
        }
        public class pdffooterclass : PdfPageEventHelper
        {
            PdfTemplate headerTemplate, footerTemplate;
            BaseFont bf = null;
            PdfContentByte cb;
            Color FontColour = new Color(35, 31, 32);
            Font Fontbiggest = new Font(FontFactory.GetFont("Arial", 50, Font.BOLD, new Color(180)));
            Font Fontbigger = new Font(FontFactory.GetFont("Arial", 20, Font.BOLD));
            Font Fontsmaller = new Font(FontFactory.GetFont("Arial", 10, Font.BOLD));

            //Image logo = iTextSharp.text.Image.GetInstance("E:/Projects/Indra/Images/euro_logowithText.png");
            Image logo = iTextSharp.text.Image.GetInstance("C:/Websites/Indra/Images/euro_logowithText.png");
            public override void OnStartPage(PdfWriter writer, Document document)
            {
                base.OnStartPage(writer, document);
                //logo.ScaleAbsoluteHeight(100);
                //logo.ScaleAbsoluteWidth(500);
                PdfPCell imageCell = new PdfPCell(logo);
                imageCell.HorizontalAlignment = Element.ALIGN_CENTER;
                imageCell.Border = 0;
                PdfPTable table0 = new PdfPTable(1);
                table0.WidthPercentage = 200f;
                table0.TotalWidth = 200f;
                imageCell.PaddingLeft = 109f;
                float[] widths = new float[] { 200f };
                table0.SetWidths(widths);
                table0.AddCell(imageCell);
                // Phrase phraseConstant = new Phrase("EUROTEXTILES\n", Fontbiggest);
                // Phrase phraseConstant1 = new Phrase("Order Conformation", Fontbigger);
                //PdfPCell cell = new PdfPCell(phraseConstant);
                //cell.HorizontalAlignment = 0;
                //Paragraph pg1 = new Paragraph();
                //pg1.Add(phraseConstant);
                // pg1.Add(phraseConstant1);
                //PdfPCell cell12 = new PdfPCell(pg1);
                //cell12.HorizontalAlignment = 1;
                //cell12.Border = 0;
                //cell12.PaddingTop = 2.5f;
                //cell12.PaddingLeft = 2.5f;
                //cell12.PaddingBottom = 2.5f;
                //table0.AddCell(cell12);
                //cb.MoveTo(40, document.PageSize.Height - 100);
                //cb.LineTo(document.PageSize.Width - 40, document.PageSize.Height - 100);
                table0.WriteSelectedRows(0, -1, 0, (document.PageSize.Height - 10), writer.DirectContent);
            }
            public override void OnEndPage(PdfWriter writer, Document document)
            {
                Font fontsmall = new Font(FontFactory.GetFont("Arial", 8, Font.NORMAL));

                base.OnEndPage(writer, document);

                PdfPTable tabFot = new PdfPTable(4);
                tabFot.WidthPercentage = 100f;
                tabFot.TotalWidth = 100f;
                //PdfPCell cell;
                tabFot.TotalWidth = 300F;
                //PdfPTable table10 = new PdfPTable(4);
                PdfPCell cell35 = new PdfPCell();

                PdfPCell cell35line = new PdfPCell();
                float[] widths2 = new float[] { 120f, 130f, 162f, 160f };
                tabFot.SetTotalWidth(widths2);
                tabFot.SetWidthPercentage(widths2, PageSize.A4);
                tabFot.SetWidths(widths2);
                cell35line.AddElement(new Paragraph(new Chunk("________________________________________________________________________________________________________________", fontsmall)));
                cell35line.Colspan = 4;
                cell35line.Border = 0;
                cell35line.NoWrap = true;
                tabFot.AddCell(cell35line);
                cell35.AddElement(new Paragraph(new Chunk("Eurotextiles GmbH & Co. KG", fontsmall)));
                //cell35.PaddingTop = 7.5f;
                //cell35.PaddingBottom = 7.5f;
                cell35.Border = 0;
                tabFot.AddCell(cell35);

                PdfPCell cell36 = new PdfPCell();

                cell36.AddElement(new Paragraph(new Chunk("HRA 3451", fontsmall)));
                cell36.PaddingTop = 1.5f;
                cell36.Border = 0;
                tabFot.AddCell(cell36);

                PdfPCell cell37 = new PdfPCell();

                cell37.AddElement(new Paragraph(new Chunk("Kompl.Indra Enterprises GmbH", fontsmall)));
                cell37.PaddingTop = 1.5f;
                cell37.Border = 0;
                tabFot.AddCell(cell37);

                PdfPCell cell38 = new PdfPCell();

                cell38.AddElement(new Paragraph(new Chunk("Bankverbindung", fontsmall)));
                cell38.PaddingTop = 1.5f;
                cell38.Border = 0;
                tabFot.AddCell(cell38);

                PdfPCell cell310 = new PdfPCell();

                cell310.AddElement(new Paragraph(new Chunk("Mammolshainer Weg 14", fontsmall)));
                cell310.PaddingTop = 1.5f;
                cell310.Border = 0;
                tabFot.AddCell(cell310);

                PdfPCell cell40 = new PdfPCell();

                cell40.AddElement(new Paragraph(new Chunk("Amtsgericht Königstein", fontsmall)));
                cell40.PaddingTop = 1.5f;
                cell40.Border = 0;
                tabFot.AddCell(cell40);

                PdfPCell cell59 = new PdfPCell();

                cell59.AddElement(new Paragraph(new Chunk("Geschäftsführer:Krishna Javaji", fontsmall)));
                cell59.PaddingTop = 1.5f;
                cell59.Border = 0;
                tabFot.AddCell(cell59);

                PdfPCell cell60 = new PdfPCell();

                cell60.AddElement(new Paragraph(new Chunk("Nassauische Sparkasse", fontsmall)));
                cell60.PaddingTop = 1.5f;
                cell60.Border = 0;
                tabFot.AddCell(cell60);

                PdfPCell cell61 = new PdfPCell();

                cell61.AddElement(new Paragraph(new Chunk("61462 Königstein im Taunus", fontsmall)));
                cell61.PaddingTop = 1.5f;
                cell61.Border = 0;
                tabFot.AddCell(cell61);


                PdfPCell cell62 = new PdfPCell();

                cell62.AddElement(new Paragraph(new Chunk("Steuerrnummer 003 315 60117", fontsmall)));
                cell62.PaddingTop = 1.5f;
                cell62.Border = 0;
                tabFot.AddCell(cell62);
                PdfPCell cell64 = new PdfPCell();

                cell64.AddElement(new Paragraph(new Chunk("HRB 5137 Amtsgericht Königstein", fontsmall)));
                cell64.PaddingTop = 1.5f;
                cell64.Border = 0;
                tabFot.AddCell(cell64);

                PdfPCell cell65 = new PdfPCell();

                cell65.AddElement(new Paragraph(new Chunk("IBAN :DE15 5105 00150 270 0607 06", fontsmall)));
                cell65.PaddingTop = 1.5f;
                cell65.Border = 0;
                tabFot.AddCell(cell65);

                PdfPCell cell66 = new PdfPCell();

                cell66.AddElement(new Paragraph(new Chunk("Fon +49 6174/25980", fontsmall)));
                cell66.PaddingTop = 1.5f;
                cell66.PaddingBottom = 5.5f;
                cell66.Border = 0;
                tabFot.AddCell(cell66);

                PdfPCell cell67 = new PdfPCell();

                cell67.AddElement(new Paragraph(new Chunk("USt-IdNr.DE279479010", fontsmall)));
                cell67.PaddingTop = 1.5f;
                cell67.PaddingBottom = 5.5f;
                cell67.Border = 0;
                tabFot.AddCell(cell67);

                PdfPCell cell68 = new PdfPCell();

                cell68.AddElement(new Paragraph(new Chunk("Steuernummer 003 236 16128", fontsmall)));
                cell68.PaddingTop = 1.5f;
                cell68.PaddingBottom = 5.5f;
                cell68.Border = 0;
                tabFot.AddCell(cell68);


                PdfPCell cell71 = new PdfPCell();

                cell71.AddElement(new Paragraph(new Chunk("SWIFT:-BIC NASSDE55XXX", fontsmall)));
                cell71.PaddingTop = 1.5f;
                cell71.PaddingBottom = 5.5f;
                cell71.Border = 0;
                tabFot.AddCell(cell71);
                tabFot.WriteSelectedRows(-300, -1, 20, (document.PageSize.Height - 735), writer.DirectContent);
            }
            public override void OnCloseDocument(PdfWriter writer, Document document)
            {
                base.OnCloseDocument(writer, document);

                //headerTemplate.BeginText();
                //headerTemplate.SetFontAndSize(bf, 12);
                //headerTemplate.SetTextMatrix(0, 0);
                //headerTemplate.ShowText((writer.PageNumber - 1).ToString());
                //headerTemplate.EndText();

                //footerTemplate.BeginText();
                //footerTemplate.SetFontAndSize(bf, 12);
                //footerTemplate.SetTextMatrix(0, 0);
                //footerTemplate.ShowText((writer.PageNumber - 1).ToString());
                //footerTemplate.EndText();
            }
            public override void OnOpenDocument(PdfWriter writer, Document document)
            {
                try
                {
                    DateTime PrintTime = DateTime.Now;
                    bf = BaseFont.CreateFont(BaseFont.HELVETICA, BaseFont.CP1252, BaseFont.NOT_EMBEDDED);
                    cb = writer.DirectContent;
                    headerTemplate = cb.CreateTemplate(100, 100);
                    footerTemplate = cb.CreateTemplate(50, 50);
                }
                catch (DocumentException de)
                {
                }
                catch (System.IO.IOException ioe)
                {
                }
            }
        }
        //Edit the single record
        public JsonResult ET_Admin_GeneralOffer_Details_Update_GetbyID(int id)
        {
            bool val = Session["UserID"] == null ? false : true;
            if (val)
            {
                try
                {
                    var data = ObjBL.ET_Admin_GeneralOffer_Details_Update_GetbyID_BL(id);
                    var json = new JavaScriptSerializer().Serialize(data);
                    return Json(json, JsonRequestBehavior.AllowGet);                    
                }
                catch (Exception exe)
                {
                    string actionName = this.ControllerContext.RouteData.Values["action"].ToString();
                    string controllerName = this.ControllerContext.RouteData.Values["controller"].ToString();
                    objERR.err_title = controllerName + "-" + controllerName;
                    objERR.err_message = "Sorry for the inconvience. Some error has been occured.";
                    objERR.err_details = exe.Message.Replace("'", "");
                    int errid = bal.ExceptionInsertLogs_BL(objERR);
                    return Json("ERR" + errid.ToString(), JsonRequestBehavior.AllowGet);
                }
            }
            else
            {
                return Json("ET_SessionExpire", "ET_Login");
            }
        }
        //Bind the bank name
        public JsonResult Bind_dropdown_Banknameandcussup(int id)
        {
            bool val = Session["UserID"] == null ? false : true;
            if (val)
            {
                try
                {
                    EntityClasses dbcontext = new EntityClasses();
                    dbcontext.Configuration.ProxyCreationEnabled = false;
                    decimal companykey = Convert.ToInt64(Session["CompanyKey"]);
                    try
                    {
                        var Bankname = (from tmc in dbcontext.Tbl_Master_CompanyDetails
                                        join bank in dbcontext.Tbl__Master_CompanyBank on tmc.COM_ID equals bank.B_PID into t
                                        from rt in t.DefaultIfEmpty()
                                        where tmc.Cust_Supp != id && tmc.DELETED == false && tmc.COM_KEY == companykey
                                        select new
                                        {
                                            rt.B_ID,
                                            rt.B_NAME,
                                            tmc.COM_ID,
                                            tmc.COM_NAME
                                        }).OrderBy(m=>m.COM_NAME).ToList();
                        var json = new JavaScriptSerializer().Serialize(Bankname);
                        return Json(json, JsonRequestBehavior.AllowGet);
                    }
                    catch (Exception exe)
                    {
                        throw exe;
                    }
                }
                catch (Exception exe)
                {
                    string actionName = this.ControllerContext.RouteData.Values["action"].ToString();
                    string controllerName = this.ControllerContext.RouteData.Values["controller"].ToString();
                    objERR.err_title = controllerName + "-" + controllerName;
                    objERR.err_message = "Sorry for the inconvience. Some error has been occured.";
                    objERR.err_details = exe.Message.Replace("'", "");
                    int errid = bal.ExceptionInsertLogs_BL(objERR);
                    return Json("ERR" + errid.ToString(), JsonRequestBehavior.AllowGet);
                }
            }
            else
            {
                return Json("Expired", JsonRequestBehavior.AllowGet);
            }
        }
        //Adding the days for offer
        public DateTime Add_Days(string valititydate)
        {
            try
            {
                DateTime Newdate = DateTime.Now ;
                DateTime valitity = Convert.ToDateTime(valititydate);
                var Add_Days = (valitity.Subtract(Newdate));
                //  DateTime = valitity - Newdate;
                //  Newdate = EndDateone.AddDays(day);
                return Newdate;
            }
            catch (Exception exe)
            {
                throw exe;
            }
        }

    }
}