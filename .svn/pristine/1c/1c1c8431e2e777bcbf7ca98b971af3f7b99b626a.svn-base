using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.Mvc;
using System.Data.Entity;
//using BusinessEntity.CustomModels;
using BusinessEntity.EntityModels;
using BusinessLogic;
using BusinessLogic.Admin_BL;
using System.Web.Script.Serialization;
using BusinessEntity.CustomModels;

namespace Euro.Controllers.Sales
{
    public class ET_Sales_DespatchController : Controller
    {
        public static string prefix = "";
        public static bool automanual = false;
        BAL bal = new BAL();
        error_master objERR = new error_master();
        tbl_loginfo objLOG = new tbl_loginfo();
        EntityClasses dbcontext = new EntityClasses();
        // GET: ET_Sales_Despatch
        public ActionResult ET_Sales_Despatch()
        {
            bool val = Session["UserID"] == null ? false : true;
            if (val)
            {
                try
                {
                    AutoManual();
                    ViewBag.Login_Name = Session["DisplayName"].ToString();
                    return View();
                }
                catch (Exception exe)
                {
                    string actionName = this.ControllerContext.RouteData.Values["action"].ToString();
                    string controllerName = this.ControllerContext.RouteData.Values["controller"].ToString();
                    objERR.err_title = controllerName + "-" + controllerName;
                    objERR.err_message = "Sorry for the inconvience. Some error has been occured.";
                    objERR.err_details = exe.Message.Replace("'", "");
                    int errid = bal.ExceptionInsertLogs_BL(objERR);
                    return Json("ERR" + errid.ToString(), JsonRequestBehavior.AllowGet);
                }
            }
            else
            {
                return RedirectToAction("ET_SessionExpire", "ET_Login");
            }
        }
        public ActionResult ET_Sales_OrderToDespatch()
        {
            bool val = Session["UserID"] == null ? false : true;
            if (val)
            {
                try
                {
                    AutoManual();
                    ViewBag.Login_Name = Session["DisplayName"].ToString();
                    return View();
                }
                catch (Exception exe)
                {
                    string actionName = this.ControllerContext.RouteData.Values["action"].ToString();
                    string controllerName = this.ControllerContext.RouteData.Values["controller"].ToString();
                    objERR.err_title = controllerName + "-" + controllerName;
                    objERR.err_message = "Sorry for the inconvience. Some error has been occured.";
                    objERR.err_details = exe.Message.Replace("'", "");
                    int errid = bal.ExceptionInsertLogs_BL(objERR);
                    return Json("ERR" + errid.ToString(), JsonRequestBehavior.AllowGet);
                }
            }
            else
            {
                return RedirectToAction("ET_SessionExpire", "ET_Login");
            }
        }
        private void AutoManual()
        {
            ViewBag.AutoManual = false;
            automanual = false;
            List<Tbl_Document_Master> ObjDoc = bal.AutoManual_BL(3011);
            if (ObjDoc.Count > 0)
            {
                foreach (var item in ObjDoc)
                {
                    if (item.autogen_type == "Automatic")
                    {
                        ViewBag.AutoManual = true;
                        prefix = item.autogen_prefix;
                        automanual = true;
                    }
                    else
                    {
                        ViewBag.Required = "required";
                    }
                }
            }
        }

        public JsonResult GetPrivilages()
        {

            bool val = Session["UserID"] == null ? false : true;
            if (val)
            {
                try
                {
                    var privilagelist = bal.GetPrivilages_BL(Convert.ToInt32(Session["UserID"].ToString()), 3011);
                    var json = new JavaScriptSerializer().Serialize(privilagelist);
                    return Json(json, JsonRequestBehavior.AllowGet);
                }
                catch (Exception exe)
                {
                    string actionName = this.ControllerContext.RouteData.Values["action"].ToString();
                    string controllerName = this.ControllerContext.RouteData.Values["controller"].ToString();
                    objERR.err_title = controllerName + "-" + controllerName;
                    objERR.err_message = "Sorry for the inconvience. Some error has been occured.";
                    objERR.err_details = exe.Message.Replace("'", "");
                    int errid = bal.ExceptionInsertLogs_BL(objERR);
                    return Json("ERR" + errid.ToString(), JsonRequestBehavior.AllowGet);
                }
            }
            else
            {
                return Json("Expired", JsonRequestBehavior.AllowGet);
            }
        }
        public JsonResult GetOrderDetails(decimal id)
        {
            bool val = Session["UserID"] == null ? false : true;

            try
            {
                dbcontext.Configuration.ProxyCreationEnabled = false;
                Schedule_CM obj = new Schedule_CM();

                var data1 = (from a in dbcontext.Tbl_Master_Order
                             where a.SO_ID == id
                             select new
                             {
                                 a.SO_ID,
                                 a.SO_OrderDate,
                                 a.SO_SalesPersonID,
                                 a.SO_CutomerID,
                             }
           ).ToList();
                var json = new JavaScriptSerializer().Serialize(data1);
                return Json(json, JsonRequestBehavior.AllowGet);

            }
            catch (Exception exe)
            {
                string actionName = this.ControllerContext.RouteData.Values["action"].ToString();
                string controllerName = this.ControllerContext.RouteData.Values["controller"].ToString();
                objERR.err_title = controllerName + "-" + controllerName;
                objERR.err_message = "Sorry for the inconvience. Some error has been occured.";
                objERR.err_details = exe.Message.Replace("'", "");
                int errid = bal.ExceptionInsertLogs_BL(objERR);
                return Json("ERR" + errid.ToString(), JsonRequestBehavior.AllowGet);
            }
        }
       
        public JsonResult GetDespatchList(bool delete)
        {

            bool val = Session["UserID"] == null ? false : true;
            if (val)
            {
                try
                {
                    int com_key = Convert.ToInt32(Session["CompanyKey"].ToString());

                    dbcontext.Configuration.ProxyCreationEnabled = false;
                    var data = (from a in dbcontext.Tbl_DespatchHeader
                                join b in dbcontext.Tbl_Master_CompanyDetails on a.D_CustomerID equals b.COM_ID into comp
                                from x in comp
                                join d in dbcontext.Tbl_Master_User on a.D_SalesPerson equals d.USER_ID into user
                                from z in user
                                where a.DELETED == delete && a.COM_KEY == com_key
                                select new
                                {
                                    D_ID=a.D_ID,
                                    D_Code = a.D_Code,
                                    D_DespatchDate = a.D_DespatchDate.ToString(),
                                    D_CustomerName = x.COM_NAME,
                                    D_SalesPersonName = z.USER_NAME,
                                    a.D_Status
                                }
                                ).ToList();
                    var json = new JavaScriptSerializer().Serialize(data);
                    return Json(json, JsonRequestBehavior.AllowGet);
                }
                catch (Exception exe)
                {
                    string actionName = this.ControllerContext.RouteData.Values["action"].ToString();
                    string controllerName = this.ControllerContext.RouteData.Values["controller"].ToString();
                    objERR.err_title = controllerName + "-" + controllerName;
                    objERR.err_message = "Sorry for the inconvience. Some error has been occured.";
                    objERR.err_details = exe.Message.Replace("'", "");
                    int errid = bal.ExceptionInsertLogs_BL(objERR);
                    return Json("ERR" + errid.ToString(), JsonRequestBehavior.AllowGet);
                }
            }
            else
            {
                return Json("Expired", JsonRequestBehavior.AllowGet);
            }
        }
        public JsonResult GetCustomers(int id)
        {

            bool val = Session["UserID"] == null ? false : true;
            if (val)
            {
                try
                {
                    int comkey = Convert.ToInt32(Session["CompanyKey"].ToString());
                    dbcontext.Configuration.ProxyCreationEnabled = false;
                    if (id == 0)
                    {
                        var data = dbcontext.Tbl_Master_CompanyDetails.Where(m => m.COM_KEY == comkey && m.Cust_Supp != 1 && m.DELETED == false).ToList();
                        var json = new JavaScriptSerializer().Serialize(data);
                        return Json(json, JsonRequestBehavior.AllowGet);
                    }
                    else
                    {
                        var custs = dbcontext.Tbl_DespatchHeader.Single(a => a.D_ID == id).D_CustomerID;
                        var data = dbcontext.Tbl_Master_CompanyDetails.Where(m => m.COM_KEY == comkey && m.Cust_Supp != 1 && (m.DELETED == false || m.COM_ID == custs)).ToList();
                        var json = new JavaScriptSerializer().Serialize(data);
                        return Json(json, JsonRequestBehavior.AllowGet);
                    }
                }
                catch (Exception exe)
                {
                    string actionName = this.ControllerContext.RouteData.Values["action"].ToString();
                    string controllerName = this.ControllerContext.RouteData.Values["controller"].ToString();
                    objERR.err_title = controllerName + "-" + controllerName;
                    objERR.err_message = "Sorry for the inconvience. Some error has been occured.";
                    objERR.err_details = exe.Message.Replace("'", "");
                    int errid = bal.ExceptionInsertLogs_BL(objERR);
                    return Json("ERR" + errid.ToString(), JsonRequestBehavior.AllowGet);
                }
            }
            else
            {
                return Json("Expired", JsonRequestBehavior.AllowGet);
            }
        }

        public JsonResult Orders(int customerid,int despatchid)
        {

            bool val = Session["UserID"] == null ? false : true;
            if (val)
            {
                try
                {
                    int comkey = Convert.ToInt32(Session["CompanyKey"].ToString());
                    dbcontext.Configuration.ProxyCreationEnabled = false;
                    if (despatchid == 0)
                    {
                        var data = dbcontext.Tbl_Master_Order.Where(m => m.COM_KEY == comkey && m.DELETED == false && m.SO_CutomerID == customerid && m.SO_OrderType==3).ToList();
                        var json = new JavaScriptSerializer().Serialize(data);
                        return Json(json, JsonRequestBehavior.AllowGet);
                    }
                    else
                    {
                        var data1 = dbcontext.Tbl_DespatchHeader.Single(m=>m.D_ID == despatchid).D_OrderID;
                        var UID = new HashSet<decimal>(data1.Split(',').Select(m => Convert.ToDecimal(m)).ToList());
                        var data = dbcontext.Tbl_Master_Order.Where(m => UID.Contains(m.SO_ID)).ToList();
                        var json = new JavaScriptSerializer().Serialize(data);
                        return Json(json, JsonRequestBehavior.AllowGet);
                    }
                }
                catch (Exception exe)
                {
                    string actionName = this.ControllerContext.RouteData.Values["action"].ToString();
                    string controllerName = this.ControllerContext.RouteData.Values["controller"].ToString();
                    objERR.err_title = controllerName + "-" + controllerName;
                    objERR.err_message = "Sorry for the inconvience. Some error has been occured.";
                    objERR.err_details = exe.Message.Replace("'", "");
                    int errid = bal.ExceptionInsertLogs_BL(objERR);
                    return Json("ERR" + errid.ToString(), JsonRequestBehavior.AllowGet);
                }
            }
            else
            {
                return Json("Expired", JsonRequestBehavior.AllowGet);
            }
        }
        public JsonResult GetStores(int id)
        {

            bool val = Session["UserID"] == null ? false : true;
            if (val)
            {
                try
                {
                    int comkey = Convert.ToInt32(Session["CompanyKey"].ToString());
                    dbcontext.Configuration.ProxyCreationEnabled = false;
                    if (id == 0)
                    {
                        var data = dbcontext.tbl_StoreMaster.Where(m => m.SM_CompanyKey == comkey && m.SM_DeleteStatus == false).ToList();
                        var json = new JavaScriptSerializer().Serialize(data);
                        return Json(json, JsonRequestBehavior.AllowGet);
                    }
                    else
                    {
                        var storeid = dbcontext.Tbl_DespatchHeader.Single(a => a.D_ID == id).D_StoreID;
                        var data = dbcontext.tbl_StoreMaster.Where(m => m.SM_CompanyKey == comkey && (m.SM_DeleteStatus == false || m.SM_Id == storeid)).ToList();
                        var json = new JavaScriptSerializer().Serialize(data);
                        return Json(json, JsonRequestBehavior.AllowGet);
                    }
                }
                catch (Exception exe)
                {
                    string actionName = this.ControllerContext.RouteData.Values["action"].ToString();
                    string controllerName = this.ControllerContext.RouteData.Values["controller"].ToString();
                    objERR.err_title = controllerName + "-" + controllerName;
                    objERR.err_message = "Sorry for the inconvience. Some error has been occured.";
                    objERR.err_details = exe.Message.Replace("'", "");
                    int errid = bal.ExceptionInsertLogs_BL(objERR);
                    return Json("ERR" + errid.ToString(), JsonRequestBehavior.AllowGet);
                }
            }
            else
            {
                return Json("Expired", JsonRequestBehavior.AllowGet);
            }
        }
        public JsonResult GetSalesPerson()
        {

            bool val = Session["UserID"] == null ? false : true;
            if (val)
            {
                try
                {
                    dbcontext.Configuration.ProxyCreationEnabled = false;
                    int comkey = Convert.ToInt32(Session["CompanyKey"].ToString());
                    var ObjSales_Org = dbcontext.Tbl_Sales_Organization.Where(m => m.COM_KEY == comkey && m.DELETED == false && m.sales_Organization==3).ToList();
                    string s = "";
                    for (int i = 0; i < ObjSales_Org.Count(); i++)
                    {
                        if (i == 0)
                        {
                            s = ObjSales_Org[i].ORG_EMPLOYEE_IDS.ToString();
                        }
                        else
                        {
                            s = s + "," + ObjSales_Org[i].ORG_EMPLOYEE_IDS.ToString();
                        }
                    }
                    var UID = new HashSet<decimal>(s.Split(',').Select(m => Convert.ToDecimal(m)).ToList());
                    var Users = dbcontext.Tbl_Master_User.Where(m => m.USER_ID > 0 && UID.Contains(m.USER_ID) && m.COM_KEY == comkey).Distinct().ToList();
                    var json = new JavaScriptSerializer().Serialize(Users);
                    return Json(json, JsonRequestBehavior.AllowGet);
                }
                catch (Exception exe)
                {
                    string actionName = this.ControllerContext.RouteData.Values["action"].ToString();
                    string controllerName = this.ControllerContext.RouteData.Values["controller"].ToString();
                    objERR.err_title = controllerName + "-" + controllerName;
                    objERR.err_message = "Sorry for the inconvience. Some error has been occured.";
                    objERR.err_details = exe.Message.Replace("'", "");
                    int errid = bal.ExceptionInsertLogs_BL(objERR);
                    return Json("ERR" + errid.ToString(), JsonRequestBehavior.AllowGet);
                }
            }
            else
            {
                return Json("Expired", JsonRequestBehavior.AllowGet);
            }
        }
        public ActionResult GetDespatchDetails(string ids,int despatchid,int storeid)
        {

            bool val = Session["UserID"] == null ? false : true;
            if (val)
            {
                try
                {
                    var OrderIDs = new HashSet<decimal>(ids.Split(',').Select(m => Convert.ToDecimal(m)).ToList());
                    if (despatchid == 0)
                    {
                        int comkey = Convert.ToInt32(Session["CompanyKey"].ToString());
                        dbcontext.Configuration.ProxyCreationEnabled = false;
                        var data = (from a in dbcontext.Tbl_Order_Details
                                    join b in dbcontext.Tbl_Product_Master on a.PRODUCT_ID equals b.P_ID
                                    join c in dbcontext.tbl_LookUp on b.P_UOM equals c.LU_Code
                                     into m
                                    from n in m.DefaultIfEmpty()
                                    where OrderIDs.Contains(a.AGEN_TRAD_PO_ID) && n.LU_Type == 2
                                    select new Despatch_CM
                                    {
                                        DD_OrderDetailID = a.ORDER_ID,
                                        D_OrderID = a.AGEN_TRAD_PO_ID,
                                        D_OrderCode = (from h in dbcontext.Tbl_Master_Order where h.SO_ID == a.AGEN_TRAD_PO_ID select h.SO_Code).FirstOrDefault(),
                                        DD_ProductID = a.PRODUCT_ID,
                                        DD_ArticleNo = b.P_ArticleNo,
                                        DD_ProductName = b.P_ShortName,
                                        DD_UOM = n.LU_Description,
                                        DD_OrderQuantity = a.QUANTITY ?? 0,
                                        DD_PendingQuantity = (from x in dbcontext.Tbl_DespatchHeader join y in dbcontext.Tbl_DespatchDetails on x.D_ID equals y.DD_PID where y.DD_OrderID == a.AGEN_TRAD_PO_ID && y.DD_ProductID == b.P_ID select y.DD_DespatchQuantity).Sum()??0,
                                        DD_AvailableStock1 = ((from x in dbcontext.tbl_StoreDetails where x.SD_SM_ID ==storeid && x.SD_Itemcode == a.PRODUCT_ID select x.SD_OpeningStock).Sum()),
                                        DD_AvailableStock2 =
                                        (from d in dbcontext.tbl_GoodsInwardDetail
                                         join f in dbcontext.tbl_GoodsInwardHeader on d.GD_PID equals f.GI_ID
                                         where f.GI_StoreCode == storeid && d.GD_ProductID == a.PRODUCT_ID
                                         select new
                                         {
                                             GIQuantity = d.GD_GIQuantity ?? 0,
                                         }).Select(a => a.GIQuantity).DefaultIfEmpty(0).Sum()+
                                         (from d in dbcontext.tbl_ItemTransfers join f in dbcontext.tbl_ItemTransfersDetails on d.IT_ID equals f.TD_PID where d.IT_TransferToStore == storeid && f.TD_ProductID == a.PRODUCT_ID select new{ f.GD_TransferQty}).Select(a => a.GD_TransferQty).DefaultIfEmpty(0).Sum() 
                                         - (from d in dbcontext.tbl_ItemTransfers join f in dbcontext.tbl_ItemTransfersDetails on d.IT_ID equals f.TD_PID where d.IT_TransferFromStore == storeid && f.TD_ProductID == a.PRODUCT_ID select new { f.GD_TransferQty }).Select(a => a.GD_TransferQty).DefaultIfEmpty(0).Sum(),
                                        DD_AvailableStock3 = ((from x in dbcontext.Tbl_DespatchHeader join y in dbcontext.Tbl_DespatchDetails on x.D_ID equals y.DD_PID where y.DD_OrderID == a.AGEN_TRAD_PO_ID && y.DD_ProductID == a.PRODUCT_ID select y.DD_DespatchQuantity).Sum() ?? 0),
                                        DD_DespatchQuantity = 0
                                    }).ToList();
                        return PartialView("/Views/Sales/ET_Sales_Despatch/ET_Sales_DespatchDetails.cshtml", data);
                    }
                    else
                    {
                        int comkey = Convert.ToInt32(Session["CompanyKey"].ToString());
                        dbcontext.Configuration.ProxyCreationEnabled = false;
                        var data = (from a in dbcontext.Tbl_Order_Details
                                    join b in dbcontext.Tbl_Product_Master on a.PRODUCT_ID equals b.P_ID
                                    join c in dbcontext.tbl_LookUp on b.P_UOM equals c.LU_Code
                                     into m
                                    from n in m.DefaultIfEmpty()
                                    where OrderIDs.Contains(a.AGEN_TRAD_PO_ID) && n.LU_Type == 2
                                    select new Despatch_CM
                                    {
                                        DD_OrderDetailID = a.ORDER_ID,
                                        D_OrderID = a.AGEN_TRAD_PO_ID,
                                        D_OrderCode = (from h in dbcontext.Tbl_Master_Order where h.SO_ID == a.AGEN_TRAD_PO_ID select h.SO_Code).FirstOrDefault(),
                                        DD_ProductID = a.PRODUCT_ID,
                                        DD_ArticleNo = b.P_ArticleNo,
                                        DD_ProductName = b.P_ShortName,
                                        DD_UOM = n.LU_Description,
                                        DD_OrderQuantity = a.QUANTITY ?? 0,
                                        DD_PendingQuantity = (from x in dbcontext.Tbl_DespatchHeader join y in dbcontext.Tbl_DespatchDetails on x.D_ID equals y.DD_PID where y.DD_OrderID == a.AGEN_TRAD_PO_ID && y.DD_ProductID == b.P_ID && x.D_ID!=despatchid select y.DD_DespatchQuantity).Sum() ?? 0,
                                        DD_AvailableStock1 = ((from x in dbcontext.tbl_StoreDetails where x.SD_SM_ID == storeid && x.SD_Itemcode == b.P_ID select x.SD_OpeningStock).Sum()),
                                        DD_AvailableStock2 =
                                        (from d in dbcontext.tbl_GoodsInwardDetail
                                         join f in dbcontext.tbl_GoodsInwardHeader on d.GD_PID equals f.GI_ID
                                         where f.GI_StoreCode == storeid && d.GD_ProductID == a.PRODUCT_ID
                                         select new
                                         {
                                             GIQuantity = d.GD_GIQuantity ?? 0,
                                         }).Select(a => a.GIQuantity).DefaultIfEmpty(0).Sum() +
                                         (from d in dbcontext.tbl_ItemTransfers join f in dbcontext.tbl_ItemTransfersDetails on d.IT_ID equals f.TD_PID where d.IT_TransferToStore == storeid && f.TD_ProductID == a.PRODUCT_ID select new { f.GD_TransferQty }).Select(a => a.GD_TransferQty).DefaultIfEmpty(0).Sum()
                                         - (from d in dbcontext.tbl_ItemTransfers join f in dbcontext.tbl_ItemTransfersDetails on d.IT_ID equals f.TD_PID where d.IT_TransferFromStore == storeid && f.TD_ProductID == a.PRODUCT_ID select new { f.GD_TransferQty }).Select(a => a.GD_TransferQty).DefaultIfEmpty(0).Sum(),
                                        DD_AvailableStock3 = ((from x in dbcontext.Tbl_DespatchHeader join y in dbcontext.Tbl_DespatchDetails on x.D_ID equals y.DD_PID where y.DD_OrderID == a.AGEN_TRAD_PO_ID && y.DD_ProductID == b.P_ID && x.D_ID!=despatchid select y.DD_DespatchQuantity).Sum() ?? 0),
                                        DD_DespatchQuantity = (from y in dbcontext.Tbl_DespatchDetails where y.DD_PID == despatchid && y.DD_ProductID== b.P_ID && y.DD_OrderDetailID == a.ORDER_ID select y.DD_DespatchQuantity).Sum()
                                    }).ToList();
                        return PartialView("/Views/Sales/ET_Sales_Despatch/ET_Sales_DespatchDetails.cshtml", data);
                    }
                }
                catch (Exception exe)
                {
                    string actionName = this.ControllerContext.RouteData.Values["action"].ToString();
                    string controllerName = this.ControllerContext.RouteData.Values["controller"].ToString();
                    objERR.err_title = controllerName + "-" + controllerName;
                    objERR.err_message = "Sorry for the inconvience. Some error has been occured.";
                    objERR.err_details = exe.Message.Replace("'", "");
                    int errid = bal.ExceptionInsertLogs_BL(objERR);
                    return Json("ERR" + errid.ToString(), JsonRequestBehavior.AllowGet);
                }
            }
            else
            {
                return Json("Expired", JsonRequestBehavior.AllowGet);
            }
        }
        private string Validations(int D_ID, string D_Code, string D_DespatchDate, string D_ModeOfTransport, string DespatchDetails)
        {
           
            if (!automanual && D_Code == "")
            {
                return "Enter Despatch Code";
            }
            if (D_DespatchDate == "")
            {
                return "Select Despatch Date";
            }
            if (D_ModeOfTransport == "")
            {
                return "Select Currency Code";
            }
            if (!automanual)
            {
                if (D_ID == 0)
                {
                    var count = dbcontext.Tbl_DespatchHeader.Where(m => m.D_Code == D_Code).ToList().Count();
                    if (count > 0)
                    {
                        return "Despatch Code Already Exist";
                    }
                }
                else
                {
                    var count = dbcontext.Tbl_DespatchHeader.Where(m => m.D_ID != D_ID && m.D_Code == D_Code).ToList().Count();
                    if (count > 0)
                    {
                        return "Despatch Code Already Exist";
                    }
                }
            }
            return "";
        }

        [HttpPost]
        public JsonResult ET_Sales_Despatch_Add(int D_ID,string D_Code,string D_OrderID, int D_CustomerID, int D_SalesPerson,int  D_StoreID,string D_DespatchDate,string  D_ModeOfTransport,string D_VechileNo, string D_TransporterName, string D_DeliveryFrom, string D_DeliveryTo, string D_Remarks,string DespatchDetails)
        {
            bool val = Session["UserID"] == null ? false : true;
            if (val)
            {
                try
                {
                    string valid = Validations(D_ID, D_Code, D_DespatchDate, D_ModeOfTransport, DespatchDetails);
                    if (valid == "")
                    {
                        var Username = Session["UserID"].ToString();
                        DateTime QDate=DateTime.ParseExact(D_DespatchDate, "dd-MM-yyyy",null);
                        Tbl_DespatchHeader Objmc = new Tbl_DespatchHeader()
                        {
                            D_ID = D_ID,
                            D_Code = D_Code,
                            D_OrderID   = D_OrderID,
                            D_CustomerID    = D_CustomerID,
                            D_SalesPerson   = D_SalesPerson,
                            D_StoreID   = D_StoreID,
                            D_DespatchDate  = QDate,
                            D_ModeOfTransport   = D_ModeOfTransport,
                            D_VechileNo = D_VechileNo,
                            D_TransporterName   = D_TransporterName,
                            D_DeliveryFrom  = D_DeliveryFrom,
                            D_DeliveryTo    = D_DeliveryTo,
                            D_Remarks= D_Remarks,
                            CREATED_BY = Convert.ToInt32(Session["UserID"].ToString()),
                            CREATED_DATE = DateTime.Now,
                            DELETED = false,
                            COM_KEY = Convert.ToInt32(Session["CompanyKey"]),
                            D_Status = 0
                        };
                        decimal data = 0;
                        if (Objmc.D_ID == 0)
                        {
                            dbcontext.Tbl_DespatchHeader.Add(Objmc);
                            dbcontext.SaveChanges();
                            if (automanual == true)
                            {
                                int len = 10 - (prefix + Objmc.D_ID).Length;
                                string code = prefix + new String('0', len) + Objmc.D_ID;
                                Tbl_DespatchHeader _Tbl_DespatchHeader = dbcontext.Tbl_DespatchHeader.Single(m => m.D_ID == Objmc.D_ID);
                                {
                                    _Tbl_DespatchHeader.D_Code = code;
                                };
                                dbcontext.SaveChanges();
                                D_Code = code;
                            }

                        }
                        else
                        {
                            Tbl_DespatchHeader Obj_tbl_Tbl_DespatchHeader = dbcontext.Tbl_DespatchHeader.Single(m => m.D_ID == Objmc.D_ID);
                            {
                                Obj_tbl_Tbl_DespatchHeader.D_Code = D_Code;
                                Obj_tbl_Tbl_DespatchHeader.D_OrderID = D_OrderID;
                                Obj_tbl_Tbl_DespatchHeader.D_CustomerID = D_CustomerID;
                                Obj_tbl_Tbl_DespatchHeader.D_SalesPerson = D_SalesPerson;
                                Obj_tbl_Tbl_DespatchHeader.D_StoreID = D_StoreID;
                                Obj_tbl_Tbl_DespatchHeader.D_DespatchDate = QDate;
                                Obj_tbl_Tbl_DespatchHeader.D_ModeOfTransport = D_ModeOfTransport;
                                Obj_tbl_Tbl_DespatchHeader.D_VechileNo = D_VechileNo;
                                Obj_tbl_Tbl_DespatchHeader.D_TransporterName = D_TransporterName;
                                Obj_tbl_Tbl_DespatchHeader.D_DeliveryFrom = D_DeliveryFrom;
                                Obj_tbl_Tbl_DespatchHeader.D_DeliveryTo = D_DeliveryTo;
                                Obj_tbl_Tbl_DespatchHeader.D_Remarks = D_Remarks;
                                Obj_tbl_Tbl_DespatchHeader.LAST_UPDATED_BY = Convert.ToInt32(Session["UserID"].ToString());
                                Obj_tbl_Tbl_DespatchHeader.LAST_UPDATED_DATE = DateTime.Now;
                                Obj_tbl_Tbl_DespatchHeader.D_Status = 0;
                            };
                            dbcontext.SaveChanges();
                            // obj.COM_ID = k;
                        }

                        // Delete previous contact data
                        dbcontext.Tbl_DespatchDetails.RemoveRange(dbcontext.Tbl_DespatchDetails.Where(m => m.DD_PID == Objmc.D_ID));
                        dbcontext.SaveChanges();

                        // Insert new contacts data
                        string[] ChildRow = DespatchDetails.Split('|');
                        for (int i = 0; i < ChildRow.Length - 1; i++)
                        {
                            string[] ChildRecord = ChildRow[i].Split(',');
                            Tbl_DespatchDetails objtbl_despatchdetails = new Tbl_DespatchDetails()
                            {
                                DD_OrderID = Convert.ToDecimal(ChildRecord[0]),
                                DD_OrderCode = ChildRecord[1],
                                DD_PID = Objmc.D_ID,
                                DD_ProductID = Convert.ToDecimal(ChildRecord[2]),
                                DD_UOM = ChildRecord[3],
                                DD_OrderQuantity = Convert.ToDecimal(ChildRecord[4]),
                                DD_DespatchQuantity = Convert.ToDecimal(ChildRecord[5]),
                                DD_OrderDetailID = Convert.ToDecimal(ChildRecord[6]),
                            };
                            dbcontext.Tbl_DespatchDetails.Add(objtbl_despatchdetails);
                            dbcontext.SaveChanges();
                            data = (int)objtbl_despatchdetails.DD_ID;
                        }
                        var json = "Success:"+ D_Code;
                        if (data == 0)
                        {
                            json = "Failed";
                        }
                        else
                        {
                            objLOG.log_dockey = "3011";
                            objLOG.log_userid = Session["UserID"].ToString();
                            objLOG.log_recordkey = data.ToString();
                            if (D_ID == 0)
                            {
                                objLOG.log_operation = "Insert";
                                objLOG.log_Remarks = "Record Inserted Successfully";
                            }
                            else
                            {
                                objLOG.log_operation = "Update";
                                objLOG.log_Remarks = "Record Updated Successfully";
                            }
                            bal.OperationInsertLogs_BL(objLOG);
                        }
                        return Json(json, JsonRequestBehavior.AllowGet);
                    }
                    else
                    {
                        var json = "Validation:" + valid;
                        return Json(json, JsonRequestBehavior.AllowGet);
                    }
                }
                catch (Exception exe)
                {
                    string actionName = this.ControllerContext.RouteData.Values["action"].ToString();
                    string controllerName = this.ControllerContext.RouteData.Values["controller"].ToString();
                    objERR.err_title = controllerName + "-" + controllerName;
                    objERR.err_message = "Sorry for the inconvience. Some error has been occured.";
                    objERR.err_details = exe.Message.Replace("'", "");
                    int errid = bal.ExceptionInsertLogs_BL(objERR);
                    return Json("ERR" + errid.ToString(), JsonRequestBehavior.AllowGet);
                }
            }
            else
            {
                return Json("Expired", JsonRequestBehavior.AllowGet);
            }
        }
        public ActionResult ET_Sales_Despatch_View(int id)
        {
            bool val = Session["UserID"] == null ? false : true;
            if (val)
            {
                try
                {
                    dbcontext.Configuration.ProxyCreationEnabled = false;
                    var data1 = (from a in dbcontext.Tbl_DespatchHeader
                                join b in dbcontext.Tbl_Master_CompanyDetails on a.D_CustomerID equals b.COM_ID into comp
                                from x in comp
                                join d in dbcontext.Tbl_Master_User on a.D_SalesPerson equals d.USER_ID into user
                                from z in user
                                where a.D_ID == id
                                select new Despatch_CM
                                {
                                    D_ID = a.D_ID,
                                    D_Code = a.D_Code,
                                    D_DespatchDate = a.D_DespatchDate,
                                    D_CustomerName = x.COM_NAME,
                                    D_SalesPersonName = z.USER_NAME
                                }).ToList();
                    var data2 = (from x in dbcontext.Tbl_DespatchHeader
                                join y in dbcontext.Tbl_DespatchDetails on x.D_ID equals y.DD_PID
                                join b in dbcontext.Tbl_Product_Master on y.DD_ProductID equals b.P_ID
                                join c in dbcontext.tbl_LookUp on b.P_UOM equals c.LU_Code
                                 into m
                                from n in m.DefaultIfEmpty()
                                where x.D_ID == id && n.LU_Type == 2
                                select new Despatch_CM
                                {
                                    D_OrderCode = y.DD_OrderCode,
                                    DD_ProductID = y.DD_ProductID,
                                    DD_ArticleNo = b.P_ArticleNo,
                                    DD_ProductName = b.P_ShortName,
                                    DD_UOM = n.LU_Description,
                                    DD_OrderQuantity = y.DD_OrderQuantity,
                                    DD_DespatchQuantity = y.DD_DespatchQuantity,

                                }).ToList();
                    DespatchVIew_CM obj = new DespatchVIew_CM();
                    obj.Header = data1;
                    obj.Details = data2;
                    return PartialView("/Views/Sales/ET_Sales_Despatch/ET_Sales_Despatch_View.cshtml", obj);
                }
                catch (Exception exe)
                {
                    string actionName = this.ControllerContext.RouteData.Values["action"].ToString();
                    string controllerName = this.ControllerContext.RouteData.Values["controller"].ToString();
                    objERR.err_title = controllerName + "-" + controllerName;
                    objERR.err_message = "Sorry for the inconvience. Some error has been occured.";
                    objERR.err_details = exe.Message.Replace("'", "");
                    int errid = bal.ExceptionInsertLogs_BL(objERR);
                    return Json("ERR" + errid.ToString(), JsonRequestBehavior.AllowGet);
                }
            }
            else
            {
                return RedirectToAction("ET_SessionExpire", "ET_Login");
            }
        }
        public ActionResult ET_Sales_Despatch_Print(int id, string lang)
        {
            bool val = Session["UserID"] == null ? false : true;
            if (val)
            {
                try
                {
                    dbcontext.Configuration.ProxyCreationEnabled = false;
                    int com_key = Convert.ToInt32(Session["Companykey"]);
                    var OrderIDs = new HashSet<decimal>(dbcontext.Tbl_DespatchHeader.Single(f => f.D_ID == id).D_OrderID.Split(',').Select(m => Convert.ToDecimal(m)).ToList());
                    var OrderCodes = string.Join(",", (from m in dbcontext.Tbl_Master_Order where OrderIDs.Contains(m.SO_ID) select m.SO_Code).ToList());
                    var data1 = (from a in dbcontext.Tbl_DespatchHeader
                                 join b in dbcontext.Tbl_Master_CompanyDetails on a.D_CustomerID equals b.COM_ID into comp
                                 from x in comp
                                 join d in dbcontext.Tbl_Master_User on a.D_SalesPerson equals d.USER_ID into user
                                 from z in user
                                 where a.D_ID == id
                                 select new Despatch_CM
                                 {
                                     D_ID = a.D_ID,
                                     D_Code = a.D_Code,
                                     D_DespatchDate = a.D_DespatchDate,
                                     D_CustomerName = x.COM_NAME,
                                     D_SalesPersonName = z.USER_NAME,
                                     OrderCodes = OrderCodes,
                                     CompanyCode = x.COM_CODE,
                                     CompanyName = x.COM_NAME,
                                     Street = x.COM_STREET,
                                     CityState = (x.COM_CITY + ", " + x.COM_STATE),
                                     USTID = x.COM_USTID,
                                     CountryZip = ((dbcontext.locations.Where(a => a.location_id == x.COM_COUNTRY).Select(a => a.name).FirstOrDefault()) + ", " + (x.COM_ZIP)),
                                     VatPer = (dbcontext.Tbl_SystemSetUp.Where(a => a.COMPANY_ID == com_key).Select(a => a.TAX).FirstOrDefault()),
                                     imgurl = (dbcontext.Tbl_SystemSetUp.Where(a => a.COMPANY_ID == com_key).Select(a => a.COMPANY_LOGO).FirstOrDefault()),
                                     SystemCompany = (dbcontext.Tbl_SystemSetUp.Where(a => a.COMPANY_ID == com_key).Select(a => a.COMPANY_NAME).FirstOrDefault()),
                                 }).ToList();
                    var data2 = (from x in dbcontext.Tbl_DespatchHeader
                                 join y in dbcontext.Tbl_DespatchDetails on x.D_ID equals y.DD_PID
                                 join b in dbcontext.Tbl_Product_Master on y.DD_ProductID equals b.P_ID
                                 join c in dbcontext.tbl_LookUp on b.P_UOM equals c.LU_Code
                                  into m
                                 from n in m.DefaultIfEmpty()
                                 where x.D_ID == id && n.LU_Type == 2
                                 select new Despatch_CM
                                 {
                                     DD_ProductID = y.DD_ProductID,
                                     DD_ArticleNo = b.P_ArticleNo,
                                     DD_ProductName = b.P_ShortName,
                                     DD_UOM = n.LU_Description,
                                     DD_OrderQuantity = y.DD_OrderQuantity,
                                     DD_DespatchQuantity = y.DD_DespatchQuantity,

                                 }).ToList();
                    DespatchVIew_CM obj = new DespatchVIew_CM();
                    obj.Header = data1;
                    obj.Details = data2;
                    if (lang == "E")
                        return PartialView("/Views/Sales/ET_Sales_Despatch/ET_Sales_Despatch_Print.cshtml", obj);
                    else
                        return PartialView("/Views/Sales/ET_Sales_Despatch/ET_Sales_Despatch_Print_German.cshtml", obj);
                }
                catch (Exception exe)
                {
                    string actionName = this.ControllerContext.RouteData.Values["action"].ToString();
                    string controllerName = this.ControllerContext.RouteData.Values["controller"].ToString();
                    objERR.err_title = controllerName + "-" + controllerName;
                    objERR.err_message = "Sorry for the inconvience. Some error has been occured.";
                    objERR.err_details = exe.Message.Replace("'", "");
                    int errid = bal.ExceptionInsertLogs_BL(objERR);
                    return Json("ERR" + errid.ToString(), JsonRequestBehavior.AllowGet);
                }
            }
            else
            {
                return RedirectToAction("ET_SessionExpire", "ET_Login");
            }
        }


        public ActionResult ET_Sales_Despatch_RestoreDelete(int id, bool type)
        {
            bool val = Session["UserID"] == null ? false : true;
            if (val)
            {
                try
                {
                    Tbl_DespatchHeader deleted = dbcontext.Tbl_DespatchHeader.Single(m => m.D_ID == id);
                    deleted.DELETED = type;
                    deleted.DELETED_BY = id;
                    deleted.DELETED_DATE = DateTime.Now;
                    var result = dbcontext.SaveChanges();
                    var json = "Failed";
                    if (result != 0)
                    {
                        json = "Success";
                    }
                    else
                    {
                        objLOG.log_dockey = "3011";
                        objLOG.log_operation = "Restore";
                        objLOG.log_userid = Session["UserID"].ToString();
                        objLOG.log_recordkey = id.ToString();
                        objLOG.log_Remarks = "Record Restored Successfully";
                        bal.OperationInsertLogs_BL(objLOG);
                    }
                    return Json(json, JsonRequestBehavior.AllowGet);
                }
                catch (Exception exe)
                {
                    string actionName = this.ControllerContext.RouteData.Values["action"].ToString();
                    string controllerName = this.ControllerContext.RouteData.Values["controller"].ToString();
                    objERR.err_title = controllerName + "-" + controllerName;
                    objERR.err_message = "Sorry for the inconvience. Some error has been occured.";
                    objERR.err_details = exe.Message.Replace("'", "");
                    int errid = bal.ExceptionInsertLogs_BL(objERR);
                    return Json("ERR" + errid.ToString(), JsonRequestBehavior.AllowGet);
                }
            }
            else
            {
                return RedirectToAction("ET_SessionExpire", "ET_Login");
            }
        }

        public ActionResult ET_Sales_Despatch_Update_GetbyID(int id)
        {
            bool val = Session["UserID"] == null ? false : true;
            if (val)
            {
                try
                {
                    //TempData["CompaycontctID"] = id;
                    dbcontext.Configuration.ProxyCreationEnabled = false;
                    var data = dbcontext.Tbl_DespatchHeader.Single(m => m.D_ID == id);
                    var json = new JavaScriptSerializer().Serialize(data);
                    return Json(json, JsonRequestBehavior.AllowGet);
                }
                catch (Exception exe)
                {
                    string actionName = this.ControllerContext.RouteData.Values["action"].ToString();
                    string controllerName = this.ControllerContext.RouteData.Values["controller"].ToString();
                    objERR.err_title = controllerName + "-" + controllerName;
                    objERR.err_message = "Sorry for the inconvience. Some error has been occured.";
                    objERR.err_details = exe.Message.Replace("'", "");
                    int errid = bal.ExceptionInsertLogs_BL(objERR);
                    return Json("ERR" + errid.ToString(), JsonRequestBehavior.AllowGet);
                }
            }
            else
            {
                return RedirectToAction("ET_SessionExpire", "ET_Login");
            }
        }
    }
}