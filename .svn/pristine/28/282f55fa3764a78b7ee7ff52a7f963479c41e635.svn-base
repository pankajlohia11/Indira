using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.Mvc;
using System.Data.Entity;
using BusinessEntity.EntityModels;
using BusinessEntity.CustomModels;
using BusinessLogic.Admin_BL;
using BusinessLogic;
using iTextSharp.text;
using iTextSharp.text.pdf;
using System.Web.Script.Serialization;
using System.Data;
using System.IO;
using System.Globalization;
using System.Net.Mail;
using System.Net;

namespace Euro.Controllers.Sales
{
    
    public class ET_Sales_OrderDetailsController : Controller
    {
        // GET: ET_Sales_OrderDetails

        public static string prefix = "";
        public static bool automanual = false;
        BAL bal = new BAL();
        error_master objERR = new error_master();
        tbl_loginfo objLOG = new tbl_loginfo();
        EntityClasses dbcontext = new EntityClasses();
        ET_Sales_OrderDetails_BL ObjBL = new ET_Sales_OrderDetails_BL();

        //Checking the auto/manual
        private void AutoManual()
        {
            ViewBag.AutoManual = false;
            automanual = false;
            List<Tbl_Document_Master> ObjDoc = bal.AutoManual_BL(6014);
            if (ObjDoc.Count > 0)
            {
                foreach (var item in ObjDoc)
                {
                    if (item.autogen_type == "Automatic")
                    {
                        ViewBag.AutoManual = true;
                        prefix = item.autogen_prefix;
                        automanual = true;
                    }
                    else
                    {
                        ViewBag.Required = "required";
                    }
                }
            }
        }
        //Get the order list
        public JsonResult Tbl_OrderList(bool deleted,int type)
        {
            bool val = Session["UserID"] == null ? false : true;
            if (val)
            {
                try
                {
                    int com_key = Convert.ToInt32(Session["Companykey"]);
                    var data = (from Ol in dbcontext.Tbl_Master_Order
                                join Mu in dbcontext.Tbl_Master_User on Ol.SO_SalesPersonID equals Mu.USER_ID
                                join b in dbcontext.Tbl_Master_CompanyDetails on Ol.SO_CutomerID equals b.COM_ID into comp
                                from x in comp
                                join b1 in dbcontext.Tbl_Master_CompanyDetails on Ol.SO_SupplierID equals b1.COM_ID into comp1
                                from x1 in comp1
                                where Ol.DELETED== deleted && Ol.COM_KEY==com_key && Ol.SO_OrderType == type
                                select new
                                {
                                    SO_ID = Ol.SO_ID,
                                    SO_CODE = Ol.SO_Code,
                                    USER_NAME = Mu.USER_NAME,
                                    Type =
                                    (
                                    Ol.SO_OrderType == 1 ? "Agency":
                                    Ol.SO_OrderType == 2 ? "Trading(One-One)" : "Trading(One-Many)"
                                    ),
                                    Ol.SO_Approval,
                                    x.COM_NAME,
                                    x1.COM_DISPLAYNAME,
                                    Ol.SO_OrderDate,
                                    Ol.SO_OrderType,
                                    Ol.SO_SupSCNO,
                                    Ol.SO_SupSCDate,
                                    Ol.SO_CusPONO,
                                    Ol.SO_CusPODate,
                                    Ol.SO_CusDeliveryTerms,
                                    Ol.SO_Discount,
                                    Ol.SO_Remarks,
                                    Ol.CREATED_DATE,
                                    TotalOrdAmount = (from a in dbcontext.Tbl_Master_Order
                                                join b in dbcontext.Tbl_Order_Details on a.SO_ID equals b.AGEN_TRAD_PO_ID
                                                where a.SO_Approval != 2 && b.AGEN_TRAD_PO_ID == Ol.SO_ID
                                                select new
                                                { totalPrice = b.QUANTITY * b.PRICE
                                                  
                                                }).Select(a => a.totalPrice).DefaultIfEmpty(0).Sum() ?? 0

                }).Distinct().OrderBy(m=>m.SO_OrderDate).ToList();
                    var json = new JavaScriptSerializer().Serialize(data);
                    return Json(json, JsonRequestBehavior.AllowGet);
                }
                catch (Exception exe)
                {
                    string actionName = this.ControllerContext.RouteData.Values["action"].ToString();
                    string controllerName = this.ControllerContext.RouteData.Values["controller"].ToString();
                    objERR.err_title = controllerName + "-" + controllerName;
                    objERR.err_message = "Sorry for the inconvience. Some error has been occured.";
                    objERR.err_details = exe.Message.Replace("'", "");
                    int errid = bal.ExceptionInsertLogs_BL(objERR);
                    return Json("ERR" + errid.ToString(), JsonRequestBehavior.AllowGet);
                }
            }
            else
            {
                return Json("Expired", JsonRequestBehavior.AllowGet);
            }
        }
        public JsonResult Tbl_OrderList1(bool deleted, int type)
        {
            bool val = Session["UserID"] == null ? false : true;
            if (val)
            {
                try
                {
                    int com_key = Convert.ToInt32(Session["Companykey"]);
                    var data = (from Ol in dbcontext.Tbl_Master_Order
                                join Mu in dbcontext.Tbl_Master_User on Ol.SO_SalesPersonID equals Mu.USER_ID
                                join b in dbcontext.Tbl_Master_CompanyDetails on Ol.SO_CutomerID equals b.COM_ID into comp
                                from x in comp
                                where Ol.DELETED == deleted && Ol.COM_KEY == com_key && Ol.SO_OrderType == type
                                select new
                                {
                                    SO_ID = Ol.SO_ID,
                                    SO_CODE = Ol.SO_Code,
                                    USER_NAME = Mu.USER_NAME,
                                    Type =
                                    (
                                    Ol.SO_OrderType == 1 ? "Agency" :
                                    Ol.SO_OrderType == 2 ? "Trading(One-One)" : "Trading(One-Many)"
                                    ),
                                    Ol.SO_Approval,
                                    x.COM_NAME,
                                    x.COM_DISPLAYNAME,
                                    Ol.SO_OrderDate,
                                    Ol.SO_OrderType,
                                    Ol.SO_SupSCNO,
                                    Ol.SO_CusPONO,
                                    Ol.CREATED_DATE,

                                }).Distinct().OrderBy(m => m.SO_OrderDate).ToList();
                    var json = new JavaScriptSerializer().Serialize(data);
                    return Json(json, JsonRequestBehavior.AllowGet);
                }
                catch (Exception exe)
                {
                    string actionName = this.ControllerContext.RouteData.Values["action"].ToString();
                    string controllerName = this.ControllerContext.RouteData.Values["controller"].ToString();
                    objERR.err_title = controllerName + "-" + controllerName;
                    objERR.err_message = "Sorry for the inconvience. Some error has been occured.";
                    objERR.err_details = exe.Message.Replace("'", "");
                    int errid = bal.ExceptionInsertLogs_BL(objERR);
                    return Json("ERR" + errid.ToString(), JsonRequestBehavior.AllowGet);
                }
            }
            else
            {
                return Json("Expired", JsonRequestBehavior.AllowGet);
            }
        }
        //Get the quation list
        public JsonResult GetQuotations(int id,int orderid,int type)
        {
            bool val = Session["UserID"] == null ? false : true;
            if (val)
            {
                try
                {
                    dbcontext.Configuration.ProxyCreationEnabled = false;
                    int com_key = Convert.ToInt32(Session["Companykey"]);
                    var approver = dbcontext.Tbl_Document_Master.Single(m => m.auto_key == 8015).workflow_status;
                    if (approver == 1)
                    {
                        if (orderid == 0)
                        {
                            var data1 = dbcontext.Tbl_Master_Order.Select(m => m.SO_QuotationID);
                            var data = dbcontext.tbl_QuotationHeader.Where(m => m.DELETED == false && m.COM_KEY == com_key && m.Q_ApprovedStatus == 1 && m.Q_CustomerID == id && !data1.Contains(m.Q_ID) && m.Q_Type == type).ToList();
                            var json = new JavaScriptSerializer().Serialize(data);
                            return Json(json, JsonRequestBehavior.AllowGet);
                        }
                        else
                        {
                            var data1 = dbcontext.Tbl_Master_Order.Where(m => m.SO_ID == orderid).Select(m => m.SO_QuotationID);
                            var data = dbcontext.tbl_QuotationHeader.Where(m => m.DELETED == false && m.COM_KEY == com_key && m.Q_ApprovedStatus == 1 && m.Q_CustomerID == id && data1.Contains(m.Q_ID) && m.Q_Type == type).ToList();
                            var json = new JavaScriptSerializer().Serialize(data);
                            return Json(json, JsonRequestBehavior.AllowGet);
                        }
                    }
                    else
                    {
                        if (orderid == 0)
                        {
                            var data1 = dbcontext.Tbl_Master_Order.Select(m => m.SO_QuotationID );
                            var data = dbcontext.tbl_QuotationHeader.Where(m => m.DELETED == false && m.COM_KEY == com_key && m.Q_CustomerID == id && !data1.Contains(m.Q_ID) && m.Q_Type == type).ToList();
                            var json = new JavaScriptSerializer().Serialize(data);
                            return Json(json, JsonRequestBehavior.AllowGet);
                        }
                        else
                        {
                            var data1 = dbcontext.Tbl_Master_Order.Where(m => m.SO_ID == orderid).Select(m => m.SO_QuotationID);
                            var data = dbcontext.tbl_QuotationHeader.Where(m => m.DELETED == false && m.COM_KEY == com_key && m.Q_CustomerID == id && data1.Contains(m.Q_ID) && m.Q_Type == type).ToList();
                            var json = new JavaScriptSerializer().Serialize(data);
                            return Json(json, JsonRequestBehavior.AllowGet);
                        }
                    }

                }
                catch (Exception exe)
                {
                    string actionName = this.ControllerContext.RouteData.Values["action"].ToString();
                    string controllerName = this.ControllerContext.RouteData.Values["controller"].ToString();
                    objERR.err_title = controllerName + "-" + controllerName;
                    objERR.err_message = "Sorry for the inconvience. Some error has been occured.";
                    objERR.err_details = exe.Message.Replace("'", "");
                    int errid = bal.ExceptionInsertLogs_BL(objERR);
                    return Json("ERR" + errid.ToString(), JsonRequestBehavior.AllowGet);
                }
            }
            else
            {
                return Json("Expired", JsonRequestBehavior.AllowGet);
            }
        }
        //get the order details
        public ActionResult ET_Sales_OrderDetails(string type)
        {
            bool val = Session["UserID"] == null ? false : true;
            if (val)
            {
                if (type != null)
                {
                    if (type == "Agency" || type == "Trading" || type == "Store")
                    {
                        try
                        {
                            AutoManual();
                            ViewBag.Login_Name = Session["DisplayName"].ToString();
                            return View();

                        }
                        catch (Exception exe)
                        {
                            string actionName = this.ControllerContext.RouteData.Values["action"].ToString();
                            string controllerName = this.ControllerContext.RouteData.Values["controller"].ToString();
                            objERR.err_title = controllerName + "-" + controllerName;
                            objERR.err_message = "Sorry for the inconvience. Some error has been occured.";
                            objERR.err_details = exe.Message.Replace("'", "");
                            int errid = bal.ExceptionInsertLogs_BL(objERR);
                            return Json("ERR" + errid.ToString(), JsonRequestBehavior.AllowGet);
                        }
                    }
                    else
                    {
                        return RedirectToAction("ET_InvalidRequest", "ET_Login");
                    }
                }
                else
                {
                    return RedirectToAction("ET_InvalidRequest", "ET_Login");
                }
            }
            else
            {
                return RedirectToAction("ET_SessionExpire", "ET_Login");
            }
        }
        public ActionResult ET_Sales_OffertoOrderDetails(string type, int offerId)
        {
            bool val = Session["UserID"] == null ? false : true;
            if (val)
            {
                if (type != null)
                {
                    if (type == "Agency" || type == "Trading" || type == "Store")
                    {
                        try
                        {
                            AutoManual();
                            ViewBag.Login_Name = Session["DisplayName"].ToString();
                            return View();

                        }
                        catch (Exception exe)
                        {
                            string actionName = this.ControllerContext.RouteData.Values["action"].ToString();
                            string controllerName = this.ControllerContext.RouteData.Values["controller"].ToString();
                            objERR.err_title = controllerName + "-" + controllerName;
                            objERR.err_message = "Sorry for the inconvience. Some error has been occured.";
                            objERR.err_details = exe.Message.Replace("'", "");
                            int errid = bal.ExceptionInsertLogs_BL(objERR);
                            return Json("ERR" + errid.ToString(), JsonRequestBehavior.AllowGet);
                        }
                    }
                    else
                    {
                        return RedirectToAction("ET_InvalidRequest", "ET_Login");
                    }
                }
                else
                {
                    return RedirectToAction("ET_InvalidRequest", "ET_Login");
                }
            }
            else
            {
                return RedirectToAction("ET_SessionExpire", "ET_Login");
            }
        }
        public ActionResult ET_Sales_quotationtoOrderDetails(string type, int QuoId)
        {
            bool val = Session["UserID"] == null ? false : true;
            if (val)
            {
                if (type != null)
                {
                    if (type == "Agency" || type == "Trading" || type == "Store")
                    {
                        try
                        {
                            AutoManual();
                            ViewBag.Login_Name = Session["DisplayName"].ToString();
                            return View();

                        }
                        catch (Exception exe)
                        {
                            string actionName = this.ControllerContext.RouteData.Values["action"].ToString();
                            string controllerName = this.ControllerContext.RouteData.Values["controller"].ToString();
                            objERR.err_title = controllerName + "-" + controllerName;
                            objERR.err_message = "Sorry for the inconvience. Some error has been occured.";
                            objERR.err_details = exe.Message.Replace("'", "");
                            int errid = bal.ExceptionInsertLogs_BL(objERR);
                            return Json("ERR" + errid.ToString(), JsonRequestBehavior.AllowGet);
                        }
                    }
                    else
                    {
                        return RedirectToAction("ET_InvalidRequest", "ET_Login");
                    }
                }
                else
                {
                    return RedirectToAction("ET_InvalidRequest", "ET_Login");
                }
            }
            else
            {
                return RedirectToAction("ET_SessionExpire", "ET_Login");
            }
        }

            //Checking privilages
            public JsonResult GetPrivilages()
        {
            bool val = Session["UserID"] == null ? false : true;
            if (val)
            {
                try
                {
                    using (EntityClasses dbcontext = new EntityClasses())
                    {
                        var privilagelist = bal.GetPrivilages_BL(Convert.ToInt32(Session["UserID"].ToString()), 6014);
                        var json = new JavaScriptSerializer().Serialize(privilagelist);
                        return Json(json, JsonRequestBehavior.AllowGet);
                    }
                }
                catch (Exception exe)
                {
                    string actionName = this.ControllerContext.RouteData.Values["action"].ToString();
                    string controllerName = this.ControllerContext.RouteData.Values["controller"].ToString();
                    objERR.err_title = controllerName + "-" + controllerName;
                    objERR.err_message = "Sorry for the inconvience. Some error has been occured.";
                    objERR.err_details = exe.Message.Replace("'", "");
                    int errid = bal.ExceptionInsertLogs_BL(objERR);
                    return Json("ERR" + errid.ToString(), JsonRequestBehavior.AllowGet);
                }
            }
            else
            {
                return Json("Expired", JsonRequestBehavior.AllowGet);
            }
        }
        //Binding the dropdown for bank name
        public JsonResult Bind_dropdown_Banknameandcussup(int id)
        {
            bool val = Session["UserID"] == null ? false : true;
            if (val)
            {
                try
                {
                    EntityClasses dbcontext = new EntityClasses();
                    dbcontext.Configuration.ProxyCreationEnabled = false;
                    decimal companykey = Convert.ToInt64(Session["CompanyKey"]);
                    try
                    {
                        var Bankname = (from tmc in dbcontext.Tbl_Master_CompanyDetails
                                        join bank in dbcontext.Tbl__Master_CompanyBank on tmc.COM_ID equals bank.B_PID into t
                                        from rt in t.DefaultIfEmpty()
                                        where tmc.Cust_Supp != id && tmc.DELETED == false && tmc.COM_KEY == companykey
                                        select new
                                        {
                                            rt.B_ID,
                                            rt.B_NAME,
                                            tmc.COM_ID,
                                            tmc.COM_NAME
                                        }).ToList(); ;
                        var json = new JavaScriptSerializer().Serialize(Bankname);
                        return Json(json, JsonRequestBehavior.AllowGet);
                    }
                    catch (Exception exe)
                    {
                        throw exe;
                    }
                }
                catch (Exception exe)
                {
                    string actionName = this.ControllerContext.RouteData.Values["action"].ToString();
                    string controllerName = this.ControllerContext.RouteData.Values["controller"].ToString();
                    objERR.err_title = controllerName + "-" + controllerName;
                    objERR.err_message = "Sorry for the inconvience. Some error has been occured.";
                    objERR.err_details = exe.Message.Replace("'", "");
                    int errid = bal.ExceptionInsertLogs_BL(objERR);
                    return Json("ERR" + errid.ToString(), JsonRequestBehavior.AllowGet);
                }
            }
            else
            {
                return Json("Expired", JsonRequestBehavior.AllowGet);
            }
        }
        //Get the sales person
        [HttpPost]
        public JsonResult GetSalesPerson(int id,decimal type)
        {

            bool val = Session["UserID"] == null ? false : true;
            if (val)
            {
                try
                {
                    using (EntityClasses dbcontext = new EntityClasses())
                    {
                        dbcontext.Configuration.ProxyCreationEnabled = false;
                        int companykey = Convert.ToInt32(Session["CompanyKey"]);
                        var ObjSales_Org = dbcontext.Tbl_Sales_Organization.Where(m => m.COM_KEY == companykey && m.DELETED == false && m.sales_Organization==type).ToList();
                        string s = "";
                        for (int i = 0; i < ObjSales_Org.Count(); i++)
                        {
                            if (i == 0)
                            {
                                s = ObjSales_Org[i].ORG_EMPLOYEE_IDS.ToString();
                            }
                            else
                            {
                                s = s + "," + ObjSales_Org[i].ORG_EMPLOYEE_IDS.ToString();
                            }
                           // s = s + "," + ObjSales_Org[i].ORG_HEAD_ID.ToString();
                        }
                        var UID = new HashSet<decimal>(s.Split(',').Select(m => Convert.ToDecimal(m)).ToList());

                        if (id == 0)
                        {
                            var SalesPerson = dbcontext.Tbl_Master_User.Where(m => m.USER_ID > 0  && m.COM_KEY == companykey && m.DELETED == false && UID.Contains(m.USER_ID)).Distinct().OrderBy(a => a.DISPLAY_NAME).ToList();
                            var json = new JavaScriptSerializer().Serialize(SalesPerson);
                            return Json(json, JsonRequestBehavior.AllowGet);
                        }
                        else
                        {
                            var user = dbcontext.Tbl_Master_Order.Single(m => m.SO_ID == id).SO_SalesPersonID;
                            var SalesPerson = dbcontext.Tbl_Master_User.Where(m => m.USER_ID > 0 && m.COM_KEY == companykey && UID.Contains(m.USER_ID)  && (m.DELETED == false  || m.USER_ID == user)).Distinct().OrderBy(a => a.DISPLAY_NAME).ToList();
                            var json = new JavaScriptSerializer().Serialize(SalesPerson);
                            return Json(json, JsonRequestBehavior.AllowGet);
                        }
                    }
                }
                catch (Exception exe)
                {
                    string actionName = this.ControllerContext.RouteData.Values["action"].ToString();
                    string controllerName = this.ControllerContext.RouteData.Values["controller"].ToString();
                    objERR.err_title = controllerName + "-" + controllerName;
                    objERR.err_message = "Sorry for the inconvience. Some error has been occured.";
                    objERR.err_details = exe.Message.Replace("'", "");
                    int errid = bal.ExceptionInsertLogs_BL(objERR);
                    return Json("ERR" + errid.ToString(), JsonRequestBehavior.AllowGet);
                }
            }
            else
            {
                return Json("Expired", JsonRequestBehavior.AllowGet);
            }
        }
        //Get the sales organization
        [HttpPost]
        public JsonResult SalesOrgBind(decimal id,decimal orgtype)
        {
            bool val = Session["UserID"] == null ? false : true;
            if (val)
            {
                try
                {

                    DataTable dt_Org = ObjBL.OrgEmp_BL(Convert.ToInt32(Session["CompanyKey"]), orgtype);
                    DataRow[] result = dt_Org.Select(string.Format("EmpID ='{0}' ", id));
                    int j = dt_Org.Rows.IndexOf(result[0]);
                    string s = dt_Org.Rows[j]["OrgName"] + "," + dt_Org.Rows[j]["OrgID"];
                    return Json(s, JsonRequestBehavior.AllowGet);
                }

                catch (Exception exe)
                {
                    string actionName = this.ControllerContext.RouteData.Values["action"].ToString();
                    string controllerName = this.ControllerContext.RouteData.Values["controller"].ToString();
                    objERR.err_title = controllerName + "-" + controllerName;
                    objERR.err_message = "Sorry for the inconvience. Some error has been occured.";
                    objERR.err_details = exe.Message.Replace("'", "");
                    int errid = bal.ExceptionInsertLogs_BL(objERR);
                    return Json("ERR" + errid.ToString(), JsonRequestBehavior.AllowGet);
                }
            }
            else
            {
                return Json("Expired", JsonRequestBehavior.AllowGet);
            }
        }
        //Bind the payment terms
        [HttpPost]
        public JsonResult Payment_terms_dropdown(int id)
        {
            bool val = Session["UserID"] == null ? false : true;
            if (val)
            {
                try
                {
                    dbcontext.Configuration.ProxyCreationEnabled = false;
                    int companykey = Convert.ToInt32(Session["CompanyKey"]);
                    if (id == 0)
                    {
                        var paymentdata = dbcontext.Tbl_Payment_Terms.Where(m => m.COM_KEY == companykey && m.DELETED == false).OrderBy(m => m.PT_Name).ToList();
                        var json = new JavaScriptSerializer().Serialize(paymentdata);
                        return Json(json, JsonRequestBehavior.AllowGet);
                    }
                    else
                    {
                        var payment = dbcontext.Tbl_Master_Order.Single(m => m.SO_ID == id).SO_CusPaymentTermID;
                        var paymentdata = dbcontext.Tbl_Payment_Terms.Where(m => m.COM_KEY == companykey && (m.DELETED == false || m.PT_ID == payment)).OrderBy(m => m.PT_Name).ToList();
                        var json = new JavaScriptSerializer().Serialize(paymentdata);
                        return Json(json, JsonRequestBehavior.AllowGet);
                    }
                }

                catch (Exception exe)
                {
                    string actionName = this.ControllerContext.RouteData.Values["action"].ToString();
                    string controllerName = this.ControllerContext.RouteData.Values["controller"].ToString();
                    objERR.err_title = controllerName + "-" + controllerName;
                    objERR.err_message = "Sorry for the inconvience. Some error has been occured.";
                    objERR.err_details = exe.Message.Replace("'", "");
                    int errid = bal.ExceptionInsertLogs_BL(objERR);
                    return Json("ERR" + errid.ToString(), JsonRequestBehavior.AllowGet);
                }
            }
            else
            {
                return Json("Expired", JsonRequestBehavior.AllowGet);
            }
        }
        //Get the product packing details
        public JsonResult Bind_Packing()
        {
            bool val = Session["UserID"] == null ? false : true;
            if (val)
            {
                try
                {

                    var data = bal.Bind_Packing_BL();
                    var json = new JavaScriptSerializer().Serialize(data);
                    return Json(json, JsonRequestBehavior.AllowGet);
                }

                catch (Exception exe)
                {
                    string actionName = this.ControllerContext.RouteData.Values["action"].ToString();
                    string controllerName = this.ControllerContext.RouteData.Values["controller"].ToString();
                    objERR.err_title = controllerName + "-" + controllerName;
                    objERR.err_message = "Sorry for the inconvience. Some error has been occured.";
                    objERR.err_details = exe.Message.Replace("'", "");
                    int errid = bal.ExceptionInsertLogs_BL(objERR);
                    return Json("ERR" + errid.ToString(), JsonRequestBehavior.AllowGet);
                }
            }
            else
            {
                return Json("Expired", JsonRequestBehavior.AllowGet);
            }
        }
        //Validate the data
        private string validations(string OrderCode, decimal OrderID, decimal drpSalesperson, decimal ORGIDValue, int drpOrdertype, string txtOrderdate, string Orderdetails, EntityClasses context)
        {
            //user = 0;
            //try
            //{
            //    var approver = dbcontext.Tbl_Document_Master.Single(m => m.auto_key == 6014).workflow_status;
            //    if (approver == 1)
            //        user = dbcontext.Tbl_Document_Master.Single(m => m.auto_key == 6014).workflowapprover ?? 0;
            //    else
            //        user = 1000000;
            //}
            //catch { }
            //if (user == 0)
            //{
            //    return "Please contact Admin to set Approver.";
            //}
            if (!automanual && OrderCode == "")
            {
                return "Enter the Order Code";
            }
            if (drpSalesperson == 0)
            {
                return "Sales person should not be empty.";
            }
            if (ORGIDValue == 0)
            {
                return "Sales Group should not be empty.";
            }
            if (drpOrdertype == 0)
            {
                return "Select order type.";
            }
            if (txtOrderdate == "")
            {
                return "Order date should not be empty.";
            }
            if (!automanual)
            {
                string valid = ObjBL.CheckDuplicateCode_BL(OrderID, OrderCode);
                if (valid != "")
                {
                    return "Order Code Already Exist";
                }
            }
            try
            {
                string[] ChildRow = Orderdetails.Split('|');
                string[] tableColumns = new string[ChildRow.Length];
                for (int i = 0; i < ChildRow.Length - 1; i++)
                {
                    string[] ChildRecord = ChildRow[i].Split('}');
                    if(drpOrdertype==1)
                    {
                        if (tableColumns.Contains(Convert.ToDecimal(ChildRecord[0]).ToString()))
                        {
                            return "Product is repeated at row :" + (i + 1);
                        }
                    }
                   
                    tableColumns[i] = Convert.ToDecimal(ChildRecord[0]).ToString();
                }
            }
            catch
            {
                return "Unable to process your request. Please verify product data.";
            }
            if (OrderID != 0)
            {
                string[] ChildRow = Orderdetails.Split('|');
                var scheduledetail = dbcontext.Tbl_Schedule.Where(m => m.SH_OrderID == OrderID).ToList();
                if (scheduledetail.Count() > 0)
                {
                    var QtyvalAll = scheduledetail.GroupBy(p => p.SH_ProductID).Select(c => new
                    {
                        Qty = c.Sum(d => d.SH_SheduledQuantity),
                        productId = c.First().SH_ProductID
                    }).ToArray();
                    var QtyvalShipped = scheduledetail.Where(p => p.SH_Status == true).GroupBy(p => p.SH_ProductID).Select(c => new
                    {
                        Qty = c.Sum(d => d.SH_SheduledQuantity),
                        productId = c.First().SH_ProductID
                    }).ToArray();
                    //Shipped
                    for (int i = 0; i < QtyvalShipped.Length; i++)
                    {
                        int k = 0;
                        for (int j = 0; j < ChildRow.Length - 1; j++)
                        {
                            string[] ChildRecord = ChildRow[j].Split('}');
                            var Productid = Convert.ToDecimal(ChildRecord[0]);
                            if (QtyvalShipped[i].productId == Productid)
                            {
                                k = 1;
                                if (QtyvalShipped[i].Qty > Convert.ToDecimal(ChildRecord[4]))
                                {
                                    return "Ordered Product is already Scheduled. Ordered Quantity Cannot be reduced less than Scheduled Quantity at row : " + (j + 1);
                                }
                            }
                        }
                        if (k == 0)
                        {
                            return "You cannot delete a product which is already Scheduled";
                        }
                    }
                    //All Schedules
                    for (int i = 0; i < QtyvalAll.Length; i++)
                    {
                        int k = 0;
                        for (int j = 0; j < ChildRow.Length - 1; j++)
                        {
                            string[] ChildRecord = ChildRow[j].Split('}');
                            var Productid = Convert.ToDecimal(ChildRecord[0]);
                            if (QtyvalAll[i].productId == Productid)
                            {
                                k = 1;
                                if (QtyvalAll[i].Qty > Convert.ToDecimal(ChildRecord[4]))
                                {
                                    var data = context.Tbl_Schedule.Where(m => m.SH_OrderID == OrderID && m.SH_ProductID == Productid && m.SH_Status == false).ToList();
                                    data.ForEach(m => m.SH_SheduledQuantity = 0);
                                    context.SaveChanges();
                                }
                            }
                        }
                        if (k == 0)
                        {
                            return "You cannot delete a product which is already Scheduled";
                        }
                    }
                }
            }
            return "";
        }
        //Insert/update the order
        [HttpPost]
        public JsonResult ET_Sales_OrderDetails_Add(string OrderCode, decimal OrderID,int SO_PriceType, decimal drpSalesperson, decimal ORGIDValue, int drpOrdertype, string txtOrderdate, decimal drpCustomer, decimal drpSupplier, string txtcusponumber, string cuspodate,string cusscdate, string subpodate, string txtsubscnumber, string subscdate, decimal drpCusCurrency, decimal txtcommisionagy, string txtCusdeliveryterms, decimal drpCusPaymenttype, string remarks,int quotation,decimal SO_Discount, bool taxApplicable,string taxRemarks,string Orderdetails)
        {
            bool val = Session["UserID"] == null ? false : true;
            if (val)
            {
                var context = new EntityClasses();
                var transaction = context.Database.BeginTransaction();
                try
                {
                    DateTime Orerdate = DateTime.ParseExact(txtOrderdate, "dd-MM-yyyy", null);
                    DateTime CusPOdate = DateTime.ParseExact(cuspodate, "dd-MM-yyyy", null);
                    DateTime? Sup_SCdate = null;
                    if (subscdate != "") { Sup_SCdate = DateTime.ParseExact(subscdate, "dd-MM-yyyy", null); }
                    //For Editing Scheduled Value
                    string valid = validations(OrderCode, OrderID, drpSalesperson, ORGIDValue, drpOrdertype, txtOrderdate, Orderdetails, context);
                    if (valid == "")
                    {
                        Tbl_Master_Order obj = new Tbl_Master_Order()
                        {
                            SO_ID = OrderID,
                            SO_Code = OrderCode,
                            SO_OrderDate = Orerdate,
                            SO_PriceType = SO_PriceType,
                            SO_SalesPersonID = drpSalesperson,
                            SO_ORGID = ORGIDValue,
                            SO_OrderType = drpOrdertype,
                            SO_CutomerID = drpCustomer,
                            SO_SupplierID = drpSupplier,
                            SO_CusPONO = txtcusponumber,
                            SO_CusPODate = CusPOdate,
                            SO_SupSCNO = txtsubscnumber,
                            SO_SupSCDate = Sup_SCdate,
                            SO_CusCurrency = drpCusCurrency,
                            SO_CusPaymentTermID = drpCusPaymenttype,
                            SO_CusDeliveryTerms = txtCusdeliveryterms,
                            SO_Commision = txtcommisionagy,
                            SO_Remarks = remarks,
                            SO_Approval = 0,
                            DELETED = false,
                            CREATED_BY = Convert.ToInt32(Session["UserID"]),
                            LAST_UPDATED_BY = Convert.ToInt32(Session["UserID"]),
                            COM_KEY = Convert.ToInt32(Session["CompanyKey"]),
                            SO_QuotationID = quotation,
                            SO_Approver = 0,
                            SO_Discount = SO_Discount,
                            SO_TaxApplicable = taxApplicable,
                            SO_TaxRemarks = taxRemarks
                        };
                        string OrdCode;

                        var data = ObjBL.ET_Sales_OrderDetails_Add_BL(obj, prefix, automanual, Orderdetails, out OrdCode);
                        var json = "Success:" + OrdCode;
                        if (data == 0)
                        {
                            transaction.Rollback();
                            json = "Failed";
                        }
                        else
                        {
                            transaction.Commit();
                            if (quotation != 0)
                            {
                                dbcontext.tbl_QuotationHeader.Single(m => m.Q_ID == quotation).Q_Status = true;
                                dbcontext.SaveChanges();
                            }
                            objLOG.log_dockey = "6014";
                            objLOG.log_userid = Session["UserID"].ToString();
                            objLOG.log_recordkey = data.ToString();
                            if (OrderID == 0)
                            {
                                objLOG.log_operation = "Insert";
                                objLOG.log_Remarks = "Record Inserted Successfully";
                            }
                            else
                            {
                                objLOG.log_operation = "Update";
                                objLOG.log_Remarks = "Record Updated Successfully";
                            }
                            bal.OperationInsertLogs_BL(objLOG);
                        }
                        return Json(json, JsonRequestBehavior.AllowGet);
                    }
                    else
                    {
                        var json = "Validation:" + valid;
                        return Json(json, JsonRequestBehavior.AllowGet);
                    }
                }
                catch (Exception exe)
                {
                    transaction.Rollback();
                    string actionName = this.ControllerContext.RouteData.Values["action"].ToString();
                    string controllerName = this.ControllerContext.RouteData.Values["controller"].ToString();
                    objERR.err_title = controllerName + "-" + controllerName;
                    objERR.err_message = "Sorry for the inconvience. Some error has been occured.";
                    objERR.err_details = exe.Message.Replace("'", "");
                    int errid = bal.ExceptionInsertLogs_BL(objERR);
                    return Json("ERR" + errid.ToString(), JsonRequestBehavior.AllowGet);
                }
                finally
                {
                    transaction.Dispose();
                    context.Dispose();
                }
            }
            else
            {
                return Json("Expired", JsonRequestBehavior.AllowGet);
            }
        }
        //Edit the orderdetails
        public JsonResult ET_Sales_OrderDetails_Update_GetbyID(int id)
        {
            bool val = Session["UserID"] == null ? false : true;
            if (val)
            {
                try
                {
                    var data =(from a in dbcontext.Tbl_Master_Order where a.SO_ID==id select new
                    {
                        a.SO_Code,
                        a.SO_Commision,
                        a.SO_CusCurrency,
                        a.SO_CusDeliveryTerms,
                        a.SO_CusPaymentTermID,
                        a.SO_CusPODate,
                        a.SO_CusPONO,
                        a.SO_CutomerID,
                        a.SO_Discount,
                        a.SO_ID,
                        a.SO_OrderDate,
                        a.SO_OrderType,
                        a.SO_ORGID,
                        a.SO_QuotationID,
                        a.SO_Remarks,
                        a.SO_SalesPersonID,
                        a.SO_SupplierID,
                        a.SO_SupSCDate,
                        a.SO_SupSCNO,
                        a.SO_PriceType,
                        a.SO_TaxRemarks,
                        a.SO_TaxApplicable,
                        paymenttype =(dbcontext.Tbl_Payment_Terms.FirstOrDefault(m=>m.PT_ID == a.SO_CusPaymentTermID).PT_DiscountType)
                    }).ToList();
                    var json = new JavaScriptSerializer().Serialize(data);
                    return Json(json, JsonRequestBehavior.AllowGet);
                }
                catch (Exception exe)
                {
                    string actionName = this.ControllerContext.RouteData.Values["action"].ToString();
                    string controllerName = this.ControllerContext.RouteData.Values["controller"].ToString();
                    objERR.err_title = controllerName + "-" + controllerName;
                    objERR.err_message = "Sorry for the inconvience. Some error has been occured.";
                    objERR.err_details = exe.Message.Replace("'", "");
                    int errid = bal.ExceptionInsertLogs_BL(objERR);
                    return Json("ERR" + errid.ToString(), JsonRequestBehavior.AllowGet);
                }
            }
            else
            {
                return Json("ET_SessionExpire", "ET_Login");
            }
        }
        //Restore the order details
        [HttpPost]
        public ActionResult ET_Sales_OrderDetails_Restore_Delete(int id, bool type)
        {
            bool val = Session["UserID"] == null ? false : true;
            if (val)
            {
                try
                {
                    var Updatedby = Convert.ToInt64(Session["UserID"]);
                    var result = ObjBL.ET_Sales_OrderDetails_Restore_Delete_BL(id, Updatedby, type);
                    var json = "Failed";
                    if (result != 0)
                    {
                        json = "Success";
                    }
                    else
                    {
                        objLOG.log_dockey = "6014";
                        objLOG.log_operation = "Restore";
                        objLOG.log_userid = Session["UserID"].ToString();
                        objLOG.log_recordkey = id.ToString();
                        objLOG.log_Remarks = "Record Restored Successfully";
                        bal.OperationInsertLogs_BL(objLOG);
                    }
                    return Json(json, JsonRequestBehavior.AllowGet);
                }
                catch (Exception exe)
                {
                    string actionName = this.ControllerContext.RouteData.Values["action"].ToString();
                    string controllerName = this.ControllerContext.RouteData.Values["controller"].ToString();
                    objERR.err_title = controllerName + "-" + controllerName;
                    objERR.err_message = "Sorry for the inconvience. Some error has been occured.";
                    objERR.err_details = exe.Message.Replace("'", "");
                    int errid = bal.ExceptionInsertLogs_BL(objERR);
                    return Json("ERR" + errid.ToString(), JsonRequestBehavior.AllowGet);
                }
            }
            else
            {
                return Json("ET_SessionExpire", "ET_Login");
            }

        }
        
            public JsonResult GetQuotationDetails(int id)
        {

            bool val = Session["UserID"] == null ? false : true;
            if (val)
            {
                try
                {
                    dbcontext.Configuration.ProxyCreationEnabled = false;
                    int companykey = Convert.ToInt32(Session["CompanyKey"]);
                   
                        var product = dbcontext.tbl_QuotationHeader.Where(m => m.Q_ID == id && m.Q_ApprovedStatus==1 && m.DELETED==false).ToList();
                        
                        var json = new JavaScriptSerializer().Serialize(product);
                        return Json(json, JsonRequestBehavior.AllowGet);
                    
                }
                catch (Exception exe)
                {
                    string actionName = this.ControllerContext.RouteData.Values["action"].ToString();
                    string controllerName = this.ControllerContext.RouteData.Values["controller"].ToString();
                    objERR.err_title = controllerName + "-" + controllerName;
                    objERR.err_message = "Sorry for the inconvience. Some error has been occured.";
                    objERR.err_details = exe.Message.Replace("'", "");
                    int errid = bal.ExceptionInsertLogs_BL(objERR);
                    return Json("ERR" + errid.ToString(), JsonRequestBehavior.AllowGet);
                }
            }
            else
            {
                return Json("Expired", JsonRequestBehavior.AllowGet);
            }
        }
        //Get the product
        public JsonResult GetProducts(int id,int productCategory)
        {

            bool val = Session["UserID"] == null ? false : true;
            if (val)
            {
                try
                {
                    //yarn 
                    //var masterCategory = 1;
                    //if(productCategory == 1)
                    //{
                    //    masterCategory = 1;
                    //}
                    //else if(productCategory == 2)
                    //{
                    //    masterCategory = 4;
                    //}

                    dbcontext.Configuration.ProxyCreationEnabled = false;
                    int companykey = Convert.ToInt32(Session["CompanyKey"]);
                    if (id == 0)
                    {
                        
                    //    var Products = (from PM in  dbcontext.Tbl_Product_Master
                    //                    join CG in dbcontext.Tbl_Master_Category on PM.P_CategoryID equals CG.CAT_CODE
                    //                    where PM.COM_KEY == companykey && PM.DELETED == false && PM.P_CategoryID.
                    //                     select new{
                    //                         PM.P_ID,
                    //                         PM.P_CategoryID,
                    //                         PM.P_ArticleNo,
                    //                         PM.P_ShortName,
                    //                         PM.P_Name
                    //                     }).Distinct().OrderBy(m=>m.P_ArticleNo).ToList();

                        var Products = dbcontext.Tbl_Product_Master.Where(m => m.COM_KEY == companykey && m.DELETED == false).OrderBy(m => m.P_ArticleNo).ToList();
                        var json = new JavaScriptSerializer().Serialize(Products);
                        return Json(json, JsonRequestBehavior.AllowGet);
                    }
                    else
                    {
                        var product = dbcontext.Tbl_Order_Details.Where(m => m.AGEN_TRAD_PO_ID == id).Select(a => a.PRODUCT_ID);
                        var Products = dbcontext.Tbl_Product_Master.Where(m => m.COM_KEY == companykey && (m.DELETED == false || product.Contains(m.P_ID))).OrderBy(m => m.P_ArticleNo).ToList();
                        //var Products = (from PM in dbcontext.Tbl_Product_Master
                        //                join CG in dbcontext.Tbl_Master_Category on PM.P_CategoryID equals CG.CAT_CODE
                        //                where PM.COM_KEY == companykey && (PM.DELETED == false || product.Contains(PM.P_ID))
                        //                select new
                        //                {
                        //                    PM.P_ID,
                        //                    PM.P_CategoryID,
                        //                    PM.P_ArticleNo,
                        //                    PM.P_ShortName,
                        //                    PM.P_Name
                        //                }).Distinct().OrderBy(m => m.P_ArticleNo).ToList();
                        var json = new JavaScriptSerializer().Serialize(Products);
                        return Json(json, JsonRequestBehavior.AllowGet);
                    }
                }
                catch (Exception exe)
                {
                    string actionName = this.ControllerContext.RouteData.Values["action"].ToString();
                    string controllerName = this.ControllerContext.RouteData.Values["controller"].ToString();
                    objERR.err_title = controllerName + "-" + controllerName;
                    objERR.err_message = "Sorry for the inconvience. Some error has been occured.";
                    objERR.err_details = exe.Message.Replace("'", "");
                    int errid = bal.ExceptionInsertLogs_BL(objERR);
                    return Json("ERR" + errid.ToString(), JsonRequestBehavior.AllowGet);
                }
            }
            else
            {
                return Json("Expired", JsonRequestBehavior.AllowGet);
            }
        }

        [HttpPost]
        public ActionResult ET_Mail_View(int id)
        {
            bool val = Session["UserID"] == null ? false : true;
            EntityClasses dbcontext = new EntityClasses();
            dbcontext.Configuration.ProxyCreationEnabled = false;
            int companykey = Convert.ToInt32(Session["CompanyKey"]);
            //check if the company details are available
            var customerMail = string.Empty;
            var supplierMail = string.Empty;
            var isCompanyDetailsExist = false;
            if (dbcontext.Tbl_Master_CompanyDetails.Count() > 0)
            {
                if (dbcontext.Tbl_Master_CompanyDetails.Where(m => m.COM_ID == id).Count() > 0)
                {
                    customerMail = dbcontext.Tbl_Master_CompanyDetails.Single(m => m.COM_ID == id).COM_EMAIL;
                    var supplierId = dbcontext.Tbl_Master_Order.Single(m => m.SO_CutomerID == id).SO_SupplierID;
                    supplierMail = dbcontext.Tbl_Master_CompanyDetails.Single(m => m.COM_ID == supplierId).COM_EMAIL;
                    isCompanyDetailsExist = true;
                }
                
            }
            if(!isCompanyDetailsExist)
            {
                customerMail = "info@mailadress.de";
                supplierMail = "info@mailadress.de";
            }

            if (val)
            {
                try
                {
                    MailContentInfo mailContentInfo = new MailContentInfo();
                    mailContentInfo.ToReceipients = customerMail;
                    mailContentInfo.CCReceipients = supplierMail;
                    mailContentInfo.Subject = "Order Summary";
                    mailContentInfo.MailContent = "Dear Customer, your order summary";
                    mailContentInfo.UserId = (decimal)Session["UserID"];
                    mailContentInfo.CreatedBy = (decimal)Session["UserID"];
                    mailContentInfo.CreatedDate = DateTime.Now;
                    mailContentInfo.CompanyKey = (decimal)companykey;
                    mailContentInfo.Deleted = false;
                    mailContentInfo.MailAttachments.Add(new MailContentAttachments());
                    return PartialView("/Views/Mail/ET_Mail_Email/ET_Mail_View.cshtml", mailContentInfo);
                }
                catch (Exception exe)
                {
                    string actionName = this.ControllerContext.RouteData.Values["action"].ToString();
                    string controllerName = this.ControllerContext.RouteData.Values["controller"].ToString();
                    objERR.err_title = controllerName + "-" + controllerName;
                    objERR.err_message = "Sorry for the inconvience. Some error has been occured." + exe.Message;
                    objERR.err_details = exe.Message.Replace("'", "");
                    int errid = bal.ExceptionInsertLogs_BL(objERR);
                    return Json("ERR" + errid.ToString() + exe.Message, JsonRequestBehavior.AllowGet);
                }
            }
            else
            {
                return Json("ET_SessionExpire", "ET_Mail_View");
            }
        }
        //View:Stock view
        [HttpPost]
        public ActionResult ET_Sales_Stock_View(int pid, int oid)
        {
            bool val = Session["UserID"] == null ? false : true;
            if (val)
            {
                try
                {
                    decimal orderqty = 0;
                    var OpeningStock = (from d in dbcontext.tbl_StoreDetails
                                        join f in dbcontext.tbl_StoreMaster on d.SD_SM_ID equals f.SM_Id
                                        where d.SD_Itemcode == pid
                                        select new
                                        {
                                            OpeningStock = d.SD_OpeningStock,
                                        }).Select(a => a.OpeningStock).DefaultIfEmpty(0).Sum();

                    var GI = (from d in dbcontext.tbl_GoodsInwardDetail
                              join f in dbcontext.tbl_GoodsInwardHeader on d.GD_PID equals f.GI_ID
                              where d.GD_ProductID == pid
                              select new
                              {
                                  GIQuantity = d.GD_GIQuantity ?? 0,
                              }).Select(a => a.GIQuantity).DefaultIfEmpty(0).Sum();
                    if (oid == 0)
                    {
                        orderqty = (from a in dbcontext.Tbl_Master_Order
                                    join b in dbcontext.Tbl_Order_Details on a.SO_ID equals b.AGEN_TRAD_PO_ID
                                    where a.SO_Approval != 2 && b.PRODUCT_ID == pid
                                    select new
                                    { b.QUANTITY }).Select(a => a.QUANTITY).DefaultIfEmpty(0).Sum() ?? 0;
                    }
                    else
                    {
                        orderqty = (from a in dbcontext.Tbl_Master_Order
                                    join b in dbcontext.Tbl_Order_Details on a.SO_ID equals b.AGEN_TRAD_PO_ID
                                    where a.SO_ID != oid && a.SO_Approval != 2 && b.PRODUCT_ID == pid
                                    select new
                                    { b.QUANTITY }).Select(a => a.QUANTITY).DefaultIfEmpty(0).Sum() ?? 0;
                    }
                    var POs = dbcontext.tbl_GoodsInwardHeader.Select(a => a.GI_POCode);
                    var PODetail = (from a in dbcontext.tbl_PurchaseOrderHeader
                                    join b in dbcontext.tbl_PurchaseOrderDetails on a.PP_ID equals b.PD_PID
                                    where b.PD_ProductID == pid && a.PO_Type == 3 && !POs.Contains(a.PP_ID)
                                    select new AvailbleStock
                                    {
                                        POQty = b.PD_Quantity ?? 0,
                                        PODate = a.Po_DeliveryDate ?? DateTime.Today
                                    }).ToList();
                    AvailbleStock head = new AvailbleStock();
                    head.AvailableQty = OpeningStock + GI - orderqty;
                    AvailbleStockView obj = new AvailbleStockView();
                    obj.Head = head;
                    obj.Detail = PODetail;
                    return PartialView("/Views/Sales/ET_Sales_OrderDetails/ET_Sales_OrderDetails_StockView.cshtml", obj);
                }
                catch (Exception exe)
                {
                    string actionName = this.ControllerContext.RouteData.Values["action"].ToString();
                    string controllerName = this.ControllerContext.RouteData.Values["controller"].ToString();
                    objERR.err_title = controllerName + "-" + controllerName;
                    objERR.err_message = "Sorry for the inconvience. Some error has been occured.";
                    objERR.err_details = exe.Message.Replace("'", "");
                    int errid = bal.ExceptionInsertLogs_BL(objERR);
                    return Json("ERR" + errid.ToString(), JsonRequestBehavior.AllowGet);
                }
            }
            else
            {
                return Json("ET_SessionExpire", "ET_Login");
            }
        }
        //View: popup view
        [HttpPost]
        public ActionResult ET_Sales_OrderDetails_View(int id)
        {
            bool val = Session["UserID"] == null ? false : true;
            if (val)
            {
                try
                {
                    var data = (from MO in dbcontext.Tbl_Master_Order
                                join OD in dbcontext.Tbl_Order_Details on MO.SO_ID equals OD.AGEN_TRAD_PO_ID
                                join PM in dbcontext.Tbl_Product_Master on OD.PRODUCT_ID equals PM.P_ID
                                join b in dbcontext.tbl_LookUp on PM.P_UOM equals b.LU_Code
                                into m from n in m.DefaultIfEmpty()
                                join CY in dbcontext.Tbl_Currency_Master on MO.SO_CusCurrency equals CY.CURRENCY_ID
                                join MU in dbcontext.Tbl_Master_User on MO.SO_SalesPersonID equals MU.USER_ID
                                join CD in dbcontext.Tbl_Master_CompanyDetails on MO.SO_CutomerID equals CD.COM_ID
                                into x from y in x.DefaultIfEmpty()
                                where MO.SO_ID == id && n.LU_Type == 2
                                select new Tbl_Order_Details_CM
                                {
                                    AGEN_TRAD_PO = OD.AGEN_TRAD_PO,
                                    PRODUCT_Name = PM.P_Name,
                                    QUANTITY = OD.QUANTITY,
                                    UOM_NAME = n.LU_Description,
                                    SO_OrderDate = MO.SO_OrderDate,
                                    SO_ORGID = MO.SO_ORGID,
                                    SO_OrderType = MO.SO_OrderType,
                                    SO_CutomerID = MO.SO_CutomerID,
                                    SO_SupplierID = MO.SO_SupplierID,
                                    SO_CusPONO = MO.SO_CusPONO,
                                    SO_CusPODate = MO.SO_CusPODate,
                                    SO_SupSCNO = MO.SO_SupSCNO,
                                    SO_SupSCDate = MO.SO_SupSCDate,
                                    SO_CusCurrencyname = CY.CURRENCY_NAME,
                                    SO_CusPaymentTermID = MO.SO_CusPaymentTermID,
                                    SO_CusDeliveryTerms = MO.SO_CusDeliveryTerms,
                                    SO_Commision = MO.SO_Commision,
                                    SO_Remarks = MO.SO_Remarks,
                                    PACKING = OD.PACKING,
                                    SHORT_NAME = PM.P_ShortName,
                                    SO_PriceType=MO.SO_PriceType,
                                    PRICE = OD.PRICE,
                                    USER_NAME = MU.USER_NAME,
                                    SO_Code = MO.SO_Code,
                                    CustomerName = y.COM_NAME,
                                    Quotation = MO.SO_QuotationID??0,
                                    P_PackingQuantityUOM=PM.P_PackingQuantityUOM,
                                    OrderDescription = OD.OrderDescription
                                }).ToList();
                    return PartialView("/Views/Sales/ET_Sales_OrderDetails/ET_Sales_OrderDetails_View.cshtml", data);
                }
                catch (Exception exe)
                {
                    string actionName = this.ControllerContext.RouteData.Values["action"].ToString();
                    string controllerName = this.ControllerContext.RouteData.Values["controller"].ToString();
                    objERR.err_title = controllerName + "-" + controllerName;
                    objERR.err_message = "Sorry for the inconvience. Some error has been occured.";
                    objERR.err_details = exe.Message.Replace("'", "");
                    int errid = bal.ExceptionInsertLogs_BL(objERR);
                    return Json("ERR" + errid.ToString(), JsonRequestBehavior.AllowGet);
                }
            }
            else
            {
                return Json("ET_SessionExpire", "ET_Login");
            }
        }
        //Print the order
        public ActionResult ET_Sales_OrderDetails_Print(int id,string lang)
        {
            bool val = Session["UserID"] == null ? false : true;
            if (val)
            {
                try
                {
                    dbcontext.Configuration.ProxyCreationEnabled = false;
                    int com_key = Convert.ToInt32(Session["Companykey"]);
                    var data1 = (from MO in dbcontext.Tbl_Master_Order
                                 join MU in dbcontext.Tbl_Master_User on MO.SO_SalesPersonID equals MU.USER_ID
                                 join CD in dbcontext.Tbl_Master_CompanyDetails on MO.SO_CutomerID equals CD.COM_ID
                                 join SCD in dbcontext.Tbl_Master_CompanyDetails on MO.SO_SupplierID equals SCD.COM_ID
                                 into x
                                 from y in x.DefaultIfEmpty()
                                 where MO.SO_ID == id 
                                 select new Tbl_Order_Details_CM
                                 {
                                     Street = CD.COM_STREET,
                                     CityState = (CD.COM_CITY + ", " + CD.COM_STATE),
                                     CountryZip = ((dbcontext.locations.Where(a => a.location_id == CD.COM_COUNTRY).Select(a => a.name).FirstOrDefault()) + ", " + (CD.COM_ZIP)),
                                     SO_OrderDate = MO.SO_OrderDate,
                                     SO_ORGID = MO.SO_ORGID,
                                     SO_OrderType = MO.SO_OrderType,
                                     SO_CutomerID = MO.SO_CutomerID,
                                     imgurl = (dbcontext.Tbl_SystemSetUp.Where(a => a.COMPANY_ID == com_key).Select(a => a.COMPANY_LOGO).FirstOrDefault()),
                                     SysCompany = (dbcontext.Tbl_SystemSetUp.Where(a => a.COMPANY_ID == com_key).Select(a => a.COMPANY_NAME).FirstOrDefault()),
                                     //VatPer = (dbcontext.Tbl_SystemSetUp.Where(a => a.COMPANY_ID == com_key).Select(a => a.TAX).FirstOrDefault()),
                                     VatPer = (dbcontext.Tbl_SystemSetUp.Select(a => a.TAX).FirstOrDefault()),
                                     PaymentTerms = (dbcontext.Tbl_Payment_Terms.Where(m => m.PT_ID == MO.SO_CusPaymentTermID).Select(m => m.PT_Name).FirstOrDefault()),
                                     PaymentTermsDescription = (dbcontext.Tbl_Payment_Terms.Where(m => m.PT_ID == MO.SO_CusPaymentTermID).Select(m => m.PT_Details).FirstOrDefault()),
                                     SO_CusDeliveryTerms = MO.SO_CusDeliveryTerms,
                                     SO_SupplierID = MO.SO_SupplierID,
                                     SO_CusPONO = MO.SO_CusPONO,
                                     SO_CusPODate = MO.SO_CusPODate,
                                     SO_SupSCNO = MO.SO_SupSCNO,
                                     SO_SupSCDate = MO.SO_SupSCDate,
                                     SO_CusPaymentTermID = MO.SO_CusPaymentTermID,
                                     SO_Commision = MO.SO_Commision,
                                     SO_Remarks = MO.SO_Remarks,
                                     USER_NAME = MU.USER_NAME,
                                     CUSTOMER_NAME = CD.COM_NAME,
                                     SUPPLIER_NAME = y.COM_NAME,
                                     salesPersonName= MU.DISPLAY_NAME,
                                     SO_Code = MO.SO_Code,
                                     SO_ID=MO.SO_ID,
                                     IS_TAXApplicable = MO.SO_TaxApplicable
                                 }).ToList();

                    var data2 = (from MO in dbcontext.Tbl_Master_Order
                                 join OD in dbcontext.Tbl_Order_Details on MO.SO_ID equals OD.AGEN_TRAD_PO_ID
                                 join PM in dbcontext.Tbl_Product_Master on OD.PRODUCT_ID equals PM.P_ID
                                 join b in dbcontext.tbl_LookUp on PM.P_UOM equals b.LU_Code
                                 into m
                                 from n in m.DefaultIfEmpty()
                                 join MU in dbcontext.Tbl_Master_User on MO.SO_SalesPersonID equals MU.USER_ID
                                 join CD in dbcontext.Tbl_Master_CompanyDetails on MO.SO_CutomerID equals CD.COM_ID
                                 join SCD in dbcontext.Tbl_Master_CompanyDetails on MO.SO_SupplierID equals SCD.COM_ID
                                 into x
                                 from y in x.DefaultIfEmpty()
                                 where MO.SO_ID == id && n.LU_Type == 2
                                 select new Tbl_Order_Details_CM()
                                 {
                                     ArticleNo = PM.P_ArticleNo,
                                     AGEN_TRAD_PO = OD.AGEN_TRAD_PO,
                                     PRODUCT_Name = PM.P_Name,
                                     QUANTITY = OD.QUANTITY,
                                     UOM_NAME = n.LU_Description,
                                     SO_OrderDate = MO.SO_OrderDate,
                                     SO_ORGID = MO.SO_ORGID,
                                     SO_OrderType = MO.SO_OrderType,
                                     SO_CutomerID = MO.SO_CutomerID,
                                     SO_SupplierID = MO.SO_SupplierID,
                                     SO_CusPONO = MO.SO_CusPONO,
                                     SO_CusPODate = MO.SO_CusPODate,
                                     SO_SupSCNO = MO.SO_SupSCNO,
                                     SO_SupSCDate = MO.SO_SupSCDate,
                                     SO_CusPaymentTermID = MO.SO_CusPaymentTermID,
                                     SO_CusDeliveryTerms = MO.SO_CusDeliveryTerms,
                                     SO_Commision = MO.SO_Commision,
                                     SO_Remarks = MO.SO_Remarks,
                                     PACKING = OD.PACKING,
                                     SHORT_NAME = PM.P_ShortName,
                                     PRICE = OD.PRICE,
                                     USER_NAME = MU.USER_NAME,
                                     CUSTOMER_NAME = CD.COM_NAME,
                                     SUPPLIER_NAME = y.COM_NAME,
                                     SO_Code = MO.SO_Code,
                                     DesignDetail = OD.DesignDetail,
                                     CustomerDesc = OD.CustomerDes,
                                     IS_TAXApplicable = MO.SO_TaxApplicable
                                 }
                                  ).ToList();
                    Order_View_CM obj = new Order_View_CM();
                    obj.OHeader = data1;
                    obj.OChild = data2;
                    if (lang == "E")
                        return PartialView("/Views/Sales/ET_Sales_OrderDetails/ET_Sales_OrderDetails_Print.cshtml", obj);
                    else
                        return PartialView("/Views/Sales/ET_Sales_OrderDetails/ET_Sales_OrderDetails_Print_German.cshtml", obj);
                }
                catch (Exception exe)
                {
                    string actionName = this.ControllerContext.RouteData.Values["action"].ToString();
                    string controllerName = this.ControllerContext.RouteData.Values["controller"].ToString();
                    objERR.err_title = controllerName + "-" + controllerName;
                    objERR.err_message = "Sorry for the inconvience. Some error has been occured.";
                    objERR.err_details = exe.Message.Replace("'", "");
                    int errid = bal.ExceptionInsertLogs_BL(objERR);
                    return Json("ERR" + errid.ToString(), JsonRequestBehavior.AllowGet);
                }
            }
            else
            {
                return RedirectToAction("ET_SessionExpire", "ET_Login");
            }
            
        }
        public JsonResult ET_Sales_OrderDetailsPrint( int enqId,string lang)
        {
            bool val = Session["UserID"] == null ? false : true;
            var context = new EntityClasses();
            var transaction = context.Database.BeginTransaction();
            try
            {
                dbcontext.Configuration.ProxyCreationEnabled = false;
                bool taxApplicable = true;
                bool result = IsTaxApplicable(enqId).Value;
                if (result)
                {
                    taxApplicable = true;
                }
                else
                    taxApplicable = false;
                int com_key = Convert.ToInt32(Session["Companykey"]);
                var data1 = (from MO in dbcontext.Tbl_Master_Order
                             join MU in dbcontext.Tbl_Master_User on MO.SO_SalesPersonID equals MU.USER_ID
                             join CD in dbcontext.Tbl_Master_CompanyDetails on MO.SO_CutomerID equals CD.COM_ID
                             join SCD in dbcontext.Tbl_Master_CompanyDetails on MO.SO_SupplierID equals SCD.COM_ID
                             into x
                             from y in x.DefaultIfEmpty()
                             where MO.SO_ID == enqId
                             select new Tbl_Order_Details_CM
                             {
                                 Street = CD.COM_STREET,
                                 CityState = (CD.COM_CITY ),
                                 Zipcode=CD.COM_COUNTRY,
                                 CountryZip = ((dbcontext.locations.Where(a => a.location_id == CD.COM_COUNTRY).Select(a => a.name).FirstOrDefault()) + ", " + (CD.COM_ZIP)),
                                 SO_OrderDate = MO.SO_OrderDate,
                                 SO_ORGID = MO.SO_ORGID,
                                 SO_OrderType = MO.SO_OrderType,
                                 SO_CutomerID = MO.SO_CutomerID,
                                 imgurl = (dbcontext.Tbl_SystemSetUp.Where(a => a.COMPANY_ID == com_key).Select(a => a.COMPANY_LOGO).FirstOrDefault()),
                                 SysCompany = (dbcontext.Tbl_SystemSetUp.Where(a => a.COMPANY_ID == com_key).Select(a => a.COMPANY_NAME).FirstOrDefault()),
                                 //VatPer = (dbcontext.Tbl_SystemSetUp.Where(a => a.COMPANY_ID == com_key).Select(a => a.TAX).FirstOrDefault()),
                                 VatPer = (dbcontext.Tbl_SystemSetUp.Select(a => a.TAX).FirstOrDefault()),
                                 PaymentTerms = (dbcontext.Tbl_Payment_Terms.Where(m => m.PT_ID == MO.SO_CusPaymentTermID).Select(m => m.PT_Name).FirstOrDefault()),
                                 PaymentTermsDescription = (dbcontext.Tbl_Payment_Terms.Where(m => m.PT_ID == MO.SO_CusPaymentTermID).Select(m => m.PT_Details).FirstOrDefault()),
                                 SO_CusDeliveryTerms = MO.SO_CusDeliveryTerms,
                                 SO_SupplierID = MO.SO_SupplierID,
                                 SO_CusPONO = MO.SO_CusPONO,
                                 SO_CusPODate = MO.SO_CusPODate,
                                 SO_SupSCNO = MO.SO_SupSCNO,
                                 SO_SupSCDate = MO.SO_SupSCDate,
                                 SO_CusPaymentTermID = MO.SO_CusPaymentTermID,
                                 SO_Commision = MO.SO_Commision,
                                 SO_Remarks = MO.SO_Remarks,
                                 USER_NAME = MU.USER_NAME,
                                 CUSTOMER_NAME = CD.COM_NAME,
                                 SUPPLIER_NAME = y.COM_NAME,
                                 salesPersonName = MU.DISPLAY_NAME,
                                 SO_Code = MO.SO_Code,
                                 SO_ID=MO.SO_ID,
                                 Discount=MO.SO_Discount
                                

                             }).ToList();
                var data2 = (from MO in dbcontext.Tbl_Master_Order
                             join OD in dbcontext.Tbl_Order_Details on MO.SO_ID equals OD.AGEN_TRAD_PO_ID
                             join PM in dbcontext.Tbl_Product_Master on OD.PRODUCT_ID equals PM.P_ID
                             join b in dbcontext.tbl_LookUp on PM.P_UOM equals b.LU_Code
                             into m
                             from n in m.DefaultIfEmpty()
                             join MU in dbcontext.Tbl_Master_User on MO.SO_SalesPersonID equals MU.USER_ID
                             join CD in dbcontext.Tbl_Master_CompanyDetails on MO.SO_CutomerID equals CD.COM_ID
                             join SCD in dbcontext.Tbl_Master_CompanyDetails on MO.SO_SupplierID equals SCD.COM_ID
                             into x
                             from y in x.DefaultIfEmpty()
                             where MO.SO_ID == enqId && n.LU_Type == 2
                             select new Tbl_Order_Details_CM
                             {
                                 ArticleNo = PM.P_ArticleNo,
                                 AGEN_TRAD_PO = OD.AGEN_TRAD_PO,
                                 PRODUCT_Name = PM.P_Name,
                                 QUANTITY = OD.QUANTITY,
                                 DiscountPer = OD.DiscountPer,
                                 UOM_NAME = n.LU_Description,
                                 SO_OrderDate = MO.SO_OrderDate,
                                 SO_ORGID = MO.SO_ORGID,
                                 SO_OrderType = MO.SO_OrderType,
                                 SO_CutomerID = MO.SO_CutomerID,
                                 SO_SupplierID = MO.SO_SupplierID,
                                 SO_CusPONO = MO.SO_CusPONO,
                                 SO_CusPODate = MO.SO_CusPODate,
                                 SO_SupSCNO = MO.SO_SupSCNO,
                                 SO_SupSCDate = MO.SO_SupSCDate,
                                 SO_CusPaymentTermID = MO.SO_CusPaymentTermID,
                                 SO_CusDeliveryTerms = MO.SO_CusDeliveryTerms,
                                 SO_Commision = MO.SO_Commision,
                                 SO_Remarks = MO.SO_Remarks,
                                 OrderDescription=OD.OrderDescription,
                                 PACKING = OD.PACKING,
                                 SHORT_NAME = PM.P_ShortName,
                                 PRICE = OD.PRICE,
                                 USER_NAME = MU.USER_NAME,
                                 CUSTOMER_NAME = CD.COM_NAME,
                                 SUPPLIER_NAME = y.COM_NAME,
                                 SO_Code = MO.SO_Code,
                                 DesignDetail=OD.DesignDetail,
                                 CustomerDesc=OD.CustomerDes

                             }).ToList();
                string path = "";
                if(lang=="E")
                {
                    for (int i = 0; i < data1.Count; i++)
                    {

                         
                        var doc1 = new iTextSharp.text.Document(PageSize.A4, 30, 25, 130, 90);
                        string subPath = "~/Sales/PDFList/Order/" + data1[i].SO_Code + "/";
                        bool exists = System.IO.Directory.Exists(HttpContext.Server.MapPath(subPath));
                        if (!exists)
                            System.IO.Directory.CreateDirectory(HttpContext.Server.MapPath(subPath));

                        FileStream output = null;
                        bool fileReadProblem = false;
                        try
                        {
                            if (System.IO.File.Exists(subPath + data1[i].SO_Code + ".pdf"))
                            {
                                System.IO.File.Delete(subPath + data1[i].SO_Code + ".pdf");
                            }
                        }
                        catch(System.IO.IOException ex)
                        {
                            fileReadProblem = true;
                        }
                        if (fileReadProblem)
                        {
                            output = new FileStream(Server.MapPath(subPath + data1[i].SO_Code + "_" + Guid.NewGuid() + ".pdf"), FileMode.Create);
                        }
                        else
                        {
                            output = new FileStream(Server.MapPath(subPath + data1[i].SO_Code + ".pdf"), FileMode.Create);
                        }

                        var writer = PdfWriter.GetInstance(doc1, output);
                        writer.PageEvent = new pdffooterclass();
                        //PdfWriter.GetInstance(doc1, new FileStream(Request.PhysicalApplicationPath + "\\Invoice_Statement.pdf", FileMode.Create));
                        doc1.Open();
                        path = output.Name;
                        //font size change from default  added by gv on 12/12/18
                        FontFactory.RegisterDirectories();
                        Font font = new Font(FontFactory.GetFont("Arial", 10, Font.NORMAL));
                        Font fontsmall = new Font(FontFactory.GetFont("Arial", 9, Font.NORMAL));
                        Font fontsmall1 = new Font(FontFactory.GetFont("Arial", 10, Font.NORMAL| Font.UNDERLINE));
                        Font Fontbigger = new Font(FontFactory.GetFont("Arial", 20, Font.BOLD));
                        Font Fontsmaller = new Font(FontFactory.GetFont("Arial", 10, Font.BOLD));
                        Font Fontsmaller1 = new Font(FontFactory.GetFont("Arial", 12, Font.BOLD));

                        PdfPTable table1 = new PdfPTable(1);
                        table1.DefaultCell.Border = 0;
                        table1.WidthPercentage = 100f;

                        PdfPCell Title = new PdfPCell();
                        Title.Border = 0;

                        Title.AddElement(new Paragraph(new Chunk("Eurotextiles GmbH & Co. KG,Mammolshainer Weg 14,61462 Königstein Ts.", fontsmall1)));
                        Title.VerticalAlignment = 2;
                        Title.PaddingTop = 1.0f;
                        Title.PaddingBottom = 3.0f;
                        table1.AddCell(Title);
                        Paragraph pg2 = new Paragraph();
                        Phrase phraseConstant2 = new Phrase("" + data1[i].CUSTOMER_NAME + "\n", font);
                        Phrase phraseConstant3 = new Phrase("" + data1[i].Street + "\n", font);
                        Phrase phraseConstant4 = new Phrase("" + data1[i].CityState + "\n", font);
                        Phrase phraseConstant5 = new Phrase("" + data1[i].CountryZip + "\n", font);
                        pg2.Add(phraseConstant2);
                        pg2.Add(phraseConstant3);
                        pg2.Add(phraseConstant4);
                        pg2.Add(phraseConstant5);
                        PdfPCell cell21 = new PdfPCell(pg2);
                        cell21.HorizontalAlignment = 0;
                        cell21.PaddingTop = 1.0f;
                        cell21.PaddingLeft = 1.0f;
                        cell21.Border = 0;
                        table1.AddCell(cell21);
                        doc1.Add(table1);

                        PdfPTable table2 = new PdfPTable(3);
                        table2.WidthPercentage = 100f;
                        float[] widthsvalforcus = new float[] { 13f, 4f, 5f };
                        table2.TotalWidth = 100f;
                        table2.WidthPercentage = 100f;
                        table2.SetWidths(widthsvalforcus);

                        Phrase emp1 = new Phrase("", font);
                        PdfPCell cell26emp = new PdfPCell(emp1);
                        cell26emp.Border = 0;
                        cell26emp.HorizontalAlignment = 2;
                        cell26emp.PaddingBottom = 2.5f;
                        table2.AddCell(cell26emp);
                        Phrase cuscode = new Phrase("Customer Code:", font);
                        PdfPCell cell26 = new PdfPCell(cuscode);
                        cell26.Border = 0;
                        cell26.HorizontalAlignment = 0;
                        cell26.PaddingBottom = 2.5f;
                        table2.AddCell(cell26);
                        Phrase cuscodeval = new Phrase("" + data1[i].SO_CutomerID + "", font);
                        PdfPCell cell26val = new PdfPCell(cuscodeval);
                        cell26val.Border = 0;
                        cell26val.HorizontalAlignment = 0;
                        cell26val.PaddingBottom = 2.5f;
                        table2.AddCell(cell26val);

                        Phrase emp2 = new Phrase("", font);
                        PdfPCell cell26emp1 = new PdfPCell(emp2);
                        cell26emp1.Border = 0;
                        cell26emp1.HorizontalAlignment = 0;
                        cell26emp1.PaddingBottom = 2.5f;
                        table2.AddCell(cell26emp1);
                        Phrase Processby = new Phrase("Processed By:", font);
                        PdfPCell cell26Processby = new PdfPCell(Processby);
                        cell26Processby.Border = 0;
                        cell26Processby.HorizontalAlignment = 0;
                        cell26Processby.PaddingBottom = 2.5f;
                        table2.AddCell(cell26Processby);
                        Phrase cuscodeval1 = new Phrase("" + data1[i].salesPersonName + "", font);
                        PdfPCell cell26Processby1 = new PdfPCell(cuscodeval1);
                        cell26Processby1.Border = 0;
                        cell26Processby1.HorizontalAlignment = 0;
                        cell26Processby1.PaddingBottom = 2.5f;
                        table2.AddCell(cell26Processby1);

                        Phrase emp3 = new Phrase("", font);
                        PdfPCell cell26emp2 = new PdfPCell(emp3);
                        cell26emp2.Border = 0;
                        cell26emp2.HorizontalAlignment = 2;
                        cell26emp2.PaddingBottom = 2.5f;
                        table2.AddCell(cell26emp2);
                        Phrase Datecell = new Phrase("Date:", font);
                        PdfPCell cell26Datecell = new PdfPCell(Datecell);
                        cell26Datecell.Border = 0;
                        cell26Datecell.HorizontalAlignment = 0;
                        cell26Datecell.PaddingBottom = 2.5f;
                        table2.AddCell(cell26Datecell);
                        Phrase cuscodeval2 = new Phrase("" + data1[i].SO_OrderDate.ToString("dd-MM-yyyy") + "", font);
                        PdfPCell cell26Processby2 = new PdfPCell(cuscodeval2);
                        cell26Processby2.Border = 0;
                        cell26Processby2.HorizontalAlignment = 0;
                        cell26Processby2.PaddingBottom = 2.5f;
                        table2.AddCell(cell26Processby2);

                        doc1.Add(table2);
                        PdfPTable contenttable = new PdfPTable(1);
                        contenttable.TotalWidth = 100f;
                        contenttable.WidthPercentage = 100f;
                        Paragraph pp1con = new Paragraph();
                        Phrase phar1con = new Phrase("Order confirmation", Fontsmaller1);
                        pp1con.Add(phar1con);
                        PdfPCell cell29Con = new PdfPCell(pp1con);
                        //cell29Con.AddElement(new Paragraph(new Chunk("" , Fontsmaller)));
                        cell29Con.PaddingTop = 4.5f;
                        cell29Con.HorizontalAlignment = 1;
                        cell29Con.PaddingBottom = 5.5f;
                        cell29Con.Border = 0;
                        contenttable.AddCell(cell29Con);
                        PdfPCell cell29 = new PdfPCell();
                        cell29.AddElement(new Paragraph(new Chunk("Order confirmation No:" + data1[i].SO_Code + "", Fontsmaller)));
                        cell29.PaddingTop = 6.5f;
                        cell29.PaddingBottom = 20.5f;
                        cell29.Border = 0;
                        contenttable.AddCell(cell29);
                        doc1.Add(contenttable);
                        PdfPTable table4 = new PdfPTable(7);
                        float[] widths1 = new float[] { 5f, 10f, 10f, 40f, 10f, 10f, 13f };
                        table4.TotalWidth = 100f;
                        table4.WidthPercentage = 100f;
                        table4.HeaderRows = 1;
                        table4.SetWidths(widths1);

                        Phrase phraseConstantde1 = new Phrase("S.No", Fontsmaller);
                        PdfPCell cell41 = new PdfPCell(phraseConstantde1);

                        // cell41.AddElement(new Paragraph(new Chunk("Item", Fontsmaller)));

                        cell41.HorizontalAlignment = 1;
                        cell41.PaddingTop = 2.5f;
                        cell41.PaddingBottom = 2.5f;

                        table4.AddCell(cell41);
                        Phrase phraseConstantde2 = new Phrase("Quantity", Fontsmaller);
                        PdfPCell cell42 = new PdfPCell(phraseConstantde2);
                        cell42.Colspan = 2;
                        //cell42.AddElement(new Paragraph(new Chunk("Qty", Fontsmaller)));
                        cell42.HorizontalAlignment = 1;
                        cell42.PaddingTop = 2.5f;
                        cell42.PaddingBottom = 2.5f;

                        table4.AddCell(cell42);
                        Phrase phraseConstantde3 = new Phrase("Product Description", Fontsmaller);
                        PdfPCell cell421 = new PdfPCell(phraseConstantde3);
                        cell421.HorizontalAlignment = 1;
                        //cell421.AddElement(new Paragraph(new Chunk("UOM", Fontsmaller)));
                        cell421.PaddingTop = 2.5f;
                        cell421.PaddingBottom = 2.5f;

                        table4.AddCell(cell421);
                        Phrase phraseConstantde4 = new Phrase("Price", Fontsmaller);
                        PdfPCell cell431 = new PdfPCell(phraseConstantde4);
                        cell431.HorizontalAlignment = 1;
                       // cell431.Colspan = 2;
                        //cell431.AddElement(new Paragraph(new Chunk("Product Name", Fontsmaller)));

                        cell431.PaddingTop = 2.5f;
                        cell431.PaddingBottom = 2.5f;

                        table4.AddCell(cell431);
                        Phrase phraseConstantde4d = new Phrase("Discount", Fontsmaller);
                        PdfPCell cell431d = new PdfPCell(phraseConstantde4d);
                        cell431d.HorizontalAlignment = 1;
                       // cell431d.Colspan = 2;
                        //cell431.AddElement(new Paragraph(new Chunk("Product Name", Fontsmaller)));

                        cell431d.PaddingTop = 2.5f;
                        cell431d.PaddingBottom = 2.5f;

                        table4.AddCell(cell431d);
                        Phrase phraseConstantde5 = new Phrase("Total", Fontsmaller);
                        PdfPCell cell43 = new PdfPCell(phraseConstantde5);
                        cell43.HorizontalAlignment = 1;

                        // cell43.AddElement(new Paragraph(new Chunk("Description", Fontsmaller)));

                        cell43.PaddingTop = 2.5f;
                        cell43.PaddingBottom = 2.5f;

                        table4.AddCell(cell43);
                        decimal? total = 0;
                        for (int j = 0; j < data2.Count; j++)
                        {
                            Paragraph Snopp = new Paragraph();
                            Phrase Snophar = new Phrase("" + (j + 1) + "\n", font);
                            Snopp.Add(Snophar);
                            PdfPCell cell51 = new PdfPCell(Snopp);
                            cell51.HorizontalAlignment = 1;
                            //cell51.AddElement(new Paragraph(new Chunk("" + (j + 1) + "", font)));

                            // cell51.PaddingTop = 2.5f;
                            // cell51.PaddingBottom = 2.5f;

                            table4.AddCell(cell51);
                            Paragraph qtypp = new Paragraph();
                            Phrase qtyphar = new Phrase("" + Convert.ToDecimal(data2[j].QUANTITY).ToString("N2", CultureInfo.CreateSpecificCulture("de-DE")) + "\n", font);
                            qtypp.Add(qtyphar);
                            PdfPCell cell52 = new PdfPCell(qtypp);
                            cell52.HorizontalAlignment = 2;
                          //  cell52.PaddingTop = 2.5f;
                           // cell52.PaddingBottom = 2.5f;

                            table4.AddCell(cell52);
                            Paragraph uompp = new Paragraph();
                            Phrase uomphar = new Phrase("" + data2[j].UOM_NAME + "\n", font);
                            uompp.Add(uomphar);
                            PdfPCell uomcell = new PdfPCell(uompp);

                           // uomcell.AddElement(new Paragraph(new Chunk("" + data2[j].UOM_NAME + "", font)));
                            uomcell.HorizontalAlignment = 0;
                           // uomcell.PaddingTop = 2.5f;
                           // uomcell.PaddingBottom = 2.5f;

                            table4.AddCell(uomcell);

                            if(data1[i].SO_OrderType==2)
                            {
                                Paragraph Productpp = new Paragraph();
                                Phrase Productphar = new Phrase("" + data2[j].PRODUCT_Name + "\n", font);
                                Phrase Productphar1 = new Phrase("" + data2[j].DesignDetail + "\n", font);
                                Phrase Productphar3 = new Phrase("" + data2[j].OrderDescription + "\n", font);
                                Phrase Productphar2 = new Phrase("" + data2[j].CustomerDesc + "\n", font);
                                Productpp.Add(Productphar);
                                
                                Productpp.Add(Productphar3);
                                Productpp.Add(Productphar2);
                                Productpp.Add(Productphar1);
                                PdfPCell cell53 = new PdfPCell(Productpp);
                               // cell53.AddElement(new Paragraph(new Chunk("" + data2[j].PRODUCT_Name + "\n", font)));
                               // cell53.AddElement(new Paragraph(new Chunk("" + data2[j].DesignDetail + "\n", font)));
                                cell53.HorizontalAlignment = 0;
                                  cell53.PaddingTop = 0f;
                                // cell53.PaddingBottom = 2.5f;

                                table4.AddCell(cell53);
                            }
                            else
                            {
                                Paragraph Productpp = new Paragraph();
                                Phrase Productphar = new Phrase("" + data2[j].PRODUCT_Name + "\n", font);
                                Phrase Productphar3 = new Phrase("" + data2[j].OrderDescription + "\n", font);
                                Phrase Productphar2 = new Phrase("" + data2[j].CustomerDesc + "\n", font);
                                Productpp.Add(Productphar);
                                Productpp.Add(Productphar3);
                                Productpp.Add(Productphar2);
                                PdfPCell cell53 = new PdfPCell(Productpp);

                               // cell53.AddElement(new Paragraph(new Chunk("" + data2[j].PRODUCT_Name + "", font)));
                                cell53.HorizontalAlignment = 0;
                                cell53.PaddingTop = 0f;
                                //cell53.PaddingTop = 2.5f;
                                // cell53.PaddingBottom = 2.5f;

                                table4.AddCell(cell53);
                            }

                            if (data1[i].SO_OrderType == 2 || data1[i].SO_OrderType == 3)
                            {
                                Paragraph pp = new Paragraph();
                                Phrase phar = new Phrase("" + Convert.ToDecimal(data2[j].PRICE).ToString("c2", CultureInfo.CreateSpecificCulture("de-DE")) + "\n", font);
                                pp.Add(phar);
                                PdfPCell cell541 = new PdfPCell(pp);
                                //cell541.AddElement(pp);
                                // cell541.Colspan = 2;
                                cell541.HorizontalAlignment = 2;
                                cell541.PaddingTop = 2.5f;
                                cell541.PaddingBottom = 2.5f;

                                table4.AddCell(cell541);
                                decimal? DisPer = 0;
                                if(data2[j].DiscountPer==0)
                                {
                                    DisPer = 0;
                                }
                                else
                                {
                                    DisPer = data2[j].DiscountPer;
                                }
                                Paragraph ppd = new Paragraph();
                                Phrase phard = new Phrase("" + DisPer + "\n", font);
                                ppd.Add(phard);
                                PdfPCell cell541d = new PdfPCell(ppd);
                                //cell541.AddElement(pp);
                                //cell541.Colspan = 2;
                                cell541d.HorizontalAlignment = 2;
                                cell541d.PaddingTop = 2.5f;
                                cell541d.PaddingBottom = 2.5f;

                                table4.AddCell(cell541d);
                                decimal discountAmt = ((Convert.ToDecimal(data2[j].PRICE) * Convert.ToDecimal(data2[j].QUANTITY)) * Convert.ToDecimal(DisPer) / 100);
                                Paragraph pp12 = new Paragraph();
                                Phrase phar12 = new Phrase("" + ((Convert.ToDecimal(data2[j].PRICE) * Convert.ToDecimal(data2[j].QUANTITY)) - discountAmt).ToString("c2", CultureInfo.CreateSpecificCulture("de-DE")) + "\n", font);
                                pp12.Add(phar12);
                                PdfPCell cell54 = new PdfPCell(pp12);
                                cell54.HorizontalAlignment = 2;
                                cell54.PaddingTop = 2.5f;
                                cell54.PaddingBottom = 2.5f;

                                table4.AddCell(cell54);
                                total = total + ((Convert.ToDecimal(data2[j].PRICE) * Convert.ToDecimal(data2[j].QUANTITY)) - discountAmt);
                            }
                            else
                            {
                                Paragraph pp = new Paragraph();
                                Phrase phar = new Phrase("" + Convert.ToDecimal(data2[j].PRICE).ToString("c2", CultureInfo.CreateSpecificCulture("de-DE")) + "\n", font);
                                pp.Add(phar);
                                PdfPCell cell541 = new PdfPCell(pp);
                                //cell541.AddElement(pp);
                                 cell541.Colspan = 2;
                                cell541.HorizontalAlignment = 2;
                                cell541.PaddingTop = 2.5f;
                                cell541.PaddingBottom = 2.5f;

                                table4.AddCell(cell541);

                                Paragraph pp12 = new Paragraph();
                                Phrase phar12 = new Phrase("" + (Convert.ToDecimal(data2[j].PRICE) * Convert.ToDecimal(data2[j].QUANTITY)).ToString("c2", CultureInfo.CreateSpecificCulture("de-DE")) + "\n", font);
                                pp12.Add(phar12);
                                PdfPCell cell54 = new PdfPCell(pp12);
                                cell54.HorizontalAlignment = 2;
                                cell54.PaddingTop = 2.5f;
                                cell54.PaddingBottom = 2.5f;

                                table4.AddCell(cell54);
                                total = total + (Convert.ToDecimal(data2[j].PRICE) * Convert.ToDecimal(data2[j].QUANTITY));
                            }
                            
                          
                        }

                        PdfPCell NetValCell = new PdfPCell();

                        NetValCell.AddElement(new Paragraph(new Chunk("Net Value", font)));
                        NetValCell.Colspan = 6;
                        NetValCell.PaddingTop = 2.5f;
                        NetValCell.PaddingBottom = 2.5f;

                        table4.AddCell(NetValCell);
                        Paragraph pp1 = new Paragraph();
                        Phrase phar1 = new Phrase("" + Convert.ToDecimal(total).ToString("c2", CultureInfo.CreateSpecificCulture("de-DE")) + "\n", font);
                        pp1.Add(phar1);
                        PdfPCell NetValCell1 = new PdfPCell(pp1);
                        NetValCell1.Colspan = 6;
                        NetValCell1.HorizontalAlignment = 2;
                        NetValCell1.VerticalAlignment = 2;
                        NetValCell1.PaddingTop = 2.5f;
                        NetValCell1.PaddingBottom = 2.5f;

                        table4.AddCell(NetValCell1);
                        
                        if(data1[i].Zipcode==82)
                        {
                            PdfPCell inccell = new PdfPCell();
                            if (data1[i].VatPer == null || !taxApplicable)
                                data1[i].VatPer = 0;
                            inccell.AddElement(new Paragraph(new Chunk("Incl" + Convert.ToDecimal(data1[i].VatPer).ToString("0") + " % Value", font)));
                            inccell.Colspan = 6;
                            inccell.PaddingTop = 2.5f;
                            inccell.PaddingBottom = 2.5f;

                            table4.AddCell(inccell);
                            Paragraph pp1inc = new Paragraph();
                            Phrase phar1inc = new Phrase("" + (Convert.ToDecimal(total * data1[i].VatPer / 100).ToString("C2", CultureInfo.CreateSpecificCulture("de-DE"))) + "\n", font);
                            pp1inc.Add(phar1inc);
                            PdfPCell inccell1 = new PdfPCell(pp1inc);
                            inccell1.HorizontalAlignment = 2;
                            inccell1.VerticalAlignment = 2;
                            inccell1.PaddingTop = 2.5f;
                            inccell1.PaddingBottom = 2.5f;

                            table4.AddCell(inccell1);
                        }
                        else
                        {

                            PdfPCell inccell = new PdfPCell();
                            inccell.AddElement(new Paragraph(new Chunk("Incl 0 % Value", font)));
                            inccell.Colspan = 6;
                            inccell.PaddingTop = 2.5f;
                            inccell.PaddingBottom = 2.5f;

                            table4.AddCell(inccell);
                            Paragraph pp1inc = new Paragraph();
                            Phrase phar1inc = new Phrase("" + (Convert.ToDecimal(total * 0 / 100).ToString("C2", CultureInfo.CreateSpecificCulture("de-DE"))) + "\n", font);
                            pp1inc.Add(phar1inc);
                            PdfPCell inccell1 = new PdfPCell(pp1inc);
                            inccell1.HorizontalAlignment = 2;
                            inccell1.PaddingTop = 2.5f;
                            inccell1.PaddingBottom = 2.5f;

                            table4.AddCell(inccell1);

                        }
                        decimal Discountamt=0;

                        if (data1[i].Zipcode==82)
                        {

                            if (data1[i].VatPer == null || !taxApplicable)
                                data1[i].VatPer = 0;

                            var Vatamount = (Convert.ToDecimal(total + ((total * data1[i].VatPer / 100))));
                            Vatamount = (total * data1[i].VatPer / 100)??0;


                            if (data1[i].Discount != 0)
                            {
                                Discountamt = (Convert.ToDecimal(total * data1[i].Discount / 100));
                                PdfPCell AllDiscountcell = new PdfPCell();

                                AllDiscountcell.AddElement(new Paragraph(new Chunk("Discount", font)));
                                AllDiscountcell.Colspan = 6;
                                AllDiscountcell.PaddingTop = 2.5f;
                                AllDiscountcell.PaddingBottom = 2.5f;

                                table4.AddCell(AllDiscountcell);
                               
                                Paragraph pp1discount = new Paragraph();
                                Phrase phar1Discount = new Phrase("" + Discountamt.ToString("C2", CultureInfo.CreateSpecificCulture("de-DE")) + "\n", Fontsmaller);
                                pp1discount.Add(phar1Discount);
                                PdfPCell AllDiscountcellde = new PdfPCell(pp1discount);
                                AllDiscountcellde.HorizontalAlignment = 2;
                    AllDiscountcellde.Colspan = 6;
                    AllDiscountcellde.PaddingTop = 2.5f;
                    AllDiscountcellde.PaddingBottom = 2.5f;
                                AllDiscountcellde.HorizontalAlignment = 2;
                                table4.AddCell(AllDiscountcellde);
                            }
                            PdfPCell vataddcell = new PdfPCell();

                            vataddcell.AddElement(new Paragraph(new Chunk("Total", font)));
                            vataddcell.Colspan = 6;
                            vataddcell.PaddingTop = 2.5f;
                            vataddcell.PaddingBottom = 2.5f;

                            table4.AddCell(vataddcell);
                            Paragraph pp1vat = new Paragraph();
                            Phrase phar1vat = new Phrase("" + ((Convert.ToDecimal(total + Vatamount - Discountamt)).ToString("C2", CultureInfo.CreateSpecificCulture("de-DE"))) + "\n", Fontsmaller);
                            pp1vat.Add(phar1vat);
                            PdfPCell vataddcell1 = new PdfPCell(pp1vat);
                            vataddcell1.HorizontalAlignment = 2;
                            vataddcell1.Colspan = 6;
                            vataddcell1.PaddingTop = 2.5f;
                            vataddcell1.PaddingBottom = 2.5f;

                            table4.AddCell(vataddcell1);
                            
                        }
                        else
                        {
                            var Vatamount = (Convert.ToDecimal(total + ((total * 0/ 100))));
                             Vatamount =  (total * 0/ 100)??0;

                            if (data1[i].Discount != 0)
                            {
                                Discountamt = (Convert.ToDecimal(total * data1[i].Discount / 100));
                                PdfPCell AllDiscountcell = new PdfPCell();

                                AllDiscountcell.AddElement(new Paragraph(new Chunk("Discount", font)));
                                AllDiscountcell.Colspan = 6;
                                AllDiscountcell.PaddingTop = 2.5f;
                                AllDiscountcell.PaddingBottom = 2.5f;
                                
                                table4.AddCell(AllDiscountcell);
                                Paragraph pp1discount = new Paragraph();
                                Phrase phar1Discount = new Phrase("" + Discountamt.ToString("C2", CultureInfo.CreateSpecificCulture("de-DE")) + "\n", Fontsmaller);
                                pp1discount.Add(phar1Discount);
                                PdfPCell AllDiscountcellde = new PdfPCell(pp1discount);
                                AllDiscountcellde.Colspan = 6;
                                AllDiscountcellde.PaddingTop = 2.5f;
                                AllDiscountcellde.PaddingBottom = 2.5f;
                                AllDiscountcellde.HorizontalAlignment = 2;
                                table4.AddCell(AllDiscountcellde);
                            }
                            PdfPCell vataddcell = new PdfPCell();

                            vataddcell.AddElement(new Paragraph(new Chunk("Total", font)));
                            vataddcell.Colspan = 6;
                            vataddcell.PaddingTop = 2.5f;
                            vataddcell.PaddingBottom = 2.5f;

                            table4.AddCell(vataddcell);
                            Paragraph pp1vat = new Paragraph();
                            Phrase phar1vat = new Phrase("" + ((Convert.ToDecimal(total + Vatamount - Discountamt)).ToString("C2", CultureInfo.CreateSpecificCulture("de-DE"))) + "\n", Fontsmaller);
                            pp1vat.Add(phar1vat);
                            PdfPCell vataddcell1 = new PdfPCell(pp1vat);
                            vataddcell1.HorizontalAlignment = 2;
                            vataddcell1.Colspan = 6;
                            vataddcell1.PaddingTop = 2.5f;
                            vataddcell1.PaddingBottom = 2.5f;

                            table4.AddCell(vataddcell1);
                        
                        }
                        doc1.Add(table4);

                        PdfPTable table6 = new PdfPTable(1);
                        PdfPCell cell31 = new PdfPCell();
                        cell31.Border = 0;
                        cell31.AddElement(new Paragraph(new Chunk("", font)));
                        cell31.PaddingTop = 20.5f;
                        cell31.PaddingBottom = 2.5f;
                        table6.AddCell(cell31);

                        PdfPCell cell39 = new PdfPCell();
                        cell39.Border = 0;
                        cell39.AddElement(new Paragraph(""));
                        //cell39.PaddingTop = 280.0f;
                        cell39.PaddingBottom = 2.5f;
                        table6.AddCell(cell39);
                        doc1.Add(table6);
                        
                        PdfPTable table7 = new PdfPTable(1);
                        table7.WidthPercentage = 100f;
                        
                        string[] splitedRemarks=data1[i].SO_Remarks.Split('.');
                        for(int k=0;k<splitedRemarks.Count(); k++)
                        {
                            if(k==0)
                            {
                                PdfPCell cell33re = new PdfPCell();
                                cell33re.AddElement(new Paragraph(new Chunk("Remarks:" + splitedRemarks[k], font)));

                                cell33re.PaddingTop = 2.5f;
                                cell33re.PaddingBottom = 2.5f;
                                cell33re.Border = 0;
                                table7.AddCell(cell33re);
                            }
                            else
                            {
                                if(splitedRemarks[k]!="")
                                {
                                    PdfPCell cell33re = new PdfPCell();
                                    cell33re.AddElement(new Paragraph(new Chunk(splitedRemarks[k], font)));

                                    cell33re.PaddingTop = 2.5f;
                                    cell33re.PaddingBottom = 2.5f;
                                    cell33re.Border = 0;
                                    table7.AddCell(cell33re);
                                }
                                
                            }

                        }
                       

                        PdfPCell cell33 = new PdfPCell();
                      
                        cell33.AddElement(new Paragraph(new Chunk("Payment Terms: " + data1[i].PaymentTermsDescription + "", font)));

                        cell33.PaddingTop = 2.5f;
                        cell33.PaddingBottom = 2.5f;
                        cell33.Border = 0;
                        table7.AddCell(cell33);
                        PdfPCell delitercell = new PdfPCell();

                        //delitercell.AddElement(new Paragraph(new Chunk("Delivery Terms: " + data1[i].SO_CusDeliveryTerms + "", font)));

                        //delitercell.PaddingTop = 2.5f;
                        //delitercell.PaddingBottom = 2.5f;
                        //delitercell.Border = 0;
                        //table7.AddCell(delitercell);
                        string[] splitedDeliveryTerms = data1[i].SO_CusDeliveryTerms.Split('.');
                        for (int k = 0; k < splitedDeliveryTerms.Count(); k++)
                        {
                            if (k == 0)
                            {
                                PdfPCell cell33re = new PdfPCell();
                                cell33re.AddElement(new Paragraph(new Chunk("Delivery Terms:" + splitedDeliveryTerms[k], font)));

                                cell33re.PaddingTop = 2.5f;
                                cell33re.PaddingBottom = 2.5f;
                                cell33re.Border = 0;
                                table7.AddCell(cell33re);
                            }
                            else
                            {
                                if (splitedDeliveryTerms[k] != "")
                                {
                                    PdfPCell cell33re = new PdfPCell();
                                    cell33re.AddElement(new Paragraph(new Chunk(splitedDeliveryTerms[k], font)));

                                    cell33re.PaddingTop = 2.5f;
                                    cell33re.PaddingBottom = 2.5f;
                                    cell33re.Border = 0;
                                    table7.AddCell(cell33re);
                                }

                            }

                        }
                        PdfPCell Linecell = new PdfPCell();

                        Linecell.AddElement(new Paragraph(new Chunk("___________________________", font)));

                        Linecell.PaddingTop = 45.5f;
                        Linecell.PaddingBottom = 0f;
                        Linecell.Border = 0;
                        table7.AddCell(Linecell);
                        PdfPCell signcell = new PdfPCell();

                        signcell.AddElement(new Paragraph(new Chunk("Eurotextiles GmbH & Co. KG", font)));

                        signcell.PaddingTop =0f ;
                        signcell.PaddingBottom = 2.5f;
                        signcell.Border = 0;
                        table7.AddCell(signcell);
                        PdfPCell line1 = new PdfPCell();

                        line1.AddElement(new Paragraph(new Chunk("Our general terms of business apply.", font)));

                        line1.PaddingTop = 6.5f;
                        line1.PaddingBottom = 2.5f;
                        line1.Border = 0;
                        table7.AddCell(line1);
                        PdfPCell line2 = new PdfPCell();

                        line2.AddElement(new Paragraph(new Chunk("Any quality/quantity variations have to be notified to us before using the goods but not later than 7 days on receipt of the goods.", font)));

                        line2.PaddingTop = 2.5f;
                        line2.PaddingBottom = 2.5f;
                        line2.Border = 0;
                        table7.AddCell(line2);
                        PdfPCell line3 = new PdfPCell();

                        line3.AddElement(new Paragraph(new Chunk("No claims will be accepted after washing/using the goods.", font)));

                        line3.PaddingTop = 2.5f;
                        line3.PaddingBottom = 2.5f;
                        line3.Border = 0;
                        table7.AddCell(line3);
                        doc1.Add(table7);

                        doc1.Close();

                    }
                }

                if (lang == "G")
                {
                    for (int i = 0; i < data1.Count; i++)
                    {

                        var doc1 = new iTextSharp.text.Document(PageSize.A4, 20, 20, 130, 90);
                        string subPath = "~/Sales/PDFList/Order/" + data1[i].SO_Code + "/";
                        bool exists = System.IO.Directory.Exists(HttpContext.Server.MapPath(subPath));
                        if (!exists)
                            System.IO.Directory.CreateDirectory(HttpContext.Server.MapPath(subPath));
                        var output = new FileStream(Server.MapPath(subPath + data1[i].SO_Code + ".pdf"), FileMode.Create);
                        var writer = PdfWriter.GetInstance(doc1, output);
                        writer.PageEvent = new pdffooterclass();
                        //PdfWriter.GetInstance(doc1, new FileStream(Request.PhysicalApplicationPath + "\\Invoice_Statement.pdf", FileMode.Create));
                        doc1.Open();
                        path = output.Name;
                        //font size change from default  added by gv on 12/12/18
                        FontFactory.RegisterDirectories();
                        Font font = new Font(FontFactory.GetFont("Arial", 10, Font.NORMAL));
                        Font fontsmall = new Font(FontFactory.GetFont("Arial", 9, Font.NORMAL));
                        Font fontsmall1 = new Font(FontFactory.GetFont("Arial", 10, Font.NORMAL | Font.UNDERLINE));
                        Font Fontbiggest = new Font(FontFactory.GetFont("Arial", 50, Font.BOLD, Color.BLUE));
                        Font Fontbigger = new Font(FontFactory.GetFont("Arial", 20, Font.BOLD));
                        Font Fontsmaller = new Font(FontFactory.GetFont("Arial", 10, Font.BOLD));
                        Font Fontsmaller1 = new Font(FontFactory.GetFont("Arial", 12, Font.BOLD));



                        PdfPTable table1 = new PdfPTable(1);
                        table1.DefaultCell.Border = 0;
                        table1.WidthPercentage = 100f;

                        PdfPCell Title = new PdfPCell();
                        Title.Border = 0;
                        Title.AddElement(new Paragraph(new Chunk("Eurotextiles GmbH & Co. KG.Mammolshainer Weg 14,61462 Königstein", fontsmall1)));
                        Title.VerticalAlignment = 2;
                        Title.PaddingTop = 1.0f;
                        Title.PaddingBottom = 3.0f;
                        table1.AddCell(Title);
                        Paragraph pg2 = new Paragraph();
                        Phrase phraseConstant2 = new Phrase("" + data1[i].CUSTOMER_NAME + "\n", font);
                        Phrase phraseConstant3 = new Phrase("" + data1[i].Street + "\n", font);
                        Phrase phraseConstant4 = new Phrase("" + data1[i].CityState + "\n", font);
                        Phrase phraseConstant5 = new Phrase("" + data1[i].CountryZip + "\n", font);
                        pg2.Add(phraseConstant2);
                        pg2.Add(phraseConstant3);
                        pg2.Add(phraseConstant4);
                        pg2.Add(phraseConstant5);
                        PdfPCell cell21 = new PdfPCell(pg2);
                        cell21.HorizontalAlignment = 0;
                        cell21.PaddingTop = 1.0f;
                        cell21.PaddingLeft = 1.0f;
                        cell21.Border = 0;
                        table1.AddCell(cell21);
                        doc1.Add(table1);

                        PdfPTable table2 = new PdfPTable(3);
                        table2.WidthPercentage = 100f;
                        float[] widthsvalforcus = new float[] { 13f, 4f, 5f };
                        table2.TotalWidth = 100f;
                        table2.WidthPercentage = 100f;
                        table2.SetWidths(widthsvalforcus);

                        Phrase emp1 = new Phrase("", font);
                        PdfPCell cell26emp = new PdfPCell(emp1);
                        cell26emp.Border = 0;
                        cell26emp.HorizontalAlignment = 2;
                        cell26emp.PaddingBottom = 2.5f;
                        table2.AddCell(cell26emp);
                        Phrase cuscode = new Phrase("Customer Code:", font);
                        PdfPCell cell26 = new PdfPCell(cuscode);
                        cell26.Border = 0;
                        cell26.HorizontalAlignment = 0;
                        cell26.PaddingBottom = 2.5f;
                        table2.AddCell(cell26);
                        Phrase cuscodeval = new Phrase("" + data1[i].SO_CutomerID + "", font);
                        PdfPCell cell26val = new PdfPCell(cuscodeval);
                        cell26val.Border = 0;
                        cell26val.HorizontalAlignment = 0;
                        cell26val.PaddingBottom = 2.5f;
                        table2.AddCell(cell26val);

                        Phrase emp2 = new Phrase("", font);
                        PdfPCell cell26emp1 = new PdfPCell(emp2);
                        cell26emp1.Border = 0;
                        cell26emp1.HorizontalAlignment = 2;
                        cell26emp1.PaddingBottom = 2.5f;
                        table2.AddCell(cell26emp1);
                        Phrase Processby = new Phrase("Processed By:", font);
                        PdfPCell cell26Processby = new PdfPCell(Processby);
                        cell26Processby.Border = 0;
                        cell26Processby.HorizontalAlignment = 0;
                        cell26Processby.PaddingBottom = 2.5f;
                        table2.AddCell(cell26Processby);
                        Phrase cuscodeval1 = new Phrase("" + data1[i].salesPersonName + "", font);
                        PdfPCell cell26Processby1 = new PdfPCell(cuscodeval1);
                        cell26Processby1.Border = 0;
                        cell26Processby1.HorizontalAlignment = 0;
                        cell26Processby1.PaddingBottom = 2.5f;
                        table2.AddCell(cell26Processby1);

                        Phrase emp3 = new Phrase("", font);
                        PdfPCell cell26emp2 = new PdfPCell(emp3);
                        cell26emp2.Border = 0;
                        cell26emp2.HorizontalAlignment = 0;
                        cell26emp2.PaddingBottom = 2.5f;
                        table2.AddCell(cell26emp2);
                        Phrase Datecell = new Phrase("Date:", font);
                        PdfPCell cell26Datecell = new PdfPCell(Datecell);
                        cell26Datecell.Border = 0;
                        cell26Datecell.HorizontalAlignment = 0;
                        cell26Datecell.PaddingBottom = 2.5f;
                        table2.AddCell(cell26Datecell);
                        Phrase cuscodeval2 = new Phrase("" + data1[i].SO_OrderDate.ToString("dd-MM-yyyy") + "", font);
                        PdfPCell cell26Processby2 = new PdfPCell(cuscodeval2);
                        cell26Processby2.Border = 0;
                        cell26Processby2.HorizontalAlignment = 0;
                        cell26Processby2.PaddingBottom = 2.5f;
                        table2.AddCell(cell26Processby2);

                        doc1.Add(table2);
                        PdfPTable contenttable = new PdfPTable(1);
                        contenttable.TotalWidth = 100f;
                        contenttable.WidthPercentage = 100f;
                        Paragraph pp1con = new Paragraph();
                        Phrase phar1con = new Phrase("Auftragsbestätigung", Fontsmaller1);
                        pp1con.Add(phar1con);
                        PdfPCell cell29Con = new PdfPCell(pp1con);
                        //cell29Con.AddElement(new Paragraph(new Chunk("" , Fontsmaller)));
                        cell29Con.PaddingTop = 4.5f;
                        cell29Con.HorizontalAlignment = 1;
                        cell29Con.PaddingBottom = 5.5f;
                        cell29Con.Border = 0;
                        contenttable.AddCell(cell29Con);
                        PdfPCell cell29 = new PdfPCell();
                        cell29.AddElement(new Paragraph(new Chunk("Order confirmation No:" + data1[i].SO_Code + "", Fontsmaller)));
                        cell29.PaddingTop = 6.5f;
                        cell29.PaddingBottom = 20.5f;
                        cell29.Border = 0;
                        contenttable.AddCell(cell29);
                        doc1.Add(contenttable);
                        PdfPTable table4 = new PdfPTable(7);
                        float[] widths1 = new float[] { 5f, 10f, 10f, 40f, 10f, 10f, 13f };
                        table4.TotalWidth = 100f;
                        table4.WidthPercentage = 100f;
                        table4.HeaderRows = 1;
                        table4.SetWidths(widths1);

                        Phrase phraseConstantde1 = new Phrase("S.No", Fontsmaller);
                        PdfPCell cell41 = new PdfPCell(phraseConstantde1);

                        // cell41.AddElement(new Paragraph(new Chunk("Item", Fontsmaller)));

                        cell41.HorizontalAlignment = 1;
                        cell41.PaddingTop = 2.5f;
                        cell41.PaddingBottom = 2.5f;

                        table4.AddCell(cell41);
                        Phrase phraseConstantde2 = new Phrase("Quantity", Fontsmaller);
                        PdfPCell cell42 = new PdfPCell(phraseConstantde2);
                        cell42.Colspan = 2;
                        //cell42.AddElement(new Paragraph(new Chunk("Qty", Fontsmaller)));
                        cell42.HorizontalAlignment = 1;
                        cell42.PaddingTop = 2.5f;
                        cell42.PaddingBottom = 2.5f;

                        table4.AddCell(cell42);
                        Phrase phraseConstantde3 = new Phrase("Product Description", Fontsmaller);
                        PdfPCell cell421 = new PdfPCell(phraseConstantde3);
                        cell421.HorizontalAlignment = 1;
                        //cell421.AddElement(new Paragraph(new Chunk("UOM", Fontsmaller)));
                        cell421.PaddingTop = 2.5f;
                        cell421.PaddingBottom = 2.5f;

                        table4.AddCell(cell421);
                        Phrase phraseConstantde4 = new Phrase("Price", Fontsmaller);
                        PdfPCell cell431 = new PdfPCell(phraseConstantde4);
                        cell431.HorizontalAlignment = 1;
                        // cell431.Colspan = 2;
                        //cell431.AddElement(new Paragraph(new Chunk("Product Name", Fontsmaller)));

                        cell431.PaddingTop = 2.5f;
                        cell431.PaddingBottom = 2.5f;

                        table4.AddCell(cell431);
                        Phrase phraseConstantde4d = new Phrase("Discount", Fontsmaller);
                        PdfPCell cell431d = new PdfPCell(phraseConstantde4d);
                        cell431d.HorizontalAlignment = 1;
                        // cell431d.Colspan = 2;
                        //cell431.AddElement(new Paragraph(new Chunk("Product Name", Fontsmaller)));

                        cell431d.PaddingTop = 2.5f;
                        cell431d.PaddingBottom = 2.5f;

                        table4.AddCell(cell431d);
                        Phrase phraseConstantde5 = new Phrase("Total", Fontsmaller);
                        PdfPCell cell43 = new PdfPCell(phraseConstantde5);
                        cell43.HorizontalAlignment = 1;

                        // cell43.AddElement(new Paragraph(new Chunk("Description", Fontsmaller)));

                        cell43.PaddingTop = 2.5f;
                        cell43.PaddingBottom = 2.5f;

                        table4.AddCell(cell43);
                        decimal? total = 0;
                        for (int j = 0; j < data2.Count; j++)
                        {
                            Paragraph Snopp = new Paragraph();
                            Phrase Snophar = new Phrase("" + (j + 1) + "\n", font);
                            Snopp.Add(Snophar);
                            PdfPCell cell51 = new PdfPCell(Snopp);
                            cell51.HorizontalAlignment = 1;
                            //cell51.AddElement(new Paragraph(new Chunk("" + (j + 1) + "", font)));

                            // cell51.PaddingTop = 2.5f;
                            // cell51.PaddingBottom = 2.5f;

                            table4.AddCell(cell51);
                            Paragraph qtypp = new Paragraph();
                            Phrase qtyphar = new Phrase("" + Convert.ToDecimal(data2[j].QUANTITY).ToString("N2", CultureInfo.CreateSpecificCulture("de-DE")) + "\n", font);
                            qtypp.Add(qtyphar);
                            PdfPCell cell52 = new PdfPCell(qtypp);
                            cell52.HorizontalAlignment = 2;
                            //  cell52.PaddingTop = 2.5f;
                            // cell52.PaddingBottom = 2.5f;

                            table4.AddCell(cell52);
                            Paragraph uompp = new Paragraph();
                            Phrase uomphar = new Phrase("" + data2[j].UOM_NAME + "\n", font);
                            uompp.Add(uomphar);
                            PdfPCell uomcell = new PdfPCell(uompp);

                            // uomcell.AddElement(new Paragraph(new Chunk("" + data2[j].UOM_NAME + "", font)));
                            uomcell.HorizontalAlignment = 0;
                            // uomcell.PaddingTop = 2.5f;
                            // uomcell.PaddingBottom = 2.5f;

                            table4.AddCell(uomcell);

                            if (data1[i].SO_OrderType == 2)
                            {
                                Paragraph Productpp = new Paragraph();
                                Phrase Productphar = new Phrase("" + data2[j].PRODUCT_Name + "\n", font);
                                Phrase Productphar1 = new Phrase("" + data2[j].DesignDetail + "\n", font);
                                Phrase Productphar3 = new Phrase("" + data2[j].OrderDescription + "\n", font);
                                Phrase Productphar2 = new Phrase("" + data2[j].CustomerDesc + "\n", font);
                                Productpp.Add(Productphar);

                                Productpp.Add(Productphar3);
                                Productpp.Add(Productphar2);
                                Productpp.Add(Productphar1);
                                PdfPCell cell53 = new PdfPCell(Productpp);
                                // cell53.AddElement(new Paragraph(new Chunk("" + data2[j].PRODUCT_Name + "\n", font)));
                                // cell53.AddElement(new Paragraph(new Chunk("" + data2[j].DesignDetail + "\n", font)));
                                cell53.HorizontalAlignment = 0;
                                cell53.PaddingTop = 0f;
                                // cell53.PaddingBottom = 2.5f;

                                table4.AddCell(cell53);
                            }
                            else
                            {
                                Paragraph Productpp = new Paragraph();
                                Phrase Productphar = new Phrase("" + data2[j].PRODUCT_Name + "\n", font);
                                Phrase Productphar3 = new Phrase("" + data2[j].OrderDescription + "\n", font);
                                Phrase Productphar2 = new Phrase("" + data2[j].CustomerDesc + "\n", font);
                                Productpp.Add(Productphar);
                                Productpp.Add(Productphar3);
                                Productpp.Add(Productphar2);
                                PdfPCell cell53 = new PdfPCell(Productpp);

                                // cell53.AddElement(new Paragraph(new Chunk("" + data2[j].PRODUCT_Name + "", font)));
                                cell53.HorizontalAlignment = 0;
                                cell53.PaddingTop = 0f;
                                //cell53.PaddingTop = 2.5f;
                                // cell53.PaddingBottom = 2.5f;

                                table4.AddCell(cell53);
                            }

                            if (data1[i].SO_OrderType == 2 || data1[i].SO_OrderType == 3)
                            {
                                Paragraph pp = new Paragraph();
                                Phrase phar = new Phrase("" + Convert.ToDecimal(data2[j].PRICE).ToString("c2", CultureInfo.CreateSpecificCulture("de-DE")) + "\n", font);
                                pp.Add(phar);
                                PdfPCell cell541 = new PdfPCell(pp);
                                //cell541.AddElement(pp);
                                // cell541.Colspan = 2;
                                cell541.HorizontalAlignment = 2;
                                cell541.PaddingTop = 2.5f;
                                cell541.PaddingBottom = 2.5f;

                                table4.AddCell(cell541);
                                decimal? DisPer = 0;
                                if (data2[j].DiscountPer == 0)
                                {
                                    DisPer = 0;
                                }
                                else
                                {
                                    DisPer = data2[j].DiscountPer;
                                }
                                Paragraph ppd = new Paragraph();
                                Phrase phard = new Phrase("" + DisPer + "\n", font);
                                ppd.Add(phard);
                                PdfPCell cell541d = new PdfPCell(ppd);
                                //cell541.AddElement(pp);
                                //cell541.Colspan = 2;
                                cell541d.HorizontalAlignment = 2;
                                cell541d.PaddingTop = 2.5f;
                                cell541d.PaddingBottom = 2.5f;

                                table4.AddCell(cell541d);
                                decimal discountAmt = ((Convert.ToDecimal(data2[j].PRICE) * Convert.ToDecimal(data2[j].QUANTITY)) * Convert.ToDecimal(DisPer) / 100);
                                Paragraph pp12 = new Paragraph();
                                Phrase phar12 = new Phrase("" + ((Convert.ToDecimal(data2[j].PRICE) * Convert.ToDecimal(data2[j].QUANTITY)) - discountAmt).ToString("c2", CultureInfo.CreateSpecificCulture("de-DE")) + "\n", font);
                                pp12.Add(phar12);
                                PdfPCell cell54 = new PdfPCell(pp12);
                                cell54.HorizontalAlignment = 2;
                                cell54.PaddingTop = 2.5f;
                                cell54.PaddingBottom = 2.5f;

                                table4.AddCell(cell54);
                                total = total + ((Convert.ToDecimal(data2[j].PRICE) * Convert.ToDecimal(data2[j].QUANTITY)) - discountAmt);
                            }
                            else
                            {
                                Paragraph pp = new Paragraph();
                                Phrase phar = new Phrase("" + Convert.ToDecimal(data2[j].PRICE).ToString("c2", CultureInfo.CreateSpecificCulture("de-DE")) + "\n", font);
                                pp.Add(phar);
                                PdfPCell cell541 = new PdfPCell(pp);
                                //cell541.AddElement(pp);
                                cell541.Colspan = 2;
                                cell541.HorizontalAlignment = 2;
                                cell541.PaddingTop = 2.5f;
                                cell541.PaddingBottom = 2.5f;

                                table4.AddCell(cell541);

                                Paragraph pp12 = new Paragraph();
                                Phrase phar12 = new Phrase("" + (Convert.ToDecimal(data2[j].PRICE) * Convert.ToDecimal(data2[j].QUANTITY)).ToString("c2", CultureInfo.CreateSpecificCulture("de-DE")) + "\n", font);
                                pp12.Add(phar12);
                                PdfPCell cell54 = new PdfPCell(pp12);
                                cell54.HorizontalAlignment = 2;
                                cell54.PaddingTop = 2.5f;
                                cell54.PaddingBottom = 2.5f;

                                table4.AddCell(cell54);
                                total = total + (Convert.ToDecimal(data2[j].PRICE) * Convert.ToDecimal(data2[j].QUANTITY));
                            }


                        }

                        PdfPCell NetValCell = new PdfPCell();

                        NetValCell.AddElement(new Paragraph(new Chunk("Gesamt Netto", font)));
                        NetValCell.Colspan = 6;
                        NetValCell.PaddingTop = 2.5f;
                        NetValCell.PaddingBottom = 2.5f;

                        table4.AddCell(NetValCell);
                        Paragraph pp1 = new Paragraph();
                        Phrase phar1 = new Phrase("" + Convert.ToDecimal(total).ToString("c2", CultureInfo.CreateSpecificCulture("de-DE")) + "\n", font);
                        pp1.Add(phar1);
                        PdfPCell NetValCell1 = new PdfPCell(pp1);
                        NetValCell1.Colspan = 6;
                        NetValCell1.HorizontalAlignment = 2;
                        NetValCell1.VerticalAlignment = 2;
                        NetValCell1.PaddingTop = 2.5f;
                        NetValCell1.PaddingBottom = 2.5f;

                        table4.AddCell(NetValCell1);

                        if (data1[i].Zipcode == 82)
                        {
                            PdfPCell inccell = new PdfPCell();

                            inccell.AddElement(new Paragraph(new Chunk("Incl" + Convert.ToDecimal(data1[i].VatPer).ToString("0") + " % Value", font)));
                            inccell.Colspan = 6;
                            inccell.PaddingTop = 2.5f;
                            inccell.PaddingBottom = 2.5f;

                            table4.AddCell(inccell);
                            Paragraph pp1inc = new Paragraph();
                            Phrase phar1inc = new Phrase("" + (Convert.ToDecimal(total * data1[i].VatPer / 100).ToString("C2", CultureInfo.CreateSpecificCulture("de-DE"))) + "\n", font);
                            pp1inc.Add(phar1inc);
                            PdfPCell inccell1 = new PdfPCell(pp1inc);
                            inccell1.HorizontalAlignment = 2;
                            inccell1.VerticalAlignment = 2;
                            inccell1.PaddingTop = 2.5f;
                            inccell1.PaddingBottom = 2.5f;

                            table4.AddCell(inccell1);
                        }
                        else
                        {

                            PdfPCell inccell = new PdfPCell();
                            inccell.AddElement(new Paragraph(new Chunk("Incl 0 % Vat", font)));
                            inccell.Colspan = 6;
                            inccell.PaddingTop = 2.5f;
                            inccell.PaddingBottom = 2.5f;

                            table4.AddCell(inccell);
                            Paragraph pp1inc = new Paragraph();
                            Phrase phar1inc = new Phrase("" + (Convert.ToDecimal(total * 0 / 100).ToString("C2", CultureInfo.CreateSpecificCulture("de-DE"))) + "\n", font);
                            pp1inc.Add(phar1inc);
                            PdfPCell inccell1 = new PdfPCell(pp1inc);
                            inccell1.HorizontalAlignment = 2;
                            inccell1.PaddingTop = 2.5f;
                            inccell1.PaddingBottom = 2.5f;

                            table4.AddCell(inccell1);

                        }
                        decimal Discountamt = 0;

                        if (data1[i].Zipcode == 82)
                        {

                            var Vatamount = (Convert.ToDecimal(total + ((total * data1[i].VatPer / 100))));
                            Vatamount = (total * data1[i].VatPer / 100) ?? 0;


                            if (data1[i].Discount != 0)
                            {
                                Discountamt = (Convert.ToDecimal(total * data1[i].Discount / 100));
                                PdfPCell AllDiscountcell = new PdfPCell();

                                AllDiscountcell.AddElement(new Paragraph(new Chunk("Discount", font)));
                                AllDiscountcell.Colspan = 6;
                                AllDiscountcell.PaddingTop = 2.5f;
                                AllDiscountcell.PaddingBottom = 2.5f;

                                table4.AddCell(AllDiscountcell);

                                Paragraph pp1discount = new Paragraph();
                                Phrase phar1Discount = new Phrase("" + Discountamt.ToString("C2", CultureInfo.CreateSpecificCulture("de-DE")) + "\n", Fontsmaller);
                                pp1discount.Add(phar1Discount);
                                PdfPCell AllDiscountcellde = new PdfPCell(pp1discount);
                                AllDiscountcellde.HorizontalAlignment = 2;
                                AllDiscountcellde.Colspan = 6;
                                AllDiscountcellde.PaddingTop = 2.5f;
                                AllDiscountcellde.PaddingBottom = 2.5f;
                                AllDiscountcellde.HorizontalAlignment = 2;
                                table4.AddCell(AllDiscountcellde);
                            }
                            PdfPCell vataddcell = new PdfPCell();

                            vataddcell.AddElement(new Paragraph(new Chunk("Gesamt", font)));
                            vataddcell.Colspan = 6;
                            vataddcell.PaddingTop = 2.5f;
                            vataddcell.PaddingBottom = 2.5f;

                            table4.AddCell(vataddcell);
                            Paragraph pp1vat = new Paragraph();
                            Phrase phar1vat = new Phrase("" + ((Convert.ToDecimal(total + Vatamount - Discountamt)).ToString("C2", CultureInfo.CreateSpecificCulture("de-DE"))) + "\n", Fontsmaller);
                            pp1vat.Add(phar1vat);
                            PdfPCell vataddcell1 = new PdfPCell(pp1vat);
                            vataddcell1.HorizontalAlignment = 2;
                            vataddcell1.Colspan = 6;
                            vataddcell1.PaddingTop = 2.5f;
                            vataddcell1.PaddingBottom = 2.5f;

                            table4.AddCell(vataddcell1);

                        }
                        else
                        {
                            var Vatamount = (Convert.ToDecimal(total + ((total * 0 / 100))));
                            Vatamount =  (total * 0 / 100) ?? 0;

                            if (data1[i].Discount != 0)
                            {
                                Discountamt = (Convert.ToDecimal(total * data1[i].Discount / 100));
                                PdfPCell AllDiscountcell = new PdfPCell();

                                AllDiscountcell.AddElement(new Paragraph(new Chunk("Discount", font)));
                                AllDiscountcell.Colspan = 6;
                                AllDiscountcell.PaddingTop = 2.5f;
                                AllDiscountcell.PaddingBottom = 2.5f;

                                table4.AddCell(AllDiscountcell);
                                Paragraph pp1discount = new Paragraph();
                                Phrase phar1Discount = new Phrase("" + Discountamt.ToString("C2", CultureInfo.CreateSpecificCulture("de-DE")) + "\n", Fontsmaller);
                                pp1discount.Add(phar1Discount);
                                PdfPCell AllDiscountcellde = new PdfPCell(pp1discount);
                                AllDiscountcellde.Colspan = 6;
                                AllDiscountcellde.PaddingTop = 2.5f;
                                AllDiscountcellde.PaddingBottom = 2.5f;
                                AllDiscountcellde.HorizontalAlignment = 2;
                                table4.AddCell(AllDiscountcellde);
                            }
                            PdfPCell vataddcell = new PdfPCell();

                            vataddcell.AddElement(new Paragraph(new Chunk("Total", font)));
                            vataddcell.Colspan = 6;
                            vataddcell.PaddingTop = 2.5f;
                            vataddcell.PaddingBottom = 2.5f;

                            table4.AddCell(vataddcell);
                            Paragraph pp1vat = new Paragraph();
                            Phrase phar1vat = new Phrase("" + ((Convert.ToDecimal(total + Vatamount - Discountamt)).ToString("C2", CultureInfo.CreateSpecificCulture("de-DE"))) + "\n", Fontsmaller);
                            pp1vat.Add(phar1vat);
                            PdfPCell vataddcell1 = new PdfPCell(pp1vat);
                            vataddcell1.HorizontalAlignment = 2;
                            vataddcell1.Colspan = 6;
                            vataddcell1.PaddingTop = 2.5f;
                            vataddcell1.PaddingBottom = 2.5f;

                            table4.AddCell(vataddcell1);

                        }
                        doc1.Add(table4);

                        PdfPTable table6 = new PdfPTable(1);
                        PdfPCell cell31 = new PdfPCell();
                        cell31.Border = 0;
                        cell31.AddElement(new Paragraph(new Chunk("", font)));
                        cell31.PaddingTop = 20.5f;
                        cell31.PaddingBottom = 2.5f;
                        table6.AddCell(cell31);

                        PdfPCell cell39 = new PdfPCell();
                        cell39.Border = 0;
                        cell39.AddElement(new Paragraph(""));
                        //cell39.PaddingTop = 280.0f;
                        cell39.PaddingBottom = 2.5f;
                        table6.AddCell(cell39);
                        doc1.Add(table6);

                        PdfPTable table7 = new PdfPTable(1);
                        table7.WidthPercentage = 100f;
                        PdfPCell cell33 = new PdfPCell();
                        string[] splitedRemarks = data1[i].SO_Remarks.Split('.');
                        for (int k = 0; k < splitedRemarks.Count(); k++)
                        {
                            if (k == 0)
                            {
                                PdfPCell cell33re = new PdfPCell();
                                cell33re.AddElement(new Paragraph(new Chunk("Remarks:" + splitedRemarks[k], font)));

                                cell33re.PaddingTop = 2.5f;
                                cell33re.PaddingBottom = 2.5f;
                                cell33re.Border = 0;
                                table7.AddCell(cell33re);
                            }
                            else
                            {
                                if (splitedRemarks[k] != "")
                                {
                                    PdfPCell cell33re = new PdfPCell();
                                    cell33re.AddElement(new Paragraph(new Chunk(splitedRemarks[k], font)));

                                    cell33re.PaddingTop = 2.5f;
                                    cell33re.PaddingBottom = 2.5f;
                                    cell33re.Border = 0;
                                    table7.AddCell(cell33re);
                                }

                            }

                        }
                        //PdfPCell cell33re = new PdfPCell();

                        //cell33re.AddElement(new Paragraph(new Chunk(data1[i].SO_Remarks, font)));

                        //cell33re.PaddingTop = 2.5f;
                        //cell33re.PaddingBottom = 2.5f;
                        //cell33re.Border = 0;
                        //table7.AddCell(cell33re);
                        cell33.AddElement(new Paragraph(new Chunk("Payment Terms: " + data1[i].PaymentTermsDescription + "", font)));

                        cell33.PaddingTop = 2.5f;
                        cell33.PaddingBottom = 2.5f;
                        cell33.Border = 0;
                        table7.AddCell(cell33);
                        //PdfPCell delitercell = new PdfPCell();

                        //delitercell.AddElement(new Paragraph(new Chunk("Delivery Terms: " + data1[i].SO_CusDeliveryTerms + "", font)));

                        //delitercell.PaddingTop = 2.5f;
                        //delitercell.PaddingBottom = 2.5f;
                        //delitercell.Border = 0;
                        //table7.AddCell(delitercell);
                        string[] splitedDeliveryTerms = data1[i].SO_CusDeliveryTerms.Split('.');
                        for (int k = 0; k < splitedDeliveryTerms.Count(); k++)
                        {
                            if (k == 0)
                            {
                                PdfPCell cell33re = new PdfPCell();
                                cell33re.AddElement(new Paragraph(new Chunk("Delivery Terms:" + splitedDeliveryTerms[k], font)));

                                cell33re.PaddingTop = 2.5f;
                                cell33re.PaddingBottom = 2.5f;
                                cell33re.Border = 0;
                                table7.AddCell(cell33re);
                            }
                            else
                            {
                                if (splitedDeliveryTerms[k] != "")
                                {
                                    PdfPCell cell33re = new PdfPCell();
                                    cell33re.AddElement(new Paragraph(new Chunk(splitedDeliveryTerms[k], font)));

                                    cell33re.PaddingTop = 2.5f;
                                    cell33re.PaddingBottom = 2.5f;
                                    cell33re.Border = 0;
                                    table7.AddCell(cell33re);
                                }

                            }

                        }
                        PdfPCell Linecell = new PdfPCell();

                        Linecell.AddElement(new Paragraph(new Chunk("___________________________", font)));

                        Linecell.PaddingTop = 45.5f;
                        Linecell.PaddingBottom = 0f;
                        Linecell.Border = 0;
                        table7.AddCell(Linecell);

                        PdfPCell signcell = new PdfPCell();

                        signcell.AddElement(new Paragraph(new Chunk("Eurotextiles GmbH & Co. KG", font)));

                        signcell.PaddingTop = 45.5f;
                        signcell.PaddingBottom = 2.5f;
                        signcell.Border = 0;
                        table7.AddCell(signcell);
                        PdfPCell line1 = new PdfPCell();

                        line1.AddElement(new Paragraph(new Chunk("Es gelten die Allgemeinen Geschäftsbedingungen (AGB) der Eurotextiles GmbH & Co. KG.", font)));

                        line1.PaddingTop = 6.5f;
                        line1.PaddingBottom = 2.5f;
                        line1.Border = 0;
                        table7.AddCell(line1);
                        PdfPCell line2 = new PdfPCell();

                        line2.AddElement(new Paragraph(new Chunk("Abweichungen von Qualität/Stückzahl der Ware müssen uns vor Benutzung, aber in jedem Fall innerhalb von 7 Tagen nach Erhalt der Ware, schriftlich mitgeteilt werden.", font)));

                        line2.PaddingTop = 2.5f;
                        line2.PaddingBottom = 2.5f;
                        line2.Border = 0;
                        table7.AddCell(line2);
                        PdfPCell line3 = new PdfPCell();

                        line3.AddElement(new Paragraph(new Chunk("Ware die bereits gewaschen oder benutzt wurde ist von der Reklamation ausgeschlossen.", font)));

                        line3.PaddingTop = 2.5f;
                        line3.PaddingBottom = 2.5f;
                        line3.Border = 0;
                        table7.AddCell(line3);
                        doc1.Add(table7);

                        doc1.Close();

                    }
                }

                return Json(data1, JsonRequestBehavior.AllowGet);
                //return path;
            }
            catch (Exception exe)
            {
                transaction.Rollback();
                string actionName = this.ControllerContext.RouteData.Values["action"].ToString();
                string controllerName = this.ControllerContext.RouteData.Values["controller"].ToString();
                objERR.err_title = controllerName + "-" + controllerName;
                objERR.err_message = "Sorry for the inconvience. Some error has been occured.";
                objERR.err_details = exe.Message.Replace("'", "");
                int errid = bal.ExceptionInsertLogs_BL(objERR);
                return Json("ERR" + errid.ToString(), JsonRequestBehavior.AllowGet);
               // return "ERR" + errid.ToString();
            }
            finally
            {
                transaction.Dispose();
                context.Dispose();
            }

        }
        public class pdffooterclass : PdfPageEventHelper
        {
            PdfTemplate headerTemplate, footerTemplate;
            BaseFont bf = null;
            PdfContentByte cb;
            Color FontColour = new Color(35, 31, 32);
            Font Fontbiggest = new Font(FontFactory.GetFont("Arial", 50, Font.BOLD, new Color(180)));
            Font Fontbigger = new Font(FontFactory.GetFont("Arial", 20, Font.BOLD));
            Font Fontsmaller = new Font(FontFactory.GetFont("Arial", 10, Font.BOLD));
            //Image logo = iTextSharp.text.Image.GetInstance("E:/Projects/Indra/Images/euro_logowithText.png");
           
            public override void OnStartPage(PdfWriter writer, Document document)
            {
                base.OnStartPage(writer, document);
                string logoPath = "~/Images/euro_logowithText.png";
                string serverLogoPath = System.Web.HttpContext.Current.Server.MapPath(logoPath);
                //string logoPath = Path.Combine(Server.MapPath("~/Images/euro_logowithText.png"));
                Image logo = iTextSharp.text.Image.GetInstance(serverLogoPath);
                PdfPCell imageCell = new PdfPCell(logo);
                imageCell.HorizontalAlignment = Element.ALIGN_CENTER;
                imageCell.Border = 0;
                PdfPTable table0 = new PdfPTable(1);
                table0.WidthPercentage = 200f;
                table0.TotalWidth = 200f;
                imageCell.PaddingLeft = 109f;
                float[] widths = new float[] { 200f };
                table0.SetWidths(widths);
                table0.AddCell(imageCell);
               
                table0.WriteSelectedRows(0, -1, 0, (document.PageSize.Height-10), writer.DirectContent);
            }
            public override void OnEndPage(PdfWriter writer, Document document)
            {
                Font fontsmall = new Font(FontFactory.GetFont("Arial", 8, Font.NORMAL));
             
                base.OnEndPage(writer, document);
                
                PdfPTable tabFot = new PdfPTable(4);
                tabFot.WidthPercentage = 100f;
                tabFot.TotalWidth = 100f;
                //PdfPCell cell;
                tabFot.TotalWidth = 300F;
                //PdfPTable table10 = new PdfPTable(4);
                PdfPCell cell35 = new PdfPCell();

                PdfPCell cell35line = new PdfPCell();
                float[] widths2 = new float[] { 120f, 130f, 162f, 160f };
                tabFot.SetTotalWidth(widths2);
                tabFot.SetWidthPercentage(widths2, PageSize.A4);
                tabFot.SetWidths(widths2);
                cell35line.AddElement(new Paragraph(new Chunk("________________________________________________________________________________________________________________", fontsmall)));
                cell35line.Colspan = 4;
                cell35line.Border = 0;
                cell35line.NoWrap = true;
                tabFot.AddCell(cell35line);
                cell35.AddElement(new Paragraph(new Chunk("Eurotextiles GmbH & Co. KG", fontsmall)));
                //cell35.PaddingTop = 7.5f;
                //cell35.PaddingBottom = 7.5f;
                cell35.Border = 0;
                tabFot.AddCell(cell35);

                PdfPCell cell36 = new PdfPCell();

                cell36.AddElement(new Paragraph(new Chunk("HRA 3451", fontsmall)));
                cell36.PaddingTop = 1.5f;
                cell36.Border = 0;
                tabFot.AddCell(cell36);

                PdfPCell cell37 = new PdfPCell();

                cell37.AddElement(new Paragraph(new Chunk("Kompl.Indra Enterprises GmbH", fontsmall)));
                cell37.PaddingTop = 1.5f;
                cell37.Border = 0;
                tabFot.AddCell(cell37);

                PdfPCell cell38 = new PdfPCell();

                cell38.AddElement(new Paragraph(new Chunk("Bankverbindung", fontsmall)));
                cell38.PaddingTop = 1.5f;
                cell38.Border = 0;
                tabFot.AddCell(cell38);

                PdfPCell cell310 = new PdfPCell();

                cell310.AddElement(new Paragraph(new Chunk("Mammolshainer Weg 14", fontsmall)));
                cell310.PaddingTop = 1.5f;
                cell310.Border = 0;
                tabFot.AddCell(cell310);

                PdfPCell cell40 = new PdfPCell();

                cell40.AddElement(new Paragraph(new Chunk("Amtsgericht Königstein", fontsmall)));
                cell40.PaddingTop = 1.5f;
                cell40.Border = 0;
                tabFot.AddCell(cell40);

                PdfPCell cell59 = new PdfPCell();

                cell59.AddElement(new Paragraph(new Chunk("Geschäftsführer:Krishna Javaji", fontsmall)));
                cell59.PaddingTop = 1.5f;
                cell59.Border = 0;
                tabFot.AddCell(cell59);

                PdfPCell cell60 = new PdfPCell();

                cell60.AddElement(new Paragraph(new Chunk("Nassauische Sparkasse", fontsmall)));
                cell60.PaddingTop = 1.5f;
                cell60.Border = 0;
                tabFot.AddCell(cell60);

                PdfPCell cell61 = new PdfPCell();

                cell61.AddElement(new Paragraph(new Chunk("61462 Königstein im Taunus", fontsmall)));
                cell61.PaddingTop = 1.5f;
                cell61.Border = 0;
                tabFot.AddCell(cell61);


                PdfPCell cell62 = new PdfPCell();

                cell62.AddElement(new Paragraph(new Chunk("Steuerrnummer 003 315 60117", fontsmall)));
                cell62.PaddingTop = 1.5f;
                cell62.Border = 0;
                tabFot.AddCell(cell62);
                PdfPCell cell64 = new PdfPCell();

                cell64.AddElement(new Paragraph(new Chunk("HRB 5137 Amtsgericht Königstein", fontsmall)));
                cell64.PaddingTop = 1.5f;
                cell64.Border = 0;
                tabFot.AddCell(cell64);

                PdfPCell cell65 = new PdfPCell();

                cell65.AddElement(new Paragraph(new Chunk("IBAN :DE15 5105 00150 270 0607 06", fontsmall)));
                cell65.PaddingTop = 1.5f;
                cell65.Border = 0;
                tabFot.AddCell(cell65);

                PdfPCell cell66 = new PdfPCell();

                cell66.AddElement(new Paragraph(new Chunk("Fon +49 6174/25980", fontsmall)));
                cell66.PaddingTop = 1.5f;
                cell66.PaddingBottom = 5.5f;
                cell66.Border = 0;
                tabFot.AddCell(cell66);

                PdfPCell cell67 = new PdfPCell();

                cell67.AddElement(new Paragraph(new Chunk("USt-IdNr.DE279479010", fontsmall)));
                cell67.PaddingTop = 1.5f;
                cell67.PaddingBottom = 5.5f;
                cell67.Border = 0;
                tabFot.AddCell(cell67);

                PdfPCell cell68 = new PdfPCell();

                cell68.AddElement(new Paragraph(new Chunk("Steuernummer 003 236 16128", fontsmall)));
                cell68.PaddingTop = 1.5f;
                cell68.PaddingBottom = 5.5f;
                cell68.Border = 0;
                tabFot.AddCell(cell68);


                PdfPCell cell71 = new PdfPCell();

                cell71.AddElement(new Paragraph(new Chunk("SWIFT:-BIC NASSDE55XXX", fontsmall)));
                cell71.PaddingTop = 1.5f;
                cell71.PaddingBottom = 5.5f;
                cell71.Border = 0;
                tabFot.AddCell(cell71);
                tabFot.WriteSelectedRows(-300, -1, 20, (document.PageSize.Height-735), writer.DirectContent);
            }
            public override void OnCloseDocument(PdfWriter writer, Document document)
            {
                base.OnCloseDocument(writer, document);

                //headerTemplate.BeginText();
                //headerTemplate.SetFontAndSize(bf, 12);
                //headerTemplate.SetTextMatrix(0, 0);
                //headerTemplate.ShowText((writer.PageNumber - 1).ToString());
                //headerTemplate.EndText();

                //footerTemplate.BeginText();
                //footerTemplate.SetFontAndSize(bf, 12);
                //footerTemplate.SetTextMatrix(0, 0);
                //footerTemplate.ShowText((writer.PageNumber - 1).ToString());
                //footerTemplate.EndText();
            }
            public override void OnOpenDocument(PdfWriter writer, Document document)
            {
                try
                {
                    DateTime PrintTime = DateTime.Now;
                    bf = BaseFont.CreateFont(BaseFont.HELVETICA, BaseFont.CP1252, BaseFont.NOT_EMBEDDED);
                    cb = writer.DirectContent;
                    headerTemplate = cb.CreateTemplate(100, 100);
                    footerTemplate = cb.CreateTemplate(50, 50);
                }
                catch (DocumentException de)
                {
                }
                catch (System.IO.IOException ioe)
                {
                }
            }
        }
        public ActionResult ET_Sales_Mail_Compose_Reply_Forward(int id)
        {
            bool val = Session["UserID"] == null ? false : true;
            if (val)
            {
                try
                {
                    dbcontext.Configuration.ProxyCreationEnabled = false;
                    decimal userid = Convert.ToDecimal(Session["UserID"]);

                    int com_key = Convert.ToInt32(Session["CompanyKey"]);
                    var user = dbcontext.Tbl_MailSettings.FirstOrDefault(u => u.MS_UserId == userid);
                    //var data = dbcontext.Tbl_MailSettings.Single(m => m.MS_UserId == userid && m.COM_KEY == com_key);
                    var data = new Tbl_MailSettings();
                    if (user == null)
                    {
                        data = dbcontext.Tbl_MailSettings.FirstOrDefault(m => m.COM_KEY == com_key);
                    }
                    else
                    {
                        data = dbcontext.Tbl_MailSettings.Single(m => m.MS_UserId == userid && m.COM_KEY == com_key);
                    }

                    var data1 = dbcontext.Tbl_Master_Order.Single(m => m.SO_ID == id && m.COM_KEY == com_key && m.DELETED==false);
                    var TO_IDS = dbcontext.Tbl_Master_CompanyDetails.Single(m => m.COM_ID == data1.SO_CutomerID && m.COM_KEY == com_key);
                    SmtpClient smtp = new SmtpClient();
                    smtp.Host = data.MS_OutGoingHostName;
                    NetworkCredential NetworkCred = new NetworkCredential();
                    NetworkCred.UserName = data.MS_EmailID;
                    NetworkCred.Password = data.MS_Password;
                    smtp.UseDefaultCredentials = true;
                    smtp.EnableSsl = true;
                    smtp.Credentials = NetworkCred;
                    smtp.Port = data.MS_OutGoingPort;


                    MailMessage mm = new MailMessage(data.MS_EmailID, TO_IDS.COM_EMAIL);
                    //if (Cc != "")
                    //    mm.CC.Add(Cc);
                    mm.Subject = "Request for Quotation";
                    mm.IsBodyHtml = true;
                    string body = "Dear Sir/Madam <br /><br />";
                    body = body + "We have received an enquiry from our customer which is attached herewith. We are requesting you to submit your competitive price, payment terms and delivery terms etc at the earliest.<br /><br /> ";
                    body = body + "Please quote the RFQ No for all future purposes.<br /><br /> Regards,<br />";
                    body = body + "Procurement Department<br />Euro Textiles Gmbh.";

                    mm.Body = string.Format(body, Session["UserName"]);
                    string[] urlList = new string[Request.Files.Count];
                    bool sentAttachments = false;
                   // File.SetAttributes(path, FileAttributes.Normal);
                    System.Net.Mail.Attachment objAttachements =
                                new System.Net.Mail.Attachment(Server.MapPath("~/Sales/PDFList/Order/" + data1.SO_Code + "/" + data1.SO_Code + ".pdf"));

                    // ADD FILE ATTACHMENT TO THE EMAIL.
                    mm.Attachments.Add(objAttachements);
                    sentAttachments = true;
                    if (Request.Files.Count > 0)
                    {
                        for (int i = 0; i < Request.Files.Count; i++)
                        {
                            HttpPostedFileBase file = Request.Files[i]; //Uploaded file
                                                                        //Use the following properties to get file's name, size and MIMEType

                            int fileSize = file.ContentLength;
                            string fileName = file.FileName;
                            string mimeType = file.ContentType;
                            System.IO.Stream fileContent = file.InputStream;

                            //To save file, use SaveAs method
                            string subPath = "~/Mail/Sent/Attachments/";
                            bool exists = System.IO.Directory.Exists(Server.MapPath(subPath));
                            if (!exists)
                                System.IO.Directory.CreateDirectory(Server.MapPath(subPath));

                            string path1 = System.Web.Hosting.HostingEnvironment.MapPath(subPath) + "\\";
                            string path = System.Web.Hosting.HostingEnvironment.MapPath(subPath) + "\\" + fileName;
                            string url = subPath.Replace("~", "") + fileName;

                            FileInfo file1 = new FileInfo(path);
                            int k = 1;
                            while (file1.Exists)
                            {
                                path = path1 + "Copy" + k + fileName;
                                url = subPath.Replace("~", "") + "Copy" + k + fileName;
                                k++;
                                file1 = new FileInfo(path);
                            }


                            urlList[i] = url;



                            file.SaveAs(path); //File will be saved in application root

                            // CREATE A FILE ATTACHMENT.
                            Attachment objAttachementss =
                                new Attachment(file.InputStream,
                                    "../Sales/PDFList/Order/"+ data1.SO_Code+ "");

                            // ADD FILE ATTACHMENT TO THE EMAIL.
                            mm.Attachments.Add(objAttachementss);
                            sentAttachments = true;
                        }
                    }


                    bool success = false;
                    try
                    {
                        smtp.Send(mm);
                        success = true;
                        //Inserting Into mailSent table
                        Tbl_MailSent Objmst = new Tbl_MailSent()
                        {
                            MST_Subject = "",
                            MST_Message = body,
                            MST_Date = DateTime.Now,
                            MST_To = TO_IDS.COM_EMAIL,
                            MST_cc = "",
                            MST_Attachment = sentAttachments,
                            MST_UserId = Convert.ToInt32(Session["UserID"].ToString()),
                            CREATED_BY = Convert.ToInt32(Session["UserID"].ToString()),
                            CREATED_DATE = DateTime.Now,
                            DELETED = false,
                            COM_KEY = Convert.ToInt64(Session["CompanyKey"])
                        };
                        dbcontext.Tbl_MailSent.Add(Objmst);
                        dbcontext.SaveChanges();

                        //If attachment is there then Insert Into mailSentAttachment table
                        if (sentAttachments)
                        {
                            for (int i = 0; urlList.Count() > 0; i++)
                            {
                                Tbl_MailSentAttachment Objma = new Tbl_MailSentAttachment()
                                {
                                    MST_ID = Objmst.MST_ID,
                                    MSTA_Path = urlList[i],
                                    MSTA_UserId = Convert.ToInt32(Session["UserID"].ToString()),
                                    CREATED_BY = Convert.ToInt32(Session["UserID"].ToString()),
                                    CREATED_DATE = DateTime.Now,
                                    DELETED = false,
                                    COM_KEY = Convert.ToInt64(Session["CompanyKey"])
                                };
                                dbcontext.Tbl_MailSentAttachment.Add(Objma);
                                dbcontext.SaveChanges();
                            }

                        }
                    }
                    catch (Exception exe)
                    {


                    }

                    return Json(success, JsonRequestBehavior.AllowGet);


                }
                catch (Exception exe)
                {
                    string actionName = this.ControllerContext.RouteData.Values["action"].ToString();
                    string controllerName = this.ControllerContext.RouteData.Values["controller"].ToString();
                    objERR.err_title = controllerName + "-" + controllerName;
                    objERR.err_message = "Sorry for the inconvience. Some error has been occured.";
                    objERR.err_details = exe.Message.Replace("'", "");
                    int errid = bal.ExceptionInsertLogs_BL(objERR);
                    return Json("ERR" + errid.ToString(), JsonRequestBehavior.AllowGet);
                }
            }
            else
            {
                return RedirectToAction("ET_SessionExpire", "ET_Login");
            }
        }
        // Binding the contact details in dynamic table
        public JsonResult ET_Sales_OrderDetails_Update_Childtable(int id)
        {
            bool val = Session["UserID"] == null ? false : true;
            if (val)
            {
                try
                {
                    var data = ObjBL.ET_Sales_OrderDetails_Update_Childtable_BL(id);
                    var json = new JavaScriptSerializer().Serialize(data);
                    return Json(json, JsonRequestBehavior.AllowGet);
                }
                catch (Exception exe)
                {
                    string actionName = this.ControllerContext.RouteData.Values["action"].ToString();
                    string controllerName = this.ControllerContext.RouteData.Values["controller"].ToString();
                    objERR.err_title = controllerName + "-" + controllerName;
                    objERR.err_message = "Sorry for the inconvience. Some error has been occured.";
                    objERR.err_details = exe.Message.Replace("'", "");
                    int errid = bal.ExceptionInsertLogs_BL(objERR);
                    return Json("ERR" + errid.ToString() + objERR.err_details, JsonRequestBehavior.AllowGet);
                }
            }
            else
            {
                return Json("ET_SessionExpire", "ET_Login");
            }
        }
        //Get Offer Details
        public JsonResult ET_Sales_OfferDetails(int id)
        {
            bool val = Session["UserID"] == null ? false : true;
            if (val)
            {
                try
                {
                    EntityClasses dbcontext = new EntityClasses();
                    var data1 = (from a in dbcontext.Tbl_Offers_Master where a.OFFER_ID == id select new { a.COM_ID, a.OFFER_NO });
                   
                        var data = (from a in dbcontext.Tbl_Offer_Details
                                    join b in dbcontext.Tbl_Product_Master on a.PRODUCT_ID equals b.P_ID
                                    join e in dbcontext.tbl_LookUp on b.P_UOM equals e.LU_Code into f
                                    from g in f.DefaultIfEmpty()
                                    where a.OFFER_ID == id && g.LU_Type == 2
                                    select new Tbl_Order_Details_CM
                                    {
                                        PRODUCT_ID = b.P_ID,
                                        P_PackingQuantityUOM = b.P_PackingQuantityUOM,
                                        UOM_NAME = g.LU_Description,
                                        QUANTITY = a.QUANTITY,
                                        PRICE = a.PRICE,
                                        SUPPLIEROFFER_ID = 0
                                    }
                                   );
                        var res = new { OfferDetails = data, OfferInfo = data1 };
                        var json = new JavaScriptSerializer().Serialize(res);
                        return Json(json, JsonRequestBehavior.AllowGet);
                }
                catch (Exception exe)
                {
                    string actionName = this.ControllerContext.RouteData.Values["action"].ToString();
                    string controllerName = this.ControllerContext.RouteData.Values["controller"].ToString();
                    objERR.err_title = controllerName + "-" + controllerName;
                    objERR.err_message = "Sorry for the inconvience. Some error has been occured.";
                    objERR.err_details = exe.Message.Replace("'", "");
                    int errid = bal.ExceptionInsertLogs_BL(objERR);
                    return Json("ERR" + errid.ToString(), JsonRequestBehavior.AllowGet);
                }
            }
            else
            {
                return Json("ET_SessionExpire", "ET_Login");
            }
        }
        //Get the quation details
        public JsonResult ET_Sales_OrderDetails_Update_ChildtableQuotation(int id,int orderid)
        {
            bool val = Session["UserID"] == null ? false : true;
            if (val)
            {
                try
                {
                    var data1 = (from a in dbcontext.tbl_QuotationHeader where a.Q_ID == id select new { a.Q_PaymentTerms,a.Q_DeliveryTerms });
                    if (orderid == 0)
                    {
                        EntityClasses dbcontext = new EntityClasses();
                        //var data = dbcontext.tbl_QuotationDetails.Where(m => m.QD_PID == id).ToString();
                        var data = (from a in dbcontext.tbl_QuotationDetails
                                     join b in dbcontext.Tbl_Product_Master on a.QD_ProductID equals b.P_ID
                                     join e in dbcontext.tbl_LookUp on b.P_UOM equals e.LU_Code into f
                                     from g in f.DefaultIfEmpty()
                                    where a.QD_PID == id && g.LU_Type == 2 
                                    select new Tbl_Order_Details_CM
                                    {
                                        PRODUCT_ID = b.P_ID,
                                        
                                        P_PackingQuantityUOM = b.P_PackingQuantityUOM,
                                        UOM_NAME = g.LU_Description,
                                        QUANTITY = a.QD_Quantity,
                                        PRICE = a.QD_Unit_Price,
                                        OrderDescription = a.QD_Description,
                                        SUPPLIEROFFER_ID = 0,
                                        CustomerDesc=b.P_Remark1,
                                    }
                                   );
                        var res = new { QuotationDetails = data,QuotationInfo = data1 };
                        var json = new JavaScriptSerializer().Serialize(res);
                        return Json(json, JsonRequestBehavior.AllowGet);
                    }
                    else
                    {
                        var data = (from Ol in dbcontext.Tbl_Master_Order
                                    join Od in dbcontext.Tbl_Order_Details on Ol.SO_ID equals Od.AGEN_TRAD_PO_ID
                                    join Pct in dbcontext.Tbl_Product_Master on Od.PRODUCT_ID equals Pct.P_ID
                                    where Ol.SO_ID == orderid
                                    select new Tbl_Order_Details_CM
                                    {
                                        PRODUCT_ID = Pct.P_ID,
                                        ORDER_ID = Od.ORDER_ID,
                                        UOM_NAME = (dbcontext.tbl_LookUp.FirstOrDefault(m => m.LU_Type == 2 && m.LU_Code == Od.UOM).LU_Description),
                                        QUANTITY = Od.QUANTITY,
                                        PRICE = Od.PRICE,
                                        SUPPLIEROFFER_ID = Od.SUPPLIEROFFER_ID,
                                        OrderDescription = Od.OrderDescription,
                                        P_PackingQuantityUOM = Pct.P_PackingQuantityUOM,
                                        CustomerDesc = Od.CustomerDes,
                                        DesignDetail = Od.DesignDetail,
                                        DiscountPer=Od.DiscountPer
                                    }).ToList();
                        List<Tbl_Order_Details_CM> modelItems = (List<Tbl_Order_Details_CM>)data.Select((orderItem, index) => new Tbl_Order_Details_CM() { SO_Serial = index + 1,PRODUCT_ID = orderItem.PRODUCT_ID,ORDER_ID = orderItem.ORDER_ID,UOM_NAME = orderItem.UOM_NAME,QUANTITY = orderItem.QUANTITY,PRICE=orderItem.PRICE,SUPPLIEROFFER_ID =orderItem.SUPPLIEROFFER_ID,OrderDescription = orderItem.OrderDescription,P_PackingQuantityUOM = orderItem.P_PackingQuantityUOM,CustomerDesc=orderItem.CustomerDesc,DesignDetail=orderItem.DesignDetail,DiscountPer=orderItem.DiscountPer}).ToList();
                        
                        var res = new { QuotationDetails = modelItems.ToList(), QuotationInfo = data1 };
                        var json = new JavaScriptSerializer().Serialize(res);
                        return Json(json, JsonRequestBehavior.AllowGet);
                    }
                }
                catch (Exception exe)
                {
                    string actionName = this.ControllerContext.RouteData.Values["action"].ToString();
                    string controllerName = this.ControllerContext.RouteData.Values["controller"].ToString();
                    objERR.err_title = controllerName + "-" + controllerName;
                    objERR.err_message = "Sorry for the inconvience. Some error has been occured.";
                    objERR.err_details = exe.Message.Replace("'", "");
                    int errid = bal.ExceptionInsertLogs_BL(objERR);
                    return Json("ERR" + errid.ToString(), JsonRequestBehavior.AllowGet);
                }
            }
            else
            {
                return Json("ET_SessionExpire", "ET_Login");
            }
        }
        //Get the offer details
        public ActionResult ET_General_Order_SuplierProduct_Offer(int id,int pid,int custid)
        {
            bool val = Session["UserID"] == null ? false : true;
            if (val)
            {
                try
                {
                    if (custid == 0)
                    {
                        var data = (from Ofid in dbcontext.Tbl_Offer_Details
                                    join OfM in dbcontext.Tbl_Offers_Master on Ofid.OFFER_ID equals OfM.OFFER_ID
                                    join pct in dbcontext.Tbl_Product_Master on Ofid.PRODUCT_ID equals pct.P_ID
                                    where OfM.COM_ID == id && Ofid.PRODUCT_ID == pid && OfM.VALIDITY_DATE >= DateTime.Now && OfM.CUST_ID == 0
                                    select new Tbl_Offer_Details_CM
                                    {
                                        OFFER_ID = OfM.OFFER_ID,
                                        CUST_ID = OfM.CUST_ID,
                                        CUST_SUPP = OfM.CUST_SUPP,
                                        OFFER_NO = OfM.OFFER_NO,
                                        PRODUCT_NAME = pct.P_ShortName,
                                        PRICE = Ofid.PRICE,
                                        VALIDITY_DATE = OfM.VALIDITY_DATE,
                                        VALIDITY_DAYS = OfM.VALIDITY_DAYS,
                                        OFFER_DATE = OfM.OFFER_DATE,
                                        COM_ID = OfM.COM_ID,
                                        PRODUCT_ID = Ofid.PRODUCT_ID,
                                        OFFER_CODE = OfM.OFFER_CODE,
                                        OfferType = "No"

                                    }).ToList();
                        return PartialView("/Views/Sales/ET_Sales_OrderDetails/ET_Sales_OrderDetails_Offer.cshtml", data);
                    }
                    else
                    {
                        var data = (from Ofid in dbcontext.Tbl_Offer_Details
                                    join OfM in dbcontext.Tbl_Offers_Master on Ofid.OFFER_ID equals OfM.OFFER_ID
                                    join pct in dbcontext.Tbl_Product_Master on Ofid.PRODUCT_ID equals pct.P_ID
                                    where OfM.COM_ID == id && Ofid.PRODUCT_ID == pid && OfM.VALIDITY_DATE >= DateTime.Now && (OfM.CUST_ID == custid || OfM.CUST_ID==0)
                                    select new Tbl_Offer_Details_CM
                                    {
                                        OFFER_ID = OfM.OFFER_ID,
                                        CUST_ID = OfM.CUST_ID,
                                        CUST_SUPP = OfM.CUST_SUPP,
                                        OFFER_NO = OfM.OFFER_NO,
                                        PRODUCT_NAME = pct.P_ShortName,
                                        PRICE = Ofid.PRICE,
                                        VALIDITY_DATE = OfM.VALIDITY_DATE,
                                        VALIDITY_DAYS = OfM.VALIDITY_DAYS,
                                        OFFER_DATE = OfM.OFFER_DATE,
                                        COM_ID = OfM.COM_ID,
                                        PRODUCT_ID = Ofid.PRODUCT_ID,
                                        OFFER_CODE = OfM.OFFER_CODE,
                                        OfferType = OfM.CUST_ID == 0 ? "No" : "Yes"
                                    }).ToList();
                        return PartialView("/Views/Sales/ET_Sales_OrderDetails/ET_Sales_OrderDetails_Offer.cshtml", data);
                    }
                    //var json = new JavaScriptSerializer().Serialize(data);
                    //return Json(json, JsonRequestBehavior.AllowGet);
                }
                catch (Exception exe)
                {
                    string actionName = this.ControllerContext.RouteData.Values["action"].ToString();
                    string controllerName = this.ControllerContext.RouteData.Values["controller"].ToString();
                    objERR.err_title = controllerName + "-" + controllerName;
                    objERR.err_message = "Sorry for the inconvience. Some error has been occured.";
                    objERR.err_details = exe.Message.Replace("'", "");
                    int errid = bal.ExceptionInsertLogs_BL(objERR);
                    return Json("ERR" + errid.ToString(), JsonRequestBehavior.AllowGet);
                }
            }
            else
            {
                return Json("ET_SessionExpire", "ET_Login");
            }
        }
        //Get the product details
        public JsonResult ProductDetails(int id,int priceType)
        {
            bool val = Session["UserID"] == null ? false : true;
            if (val)
            {
                try
                {
                    dbcontext.Configuration.ProxyCreationEnabled = false;
                    var data = (from a in dbcontext.Tbl_Product_Master
                                where a.P_ID == id
                                select new
                                {
                                    a.P_PackingQuantityUOM,
                                    Description = (dbcontext.tbl_LookUp.FirstOrDefault(m => m.LU_Type == 2 && m.LU_Code == a.P_UOM).LU_Description),
                                    price = (priceType == 1 ? (dbcontext.Tbl_ProductCatalog.FirstOrDefault(m => m.ACTIVE_STATUS == true && m.PRODUCT_ID == a.P_ID).UNIT_PRICE1) : priceType == 2 ? (dbcontext.Tbl_ProductCatalog.FirstOrDefault(m => m.ACTIVE_STATUS == true && m.PRODUCT_ID == a.P_ID).UNIT_PRICE2) : priceType == 3 ? (dbcontext.Tbl_ProductCatalog.FirstOrDefault(m => m.ACTIVE_STATUS == true && m.PRODUCT_ID == a.P_ID).UNIT_PRICE3) : (dbcontext.Tbl_ProductCatalog.FirstOrDefault(m => m.ACTIVE_STATUS == true && m.PRODUCT_ID == a.P_ID).UNIT_PRICE4)) != null ? (priceType == 1 ? (dbcontext.Tbl_ProductCatalog.FirstOrDefault(m => m.ACTIVE_STATUS == true && m.PRODUCT_ID == a.P_ID).UNIT_PRICE1) : priceType == 2 ? (dbcontext.Tbl_ProductCatalog.FirstOrDefault(m => m.ACTIVE_STATUS == true && m.PRODUCT_ID == a.P_ID).UNIT_PRICE2) : priceType == 3 ? (dbcontext.Tbl_ProductCatalog.FirstOrDefault(m => m.ACTIVE_STATUS == true && m.PRODUCT_ID == a.P_ID).UNIT_PRICE3) : (dbcontext.Tbl_ProductCatalog.FirstOrDefault(m => m.ACTIVE_STATUS == true && m.PRODUCT_ID == a.P_ID).UNIT_PRICE4)) : 0,
                                    CustomerDef=a.P_Remark1,
                                    P_Description = a.P_Description
                                });
                    var json = new JavaScriptSerializer().Serialize(data);
                    return Json(json, JsonRequestBehavior.AllowGet);
                }
                catch (Exception exe)
                {
                    string actionName = this.ControllerContext.RouteData.Values["action"].ToString();
                    string controllerName = this.ControllerContext.RouteData.Values["controller"].ToString();
                    objERR.err_title = controllerName + "-" + controllerName;
                    objERR.err_message = "Sorry for the inconvience. Some error has been occured.";
                    objERR.err_details = exe.Message.Replace("'", "");
                    int errid = bal.ExceptionInsertLogs_BL(objERR);
                    return Json("ERR" + errid.ToString(), JsonRequestBehavior.AllowGet);
                }
            }
            else
            {
                return Json("ET_SessionExpire", "ET_Login");
            }
        }

        //GEt the discount
        public bool? IsTaxApplicable(int id)
        {
            bool val = Session["UserID"] == null ? false : true;
            if (val)
            {
                try
                {
                    dbcontext.Configuration.ProxyCreationEnabled = false;
                    var data = (from a in dbcontext.Tbl_Master_Order
                                where a.SO_ID == id
                                select a.SO_TaxApplicable).FirstOrDefault();
                    if (data == null)
                        return false;
                    else
                        return data;
                }
                catch (Exception exe)
                {
                    string actionName = this.ControllerContext.RouteData.Values["action"].ToString();
                    string controllerName = this.ControllerContext.RouteData.Values["controller"].ToString();
                    objERR.err_title = controllerName + "-" + controllerName;
                    objERR.err_message = "Sorry for the inconvience. Some error has been occured.";
                    objERR.err_details = exe.Message.Replace("'", "");
                    int errid = bal.ExceptionInsertLogs_BL(objERR);
                    return false;
                }
            }
            else
            {
                return false;
            }
        }

        //GEt the discount
        public JsonResult GetDiscount(int id)
        {
            bool val = Session["UserID"] == null ? false : true;
            if (val)
            {
                try
                {
                    dbcontext.Configuration.ProxyCreationEnabled = false;
                    var data = (from a in dbcontext.Tbl_Payment_Terms
                                where a.PT_ID == id
                                select new
                                {
                                    a.PT_DiscountType,
                                    a.PT_DiscountPer,
                                    a.PT_DiscountAmount,
                                }).ToList();
                    var json = new JavaScriptSerializer().Serialize(data);
                    return Json(json, JsonRequestBehavior.AllowGet);
                }
                catch (Exception exe)
                {
                    string actionName = this.ControllerContext.RouteData.Values["action"].ToString();
                    string controllerName = this.ControllerContext.RouteData.Values["controller"].ToString();
                    objERR.err_title = controllerName + "-" + controllerName;
                    objERR.err_message = "Sorry for the inconvience. Some error has been occured.";
                    objERR.err_details = exe.Message.Replace("'", "");
                    int errid = bal.ExceptionInsertLogs_BL(objERR);
                    return Json("ERR" + errid.ToString(), JsonRequestBehavior.AllowGet);
                }
            }
            else
            {
                return Json("ET_SessionExpire", "ET_Login");
            }
        }
        //public JsonResult ET_General_Order_saveOffer(int COMID,int PID, int Ofid)
        //{
        //    bool val = Session["UserID"] == null ? false : true;
        //    if (val)
        //    {
        //        try
        //        {
        //            var User = Convert.ToInt32(Session["UserID"]);
        //            var data = ObjBL.ET_General_Order_saveOffer_BL(COMID, PID, Ofid, User);
        //            var json = "Failed";
        //            if (data != 0)
        //            {
        //                json = "Success";
        //            }
        //            else
        //            {
        //                objLOG.log_dockey = "6014";
        //                objLOG.log_operation = "Supplier Offer";
        //                objLOG.log_userid = Session["UserID"].ToString();
        //                objLOG.log_recordkey = Ofid.ToString();
        //                objLOG.log_Remarks = "Supplier Offer Successfully";
        //                bal.OperationInsertLogs_BL(objLOG);
        //            }
        //            return Json(json, JsonRequestBehavior.AllowGet);
        //        }
        //        catch (Exception exe)
        //        {
        //            string actionName = this.ControllerContext.RouteData.Values["action"].ToString();
        //            string controllerName = this.ControllerContext.RouteData.Values["controller"].ToString();
        //            objERR.err_title = controllerName + "-" + controllerName;
        //            objERR.err_message = "Sorry for the inconvience. Some error has been occured.";
        //            objERR.err_details = exe.Message.Replace("'", "");
        //            int errid = bal.ExceptionInsertLogs_BL(objERR);
        //            return Json("ERR" + errid.ToString(), JsonRequestBehavior.AllowGet);
        //        }
        //    }
        //    else
        //    {
        //        return Json("ET_SessionExpire", "ET_Login");
        //    }
        //}
        //Get the customer and supplier
        public JsonResult GetCustomerSupplier(int id,int custsup)
        {

            bool val = Session["UserID"] == null ? false : true;
            if (val)
            {
                try
                {
                    using (EntityClasses dbcontext = new EntityClasses())
                    {
                        dbcontext.Configuration.ProxyCreationEnabled = false;
                        int companykey = Convert.ToInt32(Session["CompanyKey"]);
                        if (id == 0)
                        {
                            var Customer = dbcontext.Tbl_Master_CompanyDetails.Where(m => m.Cust_Supp != custsup && m.COM_KEY == companykey && m.DELETED == false).OrderBy(m => m.COM_NAME).ToList();
                            var json = new JavaScriptSerializer().Serialize(Customer);
                            return Json(json, JsonRequestBehavior.AllowGet);
                        }
                        else
                        {
                            if (custsup == 1)
                            {
                                var cust = dbcontext.Tbl_Master_Order.Single(m => m.SO_ID == id).SO_CutomerID;
                                var Customer = dbcontext.Tbl_Master_CompanyDetails.Where(m => m.Cust_Supp != custsup && m.COM_KEY == companykey && (m.DELETED == false || m.COM_ID == cust)).ToList();
                                var json = new JavaScriptSerializer().Serialize(Customer);
                                return Json(json, JsonRequestBehavior.AllowGet);
                            }
                            else
                            {
                                var cust = dbcontext.Tbl_Master_Order.Single(m => m.SO_ID == id).SO_SupplierID;
                                var Customer = dbcontext.Tbl_Master_CompanyDetails.Where(m => m.Cust_Supp != custsup && m.COM_KEY == companykey && (m.DELETED == false || m.COM_ID == cust)).ToList();
                                var json = new JavaScriptSerializer().Serialize(Customer);
                                return Json(json, JsonRequestBehavior.AllowGet);
                            }
                        }
                    }
                }
                catch (Exception exe)
                {
                    string actionName = this.ControllerContext.RouteData.Values["action"].ToString();
                    string controllerName = this.ControllerContext.RouteData.Values["controller"].ToString();
                    objERR.err_title = controllerName + "-" + controllerName;
                    objERR.err_message = "Sorry for the inconvience. Some error has been occured.";
                    objERR.err_details = exe.Message.Replace("'", "");
                    int errid = bal.ExceptionInsertLogs_BL(objERR);
                    return Json("ERR" + errid.ToString(), JsonRequestBehavior.AllowGet);
                }
            }
            else
            {
                return Json("Expired", JsonRequestBehavior.AllowGet);
            }
        }
    }
}