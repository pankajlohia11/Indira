app1.controller("AC_QuotationCtrl", function ($scope, $http, $window, $compile) {
    GetPrivilages();
    GetQuotationList();
    GetCustomerList();
    GetSalesPersonList();
    GetProductList();
    GetCurrency();
    PaymentTerms();
    function GetPrivilages() {
        var getprivilages = $http.get("/ET_Sales_Quotation/GetPrivilages");
        getprivilages.then(function (privilage1) {
            var privilage = JSON.parse(privilage1.data);
            if (privilage.length != 0) {
                $scope.Iscreate = privilage[0].IS_ADD;
                $scope.Isedit = privilage[0].IS_EDIT;
                $scope.Isdelete = privilage[0].IS_DELETE;
                $scope.Isrestore = privilage[0].IS_FULLCONTROL;
                $scope.Isview = privilage[0].IS_VIEW;
            }
            else {
                $scope.Iscreate = true;
                $scope.Isedit = true;
                $scope.Isdelete = true;
                $scope.Isrestore = true;
                $scope.Isview = true;
            }
        }, function () {
            alert('Privilages Not Found');
        }
        );
    }
    function GetQuotationList() {
        var getquotationlist = $http.get("/ET_Sales_Quotation/GetQuotationList",
            {
                params: { delete: false }
            });
        getquotationlist.then(function (quotationlist) {
            var res = JSON.parse(quotationlist.data);
            $scope.quotationlist = res;
        }, function () {
            alert("Quotation List Found");
        });
    }
    function GetQuotationRestoreList() {
        var getquotationrestorelist = $http.get("/ET_Sales_Quotation/GetQuotationList",
            {
                params: { delete: true }
            });
        getquotationrestorelist.then(function (quotationrestorelist) {
            var res = JSON.parse(quotationrestorelist.data);
            $scope.quotationrestorelist = res;
        }, function () {
            alert("Quotation Restore List Found");
        });
    }
    function GetCustomerList() {
        var getcustomerlist = $http.get("/ET_Sales_Quotation/GetCustomers");
        getcustomerlist.then(function (customerlist) {
            var res = JSON.parse(customerlist.data);
            $scope.customers = res;
            $scope.Q_CustomerID = "";
        }, function () {
            alert("Customer Not Found");
        });
    }
  
    function GetCurrency() {
        var getcurrencylist = $http.get("/ET_Sales_Quotation/GetCurrency");
        getcurrencylist.then(function (currencylist) {
            var res = JSON.parse(currencylist.data);
            $scope.currencylist = res;
            $scope.Q_CurrencyCode = "";
        }, function () {
            alert("Currency Not Found");
        });
    }
    function GetSalesPersonList() {
        var getsalespersonlist = $http.get("/ET_Sales_Quotation/GetSalesPerson");
        getsalespersonlist.then(function (salespersonlist) {
            var res = JSON.parse(salespersonlist.data);
            $scope.salespersons = res;
            $scope.Q_Sales_Person = "";
        }, function () {
            alert('Data not found');
        });
    }
    function PaymentTerms() {
        $http({
            method: 'POST',
            url: '/ET_General_Order_Details/Payment_terms_dropdown',
        }).success(function (data) {
            var payment = JSON.parse(data)
            $scope.paymenttermlist = payment;
            $scope.Q_PaymentTerms = "";
        });
    }
    function GetProductList() {
        var getproductlist = $http.get("/ET_Sales_Quotation/GetProducts");
        getproductlist.then(function (productlist) {
            var res = JSON.parse(productlist.data);
            $scope.products = res;
            $scope.selectedproduct = "";
        }, function () {
            alert('Data not found');
        });
    }
    $scope.CustomerChange = function () {
        debugger;
        $scope.Q_EnquiryID = "0";
        $("#drpEnquiry").val("0").trigger("chosen:updated");
        GetEnquiries();
    }
    function GetEnquiries() {
        debugger;
        if ($scope.Q_CustomerID != "" && $scope.Q_Type != "") {
            var getenquirylist = $http.get("/ET_Sales_Quotation/GetEnquiries",
                {
                    params: { id: $scope.Q_CustomerID, type: $scope.Q_Type }
                });
            getenquirylist.then(function (enquirylist) {
                var res = JSON.parse(enquirylist.data);
                $scope.enquiries = res;
            }, function () {
                alert("Enquires Not Found");
            });
        }
        else {
            message = "Select Type";
            toastr["error"](message, "Notification");
            $scope.Q_CustomerID == "";
            $("#drpCustomer").val("").trigger("chosen:updated");
        }

    }
    $scope.EnquiryChange = function ()
    {
        $("#txtTotalValue").val("0");
        EnquiryDetails($scope.Q_EnquiryID);
    }
    $scope.TypeChange = function () {
        if ($scope.Q_CustomerID != "" && $scope.Q_Type != "") {
            GetEnquiries();
        }
    }
    $scope.CurrencyChange = function () {}
    $scope.SalesPersonChange = function () {
    }
    $scope.addnewrow = function (a) {
        
        var e = a.target;
        var tr = $("#quotationdetailsbody").find("tr");
        var txt = "";
        for (var i = 0; i < tr.length; i++) {
            var td = tr[i].cells;
            var Product = $(td[0]).find("select").val();
            var Price = $(td[3]).find("input").val();
            var Qty = $(td[4]).find("input").val();
            var Tax = $(td[6]).find("input").val();
            if (Product == "") {
                message = "Select Product at row " + (i + 1);
                toastr["error"](message, "Notification");
                txt = "asd";
            }
            else if (Price == "") {
                message = "Enter the Price at row " + (i + 1);
                toastr["error"](message, "Notification");
                txt = "asd";
            }
            else if (Qty == "") {
                message = "Enter the Quantity at row " + (i + 1);
                toastr["error"](message, "Notification");
                txt = "asd";
            }
            else if (Tax == "") {
                message = "Enter the Tax at row " + (i + 1);
                toastr["error"](message, "Notification");
                txt = "asd";
            }
        }
        if (txt == "") {
            var Rowhtml = "<tr><td><select class='form-control' id='drpProduct' onchange='ProductChange(this);'><option value=''>-Select-</option><option ng-repeat='product in products' value='{{ product.P_ID }}'>{{ product.P_ArticleNo + '-' +product.P_ShortName  }}</option ></select></td><td><input type='text' id='txtUOM' class='form-control' readonly='readonly'/></td><td><input type='text' id='txtPrice' readonly='readonly' style='text-align: right;' class='form-control' onchange='calculateamount(this);'/></td><td><input type='text' id='txtQuantity' style='text-align: right;' onchange='calculateamount(this);' class='form-control' /></td><td><input type='text' id='txtAmount' style='text-align: right;' class='form-control' readonly='readonly' /></td><td><input type='text' id='txtDescription' class='form-control'  /></td><td><a style='padding: 5px;' ng-click='addnewrow($event)'><i class='fa fa-plus'></i></a><a style='padding: 5px;color:red' ng-click='deleterow($event)'><i class='fa fa-trash'></i></a></td></tr>";
            var temp = $compile(Rowhtml)($scope);
            angular.element(document.getElementById('quotationdetailsbody')).append(temp);
        }
    }

    $scope.deleterow = function (a) {
        var e = a.target;
        var len = $("#quotationdetailsbody").find("tr").length;
        if (len != 1) {
            $(e).parent().parent().parent().fadeOut(300, function () { $(this).remove(); });
        }
        else {
            message = "Atleast one Product required";
            toastr["error"](message, "Notification");
        }
    }
    $scope.showRecords = function () {
        $("#advancedusage").dataTable().fnDestroy();
        GetQuotationList();
        $("#div_View").css("display", "block");
        $("#div_Restore").css("display", "none");
        $("#div_Edit").css("display", "none");
        $("#div_Print").css("display", "none");
    }
    $scope.restoreRecords = function () {
        $("#advancedusageRestore").dataTable().fnDestroy();
        GetQuotationRestoreList();
        $("#div_View").css("display", "none");
        $("#div_Restore").css("display", "block");
        $("#div_Edit").css("display", "none");
        $("#div_Print").css("display", "none");
    }
    $scope.createnew = function () {
        if ($scope.Iscreate) {
            $("#formSubmit").attr('disabled', "disabled");
            $("#div_View").css("display", "none");
            $("#div_Edit").css("display", "block");
            $("#div_Print").css("display", "none");
            $scope.submittext = "Submit";
            $scope.createedit = "Create";
            $scope.Q_ID = "0";
            $scope.Q_Code = "";
            $scope.Q_CustomerID = "";
            $scope.Q_EnquiryID = "0";
            $scope.Q_CurrencyCode = "";
            $scope.Q_PaymentTerms = "";
            $scope.Q_DeliveryTerms = "";
            $scope.Q_ValidityDays = "";
            $scope.Q_Freight_Cost = "";
            $scope.Q_Enclosures = "";
            $scope.Q_TotalValue = "";
            $scope.Q_Sales_Person = "";
            $scope.Q_PaymentTerms = "";
            $scope.Q_Quotedescription = "";
            $scope.Q_specialdescription = "";
            $scope.Q_Type = "";
            $scope.Q_TotalValue = "";
            $("#txtTotalValue").val("");
            $("#drpType").val("").trigger("chosen:updated");
            $("#txtQDate").val("");
            $("#drpCustomer").val("").trigger("chosen:updated");
            $("#drpEnquiry").val("").trigger("chosen:updated");
            $("#drpSalesPerson").val("").trigger("chosen:updated");
            $("#drpPaymentTerms").val("").trigger("chosen:updated");
            $("#drpCurrency").val("").trigger("chosen:updated");
            $("#chkWarrenty").prop('checked', false);
            var Rowhtml = "<tr><td><select class='form-control' id='drpProduct' onchange='ProductChange(this);'><option value=''>-Select-</option><option ng-repeat='product in products' value='{{ product.P_ID }}'>{{ product.P_ArticleNo + '-' +product.P_ShortName  }}</option ></select></td><td><input type='text' id='txtUOM' class='form-control' readonly='readonly'/></td><td><input type='text' id='txtPrice' readonly='readonly' style='text-align: right;' class='form-control' onchange='calculateamount(this);'/></td><td><input type='text' id='txtQuantity' style='text-align: right;' onchange='calculateamount(this);' class='form-control' /></td><td><input type='text' id='txtAmount' style='text-align: right;' class='form-control' readonly='readonly' /></td><td><input type='text' id='txtDescription' class='form-control'  /></td><td><a style='padding: 5px;' ng-click='addnewrow($event)'><i class='fa fa-plus'></i></a><a style='padding: 5px;color:red' ng-click='deleterow($event)'><i class='fa fa-trash'></i></a></td></tr>";
            var temp = $compile(Rowhtml)($scope);
            angular.element(document.getElementById('quotationdetailsbody')).html("");
            angular.element(document.getElementById('quotationdetailsbody')).append(temp);
        }
        else {
            message = "You don't access to do this operation, please contact admin.";
            toastr["error"](message, "Notification");
        }
    }
    function validate() {
        var tr = $("#quotationdetailsbody").find("tr");
        var txt = "";
        if ($scope.Q_Type == "") {
            message = "Select Type";
            toastr["error"](message, "Notification");
            return "";
        }
        if ($("#txtQDate").val() == "") {
            message = "Select Quotation Date";
            toastr["error"](message, "Notification");
            return "";
        }
        if ($scope.Q_CustomerID == "") {
            message = "Select Customer";
            toastr["error"](message, "Notification");
            return "";
        }
        if ($scope.Q_Sales_Person == "") {
            message = "Select Sales Person";
            toastr["error"](message, "Notification");
            return "";
        }
        if ($scope.Q_CurrencyCode == "") {
            message = "Select Currency";
            toastr["error"](message, "Notification");
            return "";
        }
        if ($("#txtTotalValue").val() == "") {
            message = "Total Value Cannot be empty. Select Products";
            toastr["error"](message, "Notification");
            return "";
        }
        if ($scope.Q_ValidityDays == "") {
            message = "Enter Validity Days";
            toastr["error"](message, "Notification");
            return "";
        }
        for (i = 0; i < tr.length; i++) {
            var td = $(tr[i]).find("td");
            var product = $(td[0]).find("select").val();
            var price = $(td[2]).find("input").val();
            var qty = $(td[3]).find("input").val();
            if (product == "") {
                message = "Select Product Name at row:" + (i + 1);
                toastr["error"](message, "Notification");
                return "";
            } else if (price == "") {
                message = "There is no Price for this Product in Price Catalog at row:" + (i + 1);
                toastr["error"](message, "Notification");
                return "";
            }
            else if (parseFloat(price.split('.').join("").replace(",", ".")) == 0) {
                message = "There is no Price for this Product in Price Catalog at row:" + (i + 1);
                toastr["error"](message, "Notification");
                return "";
            }
            else if (qty == "") {
                message = "Enter Quantity at row:" + (i + 1);
                toastr["error"](message, "Notification");
                return "";
            }
            else if (parseFloat(qty.split('.').join("").replace(",", ".")) == 0) {
                message = "Enter Quantity at row:" + (i + 1);
                toastr["error"](message, "Notification");
                return "";
            }
            else if (parseFloat($(td[4]).find("input").val().split('.').join("").replace(",", ".")) == 0) {
                message = "Amount cannot be 0 at row:" + (i + 1);
                toastr["error"](message, "Notification");
                return "";
            }
            else {
                txt = txt + $(td[0]).find("select").val() + ",";
                txt = txt + $(td[0]).find("select option:selected").text() + ",";
                txt = txt + parseFloat($(td[2]).find("input").val().split('.').join("").replace(",", ".")) + ",";
                txt = txt + parseFloat($(td[3]).find("input").val().split('.').join("").replace(",", ".")) + ",";
                txt = txt + parseFloat($(td[4]).find("input").val().split('.').join("").replace(",", ".")) + ","; 
                txt = txt + $(td[5]).find("input").val() + "|";
            }
        }
        return txt;
    }
    $scope.SubmitClick = function () {
        
        var txt = validate();
        var date = $("#txtQDate").val();
        if ($scope.Q_Freight_Cost == "")
            $scope.Q_Freight_Cost = "0";
        if (txt != "") {
            debugger;
            var post = $http({
                method: "POST",
                url: "/ET_Sales_Quotation/ET_Master_Quotation_Add",
                dataType: 'json',
                data: {
                    Q_ID :  $scope.Q_ID,
                    Q_Code: $scope.Q_Code,
                    Q_Type: $scope.Q_Type,
                    Q_Date:date,
                    Q_CustomerID :$scope.Q_CustomerID,
                    Q_EnquiryID :$scope.Q_EnquiryID,
                    Q_CurrencyCode :$scope.Q_CurrencyCode,
                    Q_PaymentTerms:$scope.Q_PaymentTerms,
                    Q_DeliveryTerms:$scope.Q_DeliveryTerms,
                    Q_ValidityDays:$scope.Q_ValidityDays,
                    Q_Freight_Cost: parseFloat($scope.Q_Freight_Cost.split('.').join("").replace(",", ".")),
                    Q_Enclosures:$scope.Q_Enclosures,
                    Q_TotalValue: parseFloat($("#txtTotalValue").val().split('.').join("").replace(",", ".")),
                    Q_Sales_Person:$scope.Q_Sales_Person,
                    Q_Quotedescription :$scope.Q_Quotedescription,
                    Q_specialdescription:$scope.Q_specialdescription,
                    QuotationDetails: txt
                },
                headers: { "Content-Type": "application/json" }
            });

            post.success(function (data, status) {

                if (data == "Session Expired") {
                    $window.location.href = '/ET_Login/ET_SessionExpire';
                }
                else if (data.indexOf("ERR") > -1) {
                    $("#spanErrMessage1").html(data);
                    $("#spanErrMessage2").html(data);
                    if ($("#exceptionmessage").length)
                        $("#exceptionmessage").trigger("click");
                }
                else if (data.indexOf("Validation") > -1) {
                    toastr["error"](data, "Notification");
                }
                else if (data.indexOf("Success") > -1) {
                    var res = data.split(':');
                    if ($scope.Q_ID == 0) {
                        message = 'Record Inserted Successfully With Code : ' + res[1];
                        toastr["success"](message, "Notification");
                    }
                    else {
                        message = 'Record Updated Successfully With Code : ' + res[1];
                        toastr["success"](message, "Notification");
                    }
                    $scope.createnew();
                }
                else {
                    message = "Failed to do this operation.";
                    toastr["error"](message, "Notification");
                }
            });

            post.error(function (data, status) {
                $window.alert(data.Message);
            });
        }

    }
    $scope.editRecords = function (a) {
        a = parseInt(a);
        if ($scope.Isedit) {
            var post = $http({
                method: "POST",
                url: "/ET_Sales_Quotation/ET_Master_Quotation_Update_GetbyID",
                dataType: 'json',
                data: {
                    id: a
                },
                headers: { "Content-Type": "application/json" }
            });
            post.success(function (data, status) {
                if (data == "Session Expired") {
                    $window.location.href = '/ET_Login/ET_SessionExpire';
                }
                else if (data.indexOf("ERR") > -1) {
                    $("#spanErrMessage1").html(data);
                    $("#spanErrMessage2").html(data);
                    if ($("#exceptionmessage").length)
                        $("#exceptionmessage").trigger("click");
                }
                else {
                    var QuotationByID = JSON.parse(data);
                    $("#formSubmit").removeAttr('disabled');
                    $("#div_View").css("display", "none");
                    $("#div_Edit").css("display", "block");
                    $("#div_Print").css("display", "none");
                    $scope.submittext = "Update";
                    $scope.createedit = "Edit";
                    $("#span_tabtext").html("Edit");
                    
                    $scope.Q_ID = QuotationByID.Q_ID;
                    $scope.Q_Code = QuotationByID.Q_Code;
                    $scope.Q_Type = QuotationByID.Q_Type;
                    $scope.Q_CustomerID = QuotationByID.Q_CustomerID;
                    $scope.Q_EnquiryID = QuotationByID.Q_EnquiryID;
                    $scope.Q_CurrencyCode = QuotationByID.Q_CurrencyCode;
                    $scope.Q_PaymentTerms = QuotationByID.Q_PaymentTerms;
                    $scope.Q_DeliveryTerms = QuotationByID.Q_DeliveryTerms;
                    $scope.Q_ValidityDays = QuotationByID.Q_ValidityDays;
                    $scope.Q_Freight_Cost = parseFloat(QuotationByID.Q_Freight_Cost).toLocaleString("es-ES", { minimumFractionDigits: 3 });
                    $scope.Q_Enclosures = QuotationByID.Q_Enclosures;
                    $scope.Q_TotalValue = parseFloat(QuotationByID.Q_TotalValue).toLocaleString("es-ES", { minimumFractionDigits: 3 });
                    $scope.Q_Sales_Person = QuotationByID.Q_Sales_Person;
                    $scope.Q_Quotedescription = QuotationByID.Q_Quotedescription;
                    $scope.Q_specialdescription = QuotationByID.Q_specialdescription;

                    var Quotationdate = new Date(parseInt(QuotationByID.Q_Date.substr(6)));
                    var QDT = ("0" + Quotationdate.getDate()).slice(-2) + "-" + ("0" + (Quotationdate.getMonth() + 1)).slice(-2)+ "-" + Quotationdate.getFullYear();
                    $("#txtQDate").val(QDT);
                    $("#drpType").val($scope.Q_Type).trigger("chosen:updated");
                    $("#drpCustomer").val($scope.Q_CustomerID).trigger("chosen:updated");
                    GetEnquiries();
                    $("#drpSalesPerson").val($scope.Q_Sales_Person).trigger("chosen:updated");
                    $("#drpPaymentTerms").val($scope.Q_PaymentTerms).trigger("chosen:updated");
                    $("#drpCurrency").val($scope.Q_CurrencyCode).trigger("chosen:updated");
                    QuotationDetails(QuotationByID.Q_ID);
                }
            });

            post.error(function (data, status) {
                $window.alert(data.Message);
            });
        }
        else {
            message = "You don't access to do this operation, please contact admin.";
            toastr["error"](message, "Notification");
        }
    }
    function QuotationDetails(e) {
        var id = e;
        $http({
            method: 'POST',
            url: '/ET_Sales_Quotation/ET_Master_Quatation_Details',
            data: {
                id: id,
            },
        }).success(function (data) {
            
            var enquirydata = JSON.parse(data)
            var i = enquirydata.length;
            var j = 0;
            angular.element(document.getElementById('quotationdetailsbody')).html("");
            while (i != 0) {
                var Rowhtml = "<tr><td><select class='form-control' id='drpProduct' onchange='ProductChange(this);'><option value=''>-Select-</option><option ng-repeat='product in products' value='{{ product.P_ID }}'>{{ product.P_ArticleNo + '-' +product.P_ShortName  }}</option ></select></td><td><input type='text' id='txtUOM' class='form-control' readonly='readonly'/></td><td><input type='text' id='txtPrice' readonly='readonly' style='text-align: right;' class='form-control' onchange='calculateamount(this);'/></td><td><input type='text' id='txtQuantity' style='text-align: right;' onchange='calculateamount(this);' class='form-control' /></td><td><input type='text' id='txtAmount' style='text-align: right;' class='form-control' readonly='readonly' /></td><td><input type='text' id='txtDescription' class='form-control'  /></td><td><a style='padding: 5px;' ng-click='addnewrow($event)'><i class='fa fa-plus'></i></a><a style='padding: 5px;color:red' ng-click='deleterow($event)'><i class='fa fa-trash'></i></a></td></tr>";
                var temp = $compile(Rowhtml)($scope);
                angular.element(document.getElementById('quotationdetailsbody')).append(temp);
                i--;
                j++;
            }
            $scope.enquirydata1 = enquirydata;
        });
    }
    function EnquiryDetails(e) {
        var id = e;
        $http({
            method: 'POST',
            url: '/ET_Sales_Quotation/ET_Master_Enquiry_Details',
            data: {
                id: id,
            },
        }).success(function (data) {
            
            var enquirydata = JSON.parse(data)
            var i = enquirydata.length;
            var j = 0;
            angular.element(document.getElementById('quotationdetailsbody')).html("");
            while (i != 0) {
                var Rowhtml = "<tr><td><select class='form-control' id='drpProduct' onchange='ProductChange(this);'><option value=''>-Select-</option><option ng-repeat='product in products' value='{{ product.P_ID }}'>{{ product.P_ArticleNo + '-' +product.P_ShortName  }}</option ></select></td><td><input type='text' id='txtUOM' class='form-control' readonly='readonly'/></td><td><input type='text' id='txtPrice' readonly='readonly' style='text-align: right;' class='form-control' onchange='calculateamount(this);'/></td><td><input type='text' id='txtQuantity' style='text-align: right;' onchange='calculateamount(this);' class='form-control' /></td><td><input type='text' id='txtAmount' style='text-align: right;' class='form-control' readonly='readonly' /></td><td><input type='text' id='txtDescription' class='form-control'  /></td><td><a style='padding: 5px;' ng-click='addnewrow($event)'><i class='fa fa-plus'></i></a><a style='padding: 5px;color:red' ng-click='deleterow($event)'><i class='fa fa-trash'></i></a></td></tr>";
                var temp = $compile(Rowhtml)($scope);
                angular.element(document.getElementById('quotationdetailsbody')).append(temp);
                i--;
                j++;
            }
            $scope.enquirydata1 = enquirydata;
        });
    }
    $scope.Restoredeleterecords = function (a, $event, b) {

        var res = false;
        if (b)
            res = $scope.Isdelete;
        else
            res = $scope.Isrestore
        if (res) {
            var post = $http({
                method: "POST",
                url: "/ET_Sales_Quotation/ET_Master_Quotation_RestoreDelete",
                dataType: 'json',
                data: {
                    id: a,
                    type: b
                },
                headers: { "Content-Type": "application/json" }
            });
            post.success(function (data, status) {
                if (data == "Session Expired") {
                    $window.location.href = '/ET_Login/ET_SessionExpire';
                }
                else if (data.indexOf("ERR") > -1) {
                    $("#spanErrMessage1").html(data);
                    $("#spanErrMessage2").html(data);
                    if ($("#exceptionmessage").length)
                        $("#exceptionmessage").trigger("click");
                }
                else {
                    if (data == "Success") {
                        $($event.target.parentElement.parentElement.parentElement).fadeOut(800, function () { $(this).remove(); });
                        if (b) {
                            message = "Record Deleted Successfully.";
                        }
                        else {
                            message = "Record Restored Successfully.";
                        }

                        toastr["success"](message, "Notification");
                    }
                    else {
                        message = "Failed to do this operation.";
                        toastr["error"](message, "Notification");
                    }
                }
            });
            post.error(function (data, status) {
                $window.alert(data.Message);
            });
        }
    }
    $scope.ViewRecords = function (a) {
        a = parseInt(a);
        if ($scope.Isview) {
            var post = $http({
                method: "POST",
                url: "/ET_Sales_Quotation/ET_Master_Quotation_View",
                dataType: 'html',
                data: {
                    id: a
                },
                headers: { "Content-Type": "application/json" }
            });
            post.success(function (data, status) {
                if (data == "Session Expired") {
                    $window.location.href = '/ET_Login/ET_SessionExpire';
                }
                else if (data.indexOf("ERR") > -1) {
                    $("#spanErrMessage1").html(data);
                    $("#spanErrMessage2").html(data);
                    if ($("#exceptionmessage").length)
                        $("#exceptionmessage").trigger("click");
                }
                else {
                    
                    $('#viewpopup').html(data);
                    $("#btnviewpopup").trigger("click");
                    //var privilage = JSON.parse(data);
                    //$scope.txtMaterialCodeView = privilage[0].MATERIAL_CODE;
                    //$scope.txtMaterialnameView = privilage[0].MATERIAL_NAME;
                    //$scope.txtDescriptionView = privilage[0].MATERIAL_DESCRIPTION;
                    //if (privilage[0].COTTON_PER == 1)
                    //    $scope.chkCottonView = true;
                    //else
                    //    $scope.chkCottonView = false;
                    //$rootScope.$emit("CallParentMethod", { a: $scope.txtMaterialCodeView, b: $scope.txtMaterialnameView, c: $scope.txtDescriptionView, d: $scope.chkCottonView });

                }
            });

            post.error(function (data, status) {
                $window.alert(data.Message);
            });
        }
        else {
            message = "You don't access to do this operation, please contact admin.";
            toastr["error"](message, "Notification");
        }
    }
    $scope.ChangeLanguage = function (lang) {
        debugger;
        var id = 0;
        if (lang == "E") {
            id = parseInt($("#germanformat").val());
        }
        else {
            id = parseInt($("#englishformat").val());
        }
        $scope.PrintRecords(id, lang);
    }
    $scope.PrintRecords = function (a, b) {
        
        a = parseInt(a);
        if ($scope.Isview) {
            var post = $http({
                method: "POST",
                url: "/ET_Sales_Quotation/ET_Master_Quotation_Print",
                dataType: 'html',
                data: {
                    id: a,
                    lang: b
                },
                headers: { "Content-Type": "application/json" }
            });
            post.success(function (data, status) {
                if (data == "Session Expired") {
                    $window.location.href = '/ET_Login/ET_SessionExpire';
                }
                else if (data.indexOf("ERR") > -1) {
                    $("#spanErrMessage1").html(data);
                    $("#spanErrMessage2").html(data);
                    if ($("#exceptionmessage").length)
                        $("#exceptionmessage").trigger("click");
                }
                else {
                    
                    $('#div_PrintContent').html(data);
                    $("#div_View").css("display", "none");
                    $("#div_Restore").css("display", "none");
                    $("#div_Edit").css("display", "none");
                    $("#div_Print").css("display", "block");
                }
            });

            post.error(function (data, status) {
            });
        }
        else {
            message = "You don't access to do this operation, please contact admin.";
            toastr["error"](message, "Notification");
        }
    }
    $scope.$watch("customers", function (value) {
        var val = value || null;
        if (val) {
            setTimeout(function () { $("#drpCustomer").val($scope.Q_CustomerID).trigger("chosen:updated"); }, 100);
        }
    });
    $scope.$watch("enquiries", function (value) {
        var val = value || null;
        if (val) {
            setTimeout(function () { $("#drpEnquiry").val($scope.Q_EnquiryID).trigger("chosen:updated"); }, 100);
        }
    });
    $scope.$watch("salespersons", function (value) {
        var val = value || null;
        if (val) {
            setTimeout(function () { $("#drpSalesPerson").val($scope.Q_Sales_Person).trigger("chosen:updated"); }, 100);
        }
    });
    $scope.$watch("currencylist", function (value) {
        var val = value || null;
        if (val) {
            setTimeout(function () { $("#drpCurrency").val($scope.Q_CurrencyCode).trigger("chosen:updated"); }, 100);
        }
    });
    $scope.$watch("paymenttermlist", function (value) {
        var val = value || null;
        if (val) {
            setTimeout(function () { $("#drpPaymentTerms").val($scope.Q_PaymentTerms).trigger("chosen:updated"); }, 100);
        }
    });
    $scope.$watch("quotationlist", function (value) {
        var val = value || null;
        if (val) {
            setTimeout(function () {
                dynamicDataTable('#advancedusage', '#tableTools', '#colVis');
            }, 5);
        }
    });
    $scope.$watch("quotationrestorelist", function (value) {
        var val = value || null;
        if (val) {
            setTimeout(function () {
                dynamicDataTable('#advancedusageRestore', '#tableToolsRestore', '#colVisRestore');
            }, 5);
        }
    });
    $scope.$watch("enquirydata1", function (value) {
        var val = value || null;
        if (val) {
            var enquirydata = $scope.enquirydata1;
            setTimeout(function () {

                var tr = $("#quotationdetailsbody").find("tr");
                var total = 0;
                for (var i = 0; i < tr.length; i++) {
                    var td = tr[i].cells;
                    $(td[0]).find("select").val(enquirydata[i].QD_ProductID);
                    $(td[1]).find("input").val(enquirydata[i].QD_UOM);
                    if (enquirydata[i].QD_Unit_Price == "")
                        enquirydata[i].QD_Unit_Price = "0";
                    $(td[2]).find("input").val(parseFloat(enquirydata[i].QD_Unit_Price).toLocaleString("es-ES", { minimumFractionDigits: 3 }));
                    $(td[3]).find("input").val(parseFloat(enquirydata[i].QD_Quantity).toLocaleString("es-ES", { minimumFractionDigits: 3 }));
                    $(td[4]).find("input").val(parseFloat(enquirydata[i].QD_Unit_Price * enquirydata[i].QD_Quantity).toLocaleString("es-ES", { minimumFractionDigits: 3 }));
                    $(td[5]).find("input").val(enquirydata[i].QD_Description);
                    total = total + parseFloat(enquirydata[i].QD_Unit_Price * enquirydata[i].QD_Quantity);
                }
                $("#txtTotalValue").val(total.toLocaleString("es-ES", { minimumFractionDigits: 3 }));
            }, 100);
        }
    });

});