using BusinessEntity.CustomModels;
using BusinessEntity.EntityModels;
using BusinessLogic;
using iTextSharp.text;
using iTextSharp.text.pdf;
using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Net;
using System.Net.Mail;
using System.Web;
using System.Web.Mvc;
using System.Web.Script.Serialization;

namespace Euro.Controllers.Sales
{
    public class ET_Sales_ShipmentController : Controller
    {
        
        public static string prefix = "";
        public static bool automanual = false;
        BAL bal = new BAL();
        error_master objERR = new error_master();
        tbl_loginfo objLOG = new tbl_loginfo();
        EntityClasses dbcontext = new EntityClasses();
        // GET: ET_Sales_Shipment
        public ActionResult ET_Sales_Shipment(string type)
        {
            bool val = Session["UserID"] == null ? false : true;
            if (val)
            {
                if (type != null)
                {
                    if (type == "Agency" || type == "Trading")
                    {
                        try
                        {
                            AutoManual();
                            ViewBag.Login_Name = Session["DisplayName"].ToString();
                            return View();

                        }
                        catch (Exception exe)
                        {
                            string actionName = this.ControllerContext.RouteData.Values["action"].ToString();
                            string controllerName = this.ControllerContext.RouteData.Values["controller"].ToString();
                            objERR.err_title = controllerName + "-" + controllerName;
                            objERR.err_message = "Sorry for the inconvience. Some error has been occured.";
                            objERR.err_details = exe.Message.Replace("'", "");
                            int errid = bal.ExceptionInsertLogs_BL(objERR);
                            return Json("ERR" + errid.ToString(), JsonRequestBehavior.AllowGet);
                        }
                    }
                    else
                    {
                        return RedirectToAction("ET_InvalidRequest", "ET_Login");
                    }
                }
                else
                {
                    return RedirectToAction("ET_InvalidRequest", "ET_Login");
                }
            }
            else
            {
                return RedirectToAction("ET_SessionExpire", "ET_Login");
            }
        }
        public ActionResult ET_Sales_SchduletoShipment(string type)
        {
            bool val = Session["UserID"] == null ? false : true;
            if (val)
            {
                if (type != null)
                {
                    if (type == "Agency" || type == "Trading" )
                    {
                        try
                        {
                            AutoManual();
                            ViewBag.Login_Name = Session["DisplayName"].ToString();
                            return View();

                        }
                        catch (Exception exe)
                        {
                            string actionName = this.ControllerContext.RouteData.Values["action"].ToString();
                            string controllerName = this.ControllerContext.RouteData.Values["controller"].ToString();
                            objERR.err_title = controllerName + "-" + controllerName;
                            objERR.err_message = "Sorry for the inconvience. Some error has been occured.";
                            objERR.err_details = exe.Message.Replace("'", "");
                            int errid = bal.ExceptionInsertLogs_BL(objERR);
                            return Json("ERR" + errid.ToString(), JsonRequestBehavior.AllowGet);
                        }
                    }
                    else
                    {
                        return RedirectToAction("ET_InvalidRequest", "ET_Login");
                    }
                }
                else
                {
                    return RedirectToAction("ET_InvalidRequest", "ET_Login");
                }
            }
            else
            {
                return RedirectToAction("ET_SessionExpire", "ET_Login");
            }
        }
        public ActionResult ET_Sales_ShipmentList()
        {
            bool val = Session["UserID"] == null ? false : true;
            if (val)
            {

                try
                {
                    AutoManual();
                    ViewBag.Login_Name = Session["DisplayName"].ToString();
                    return View();

                }
                catch (Exception exe)
                {
                    string actionName = this.ControllerContext.RouteData.Values["action"].ToString();
                    string controllerName = this.ControllerContext.RouteData.Values["controller"].ToString();
                    objERR.err_title = controllerName + "-" + controllerName;
                    objERR.err_message = "Sorry for the inconvience. Some error has been occured.";
                    objERR.err_details = exe.Message.Replace("'", "");
                    int errid = bal.ExceptionInsertLogs_BL(objERR);
                    return Json("ERR" + errid.ToString(), JsonRequestBehavior.AllowGet);


                }
            }
            else
            {
                return RedirectToAction("ET_SessionExpire", "ET_Login");
            }
        }
        public ActionResult ET_Sales_DocumentList()
        {
            bool val = Session["UserID"] == null ? false : true;
            if (val)
            {

                try
                {
                    AutoManual();
                    ViewBag.Login_Name = Session["DisplayName"].ToString();
                    return View();

                }
                catch (Exception exe)
                {
                    string actionName = this.ControllerContext.RouteData.Values["action"].ToString();
                    string controllerName = this.ControllerContext.RouteData.Values["controller"].ToString();
                    objERR.err_title = controllerName + "-" + controllerName;
                    objERR.err_message = "Sorry for the inconvience. Some error has been occured.";
                    objERR.err_details = exe.Message.Replace("'", "");
                    int errid = bal.ExceptionInsertLogs_BL(objERR);
                    return Json("ERR" + errid.ToString(), JsonRequestBehavior.AllowGet);


                }
            }
            else
            {
                return RedirectToAction("ET_SessionExpire", "ET_Login");
            }
        }
        private void AutoManual()
        {
            ViewBag.AutoManual = false;
            automanual = false;
            List<Tbl_Document_Master> ObjDoc = bal.AutoManual_BL(3009);
            if (ObjDoc.Count > 0)
            {
                foreach (var item in ObjDoc)
                {
                    if (item.autogen_type == "Automatic")
                    {
                        ViewBag.AutoManual = true;
                        prefix = item.autogen_prefix;
                        automanual = true;
                    }
                    else
                    {
                        ViewBag.Required = "required";
                    }
                }
            }
        }

        public JsonResult GetPrivilages()
        {

            bool val = Session["UserID"] == null ? false : true;
            if (val)
            {
                try
                {
                    var privilagelist = bal.GetPrivilages_BL(Convert.ToInt32(Session["UserID"].ToString()), 3007);
                    var json = new JavaScriptSerializer().Serialize(privilagelist);
                    return Json(json, JsonRequestBehavior.AllowGet);
                }
                catch (Exception exe)
                {
                    string actionName = this.ControllerContext.RouteData.Values["action"].ToString();
                    string controllerName = this.ControllerContext.RouteData.Values["controller"].ToString();
                    objERR.err_title = controllerName + "-" + controllerName;
                    objERR.err_message = "Sorry for the inconvience. Some error has been occured.";
                    objERR.err_details = exe.Message.Replace("'", "");
                    int errid = bal.ExceptionInsertLogs_BL(objERR);
                    return Json("ERR" + errid.ToString(), JsonRequestBehavior.AllowGet);
                }
            }
            else
            {
                return Json("Expired", JsonRequestBehavior.AllowGet);
            }
        }
        public JsonResult GetShipmentList(bool delete,int type)
        {
            bool val = Session["UserID"] == null ? false : true;
            if (val)
            {
                try
                {
                    int com_key = Convert.ToInt32(Session["Companykey"].ToString());

                    dbcontext.Configuration.ProxyCreationEnabled = false;
                    var data = (from a in dbcontext.Tbl_Shipment_Header
                                join c in dbcontext.Tbl_Master_CompanyDetails on a.S_CustSup equals c.COM_ID into ord
                                from y in ord
                                join d in dbcontext.Tbl_Master_CompanyDetails on a.S_SupplierID equals d.COM_ID into ord1
                                from y1 in ord1
                                where a.DELETED == delete && a.COM_KEY == com_key && a.S_Type == type
                                select new Shipment_CM
                                {
                                    S_ID = a.S_ID,
                                    S_Code = a.S_Code,
                                    S_ETD = a.S_ETD,
                                    S_ETA = a.S_ETA,
                                    COM_DISPLAYNAME = y.COM_DISPLAYNAME,
                                    SuppName = y1.COM_NAME,
                                    S_DeparturePort = a.S_DeparturePort,
                                    S_ArrivalPort = a.S_ArrivalPort,
                                    S_Type = a.S_Type,
                                    S_STATUS = a.S_STATUS,
                                    S_DebitNoteStatus=a.S_DebitNoteStatus,
                                    S_CommissionRecievedStatus=a.S_CommissionRecievedStatus,
                                    S_DebitNoteApprovalStatus=a.S_DebitNoteApprovalStatus,
                                    S_INV_AMT=a.S_INV_AMT,
                                    S_INV_NO = a.S_INV_NO
                                }).Distinct().OrderByDescending(m => m.S_ID).ToList();
                    var json = new JavaScriptSerializer().Serialize(data);
                    return Json(json, JsonRequestBehavior.AllowGet);
                }
                catch (Exception exe)
                {
                    string actionName = this.ControllerContext.RouteData.Values["action"].ToString();
                    string controllerName = this.ControllerContext.RouteData.Values["controller"].ToString();
                    objERR.err_title = controllerName + "-" + controllerName;
                    objERR.err_message = "Sorry for the inconvience. Some error has been occured.";
                    objERR.err_details = exe.Message.Replace("'", "");
                    int errid = bal.ExceptionInsertLogs_BL(objERR);
                    return Json("ERR" + errid.ToString(), JsonRequestBehavior.AllowGet);
                }
            }
            else
            {
                return Json("Expired", JsonRequestBehavior.AllowGet);
            }
        }
        public JsonResult GetShipmentDocumentListForNotifications(bool delete)
        {
            bool val = Session["UserID"] == null ? false : true;
            if (val)
            {
                try
                {
                    int com_key = Convert.ToInt32(Session["Companykey"].ToString());
                    var today = DateTime.Now.Date.AddDays(1);
                    var documentDays = dbcontext.Tbl_SystemSetUp.Where(m=>m.DELETED==false).Select(m => m.DOCUMENTDAYS).ToArray();
                    int daysDocument = Convert.ToInt32(documentDays[0]);
                    dbcontext.Configuration.ProxyCreationEnabled = false;
                    var data = (from a in dbcontext.Tbl_Shipment_Header
                                join c in dbcontext.Tbl_Master_CompanyDetails on a.S_CustSup equals c.COM_ID into ord
                                from y in ord
                                join d in dbcontext.Tbl_Master_CompanyDetails on a.S_SupplierID equals d.COM_ID into ord1
                                from y1 in ord1
                                where a.DELETED == delete && a.COM_KEY == com_key &&  today == System.Data.Entity.DbFunctions.AddDays(a.S_INV_DATE, daysDocument)
                                select new Shipment_CM
                                {
                                    S_ID = a.S_ID,
                                    S_Code = a.S_Code,
                                    S_ETD = a.S_ETD,
                                    S_ETA = a.S_ETA,
                                    COM_DISPLAYNAME = y.COM_DISPLAYNAME,
                                    SuppName = y1.COM_NAME,
                                    S_DeparturePort = a.S_DeparturePort,
                                    S_ArrivalPort = a.S_ArrivalPort,
                                    S_Type = a.S_Type,
                                    S_STATUS = a.S_STATUS,
                                    S_DebitNoteStatus = a.S_DebitNoteStatus,
                                    S_CommissionRecievedStatus = a.S_CommissionRecievedStatus,
                                    S_DebitNoteApprovalStatus = a.S_DebitNoteApprovalStatus,
                                    S_INV_AMT = a.S_INV_AMT,
                                    S_INV_NO = a.S_INV_NO
                                }).Distinct().OrderByDescending(m => m.S_ID).ToList();
                    var json = new JavaScriptSerializer().Serialize(data);
                    return Json(json, JsonRequestBehavior.AllowGet);
                }
                catch (Exception exe)
                {
                    string actionName = this.ControllerContext.RouteData.Values["action"].ToString();
                    string controllerName = this.ControllerContext.RouteData.Values["controller"].ToString();
                    objERR.err_title = controllerName + "-" + controllerName;
                    objERR.err_message = "Sorry for the inconvience. Some error has been occured.";
                    objERR.err_details = exe.Message.Replace("'", "");
                    int errid = bal.ExceptionInsertLogs_BL(objERR);
                    return Json("ERR" + errid.ToString(), JsonRequestBehavior.AllowGet);
                }
            }
            else
            {
                return Json("Expired", JsonRequestBehavior.AllowGet);
            }
        }
        public JsonResult GetShipmentListForNotifications(bool delete)
        {
            bool val = Session["UserID"] == null ? false : true;
            if (val)
            {
                try
                {
                    int com_key = Convert.ToInt32(Session["Companykey"].ToString());
                    var today = DateTime.Now.Date.AddDays(1);
                   
                    dbcontext.Configuration.ProxyCreationEnabled = false;
                    var data = (from a in dbcontext.Tbl_Shipment_Header
                                join c in dbcontext.Tbl_Master_CompanyDetails on a.S_CustSup equals c.COM_ID into ord
                                from y in ord
                                join d in dbcontext.Tbl_Master_CompanyDetails on a.S_SupplierID equals d.COM_ID into ord1
                                from y1 in ord1
                                where a.DELETED == delete && a.COM_KEY == com_key && a.S_ETD== today
                                select new Shipment_CM
                                {
                                    S_ID = a.S_ID,
                                    S_Code = a.S_Code,
                                    S_ETD = a.S_ETD,
                                    S_ETA = a.S_ETA,
                                    COM_DISPLAYNAME = y.COM_DISPLAYNAME,
                                    SuppName = y1.COM_NAME,
                                    S_DeparturePort = a.S_DeparturePort,
                                    S_ArrivalPort = a.S_ArrivalPort,
                                    S_Type = a.S_Type,
                                    S_STATUS = a.S_STATUS,
                                    S_DebitNoteStatus = a.S_DebitNoteStatus,
                                    S_CommissionRecievedStatus = a.S_CommissionRecievedStatus,
                                    S_DebitNoteApprovalStatus = a.S_DebitNoteApprovalStatus,
                                    S_INV_AMT = a.S_INV_AMT,
                                    S_INV_NO = a.S_INV_NO
                                }).Distinct().OrderByDescending(m => m.S_ID).ToList();
                    var json = new JavaScriptSerializer().Serialize(data);
                    return Json(json, JsonRequestBehavior.AllowGet);
                }
                catch (Exception exe)
                {
                    string actionName = this.ControllerContext.RouteData.Values["action"].ToString();
                    string controllerName = this.ControllerContext.RouteData.Values["controller"].ToString();
                    objERR.err_title = controllerName + "-" + controllerName;
                    objERR.err_message = "Sorry for the inconvience. Some error has been occured.";
                    objERR.err_details = exe.Message.Replace("'", "");
                    int errid = bal.ExceptionInsertLogs_BL(objERR);
                    return Json("ERR" + errid.ToString(), JsonRequestBehavior.AllowGet);
                }
            }
            else
            {
                return Json("Expired", JsonRequestBehavior.AllowGet);
            }
        }
        //Get Schdule Details
        //Get orderDetails
        public JsonResult GetSchduleDetails(string id)
        {
            bool val = Session["UserID"] == null ? false : true;

            try
            {
                dbcontext.Configuration.ProxyCreationEnabled = false;
                Schedule_CM obj = new Schedule_CM();

                var data1 = (from a in dbcontext.Tbl_Master_Order
                             join b in dbcontext.Tbl_Schedule on a.SO_ID equals b.SH_OrderID
                             where b.SH_Code== id
                             select new
                             {
                                 a.SO_ID,
                                 a.SO_OrderDate,
                                 a.SO_SupplierID,
                                 a.SO_CutomerID,
                                 b.SH_SalesPerson,
                             }
           ).ToList();
                var json = new JavaScriptSerializer().Serialize(data1);
                return Json(json, JsonRequestBehavior.AllowGet);

            }
            catch (Exception exe)
            {
                string actionName = this.ControllerContext.RouteData.Values["action"].ToString();
                string controllerName = this.ControllerContext.RouteData.Values["controller"].ToString();
                objERR.err_title = controllerName + "-" + controllerName;
                objERR.err_message = "Sorry for the inconvience. Some error has been occured.";
                objERR.err_details = exe.Message.Replace("'", "");
                int errid = bal.ExceptionInsertLogs_BL(objERR);
                return Json("ERR" + errid.ToString(), JsonRequestBehavior.AllowGet);
            }


        }
        public JsonResult GetCustSup(int type)
        {
            bool val = Session["UserID"] == null ? false : true;
            if (val)
            {
                try
                {
                    dbcontext.Configuration.ProxyCreationEnabled = false;
                    int com_key = Convert.ToInt32(Session["Companykey"]);
                    var data = dbcontext.Tbl_Master_CompanyDetails.Where(m => m.DELETED == false && m.COM_KEY == com_key && m.Cust_Supp != type).ToList();
                    var json = new JavaScriptSerializer().Serialize(data);
                    return Json(json, JsonRequestBehavior.AllowGet);
                }
                catch (Exception exe)
                {
                    string actionName = this.ControllerContext.RouteData.Values["action"].ToString();
                    string controllerName = this.ControllerContext.RouteData.Values["controller"].ToString();
                    objERR.err_title = controllerName + "-" + controllerName;
                    objERR.err_message = "Sorry for the inconvience. Some error has been occured.";
                    objERR.err_details = exe.Message.Replace("'", "");
                    int errid = bal.ExceptionInsertLogs_BL(objERR);
                    return Json("ERR" + errid.ToString(), JsonRequestBehavior.AllowGet);
                }
            }
            else
            {
                return Json("Expired", JsonRequestBehavior.AllowGet);
            }
        }
        public JsonResult GetOrders(int type,int id)
        {
            bool val = Session["UserID"] == null ? false : true;
            if (val)
            {
                try
                {
                    dbcontext.Configuration.ProxyCreationEnabled = false;
                    int com_key = Convert.ToInt32(Session["Companykey"]);
                    var approver = dbcontext.Tbl_Document_Master.Single(m => m.auto_key == 6014).workflow_status;
                    if (approver == 1)
                    {
                        if (type == 1)
                        {
                            var data = dbcontext.Tbl_Master_Order.Where(m => m.DELETED == false && m.COM_KEY == com_key && m.SO_Approval == 1 && m.SO_OrderType == type && m.SO_SupplierID == id).ToList();
                            var json = new JavaScriptSerializer().Serialize(data);
                            return Json(json, JsonRequestBehavior.AllowGet);
                        }
                        else
                        {
                            var data = dbcontext.Tbl_Master_Order.Where(m => m.DELETED == false && m.COM_KEY == com_key && m.SO_Approval == 1 && m.SO_OrderType == type && m.SO_CutomerID==id).ToList();
                            var json = new JavaScriptSerializer().Serialize(data);
                            return Json(json, JsonRequestBehavior.AllowGet);
                        }
                    }
                    else
                    {
                        if (type == 1)
                        {
                            var data = dbcontext.Tbl_Master_Order.Where(m => m.DELETED == false && m.COM_KEY == com_key && m.SO_OrderType == type && m.SO_SupplierID == id).ToList();
                            var json = new JavaScriptSerializer().Serialize(data);
                            return Json(json, JsonRequestBehavior.AllowGet);
                        }
                        else
                        {
                            var data = dbcontext.Tbl_Master_Order.Where(m => m.DELETED == false && m.COM_KEY == com_key && m.SO_OrderType == type && m.SO_CutomerID == id).ToList();
                            var json = new JavaScriptSerializer().Serialize(data);
                            return Json(json, JsonRequestBehavior.AllowGet);
                        }
                    }
                }
                catch (Exception exe)
                {
                    string actionName = this.ControllerContext.RouteData.Values["action"].ToString();
                    string controllerName = this.ControllerContext.RouteData.Values["controller"].ToString();
                    objERR.err_title = controllerName + "-" + controllerName;
                    objERR.err_message = "Sorry for the inconvience. Some error has been occured.";
                    objERR.err_details = exe.Message.Replace("'", "");
                    int errid = bal.ExceptionInsertLogs_BL(objERR);
                    return Json("ERR" + errid.ToString(), JsonRequestBehavior.AllowGet);
                }
            }
            else
            {
                return Json("Expired", JsonRequestBehavior.AllowGet);
            }
        }
        public JsonResult GetSchedules(int id, int custsupid,int supplierid, int ordertype, string type)
        {
            bool val = Session["UserID"] == null ? false : true;
            if (val)
            {
                try
                {
                    dbcontext.Configuration.ProxyCreationEnabled = false;
                    int com_key = Convert.ToInt32(Session["Companykey"]);
                    var approver = dbcontext.Tbl_Document_Master.Single(m => m.auto_key == 6014).workflow_status;
                    if (type == "Submit")
                    {
                        var data1 = dbcontext.Tbl_Master_Order.Where(m => m.SO_CutomerID == custsupid && m.SO_SupplierID == supplierid && m.SO_OrderType == ordertype && m.DELETED == false).Select(m => m.SO_ID);
                        var data = dbcontext.Tbl_Schedule.Where(m => m.DELETED == false && m.COM_KEY == com_key && m.SH_Status == false && data1.Contains(m.SH_OrderID) && m.SH_Type == ordertype).ToList().GroupBy(x => x.SH_Code).Select(x => x.FirstOrDefault());
                        var json = new JavaScriptSerializer().Serialize(data);
                        return Json(json, JsonRequestBehavior.AllowGet);
                    }
                    else
                    {
                        var data1 = dbcontext.Tbl_Master_Order.Where(m => m.SO_CutomerID == custsupid && m.SO_SupplierID == supplierid && m.SO_OrderType == ordertype && m.DELETED == false).Select(m => m.SO_ID);
                        var data2 = dbcontext.Tbl_Shipment_Header.Single(x => x.S_ID == id).S_ScheduleID.Split(',');
                        var data = dbcontext.Tbl_Schedule.Where(m => m.DELETED == false && m.COM_KEY == com_key && data1.Contains(m.SH_OrderID) && m.SH_Type == ordertype && (data2.Contains(m.SH_Code) || m.SH_Status == false)).ToList().GroupBy(x => x.SH_Code).Select(x => x.FirstOrDefault());
                        var json = new JavaScriptSerializer().Serialize(data);
                        return Json(json, JsonRequestBehavior.AllowGet);
                    }
                }
                catch (Exception exe)
                {
                    string actionName = this.ControllerContext.RouteData.Values["action"].ToString();
                    string controllerName = this.ControllerContext.RouteData.Values["controller"].ToString();
                    objERR.err_title = controllerName + "-" + controllerName;
                    objERR.err_message = "Sorry for the inconvience. Some error has been occured.";
                    objERR.err_details = exe.Message.Replace("'", "");
                    int errid = bal.ExceptionInsertLogs_BL(objERR);
                    return Json("ERR" + errid.ToString(), JsonRequestBehavior.AllowGet);
                }
            }
            else
            {
                return Json("Expired", JsonRequestBehavior.AllowGet);
            }
        }
        public JsonResult GetSalesPerson(decimal orgtype)
        {

            bool val = Session["UserID"] == null ? false : true;
            if (val)
            {
                try
                {
                    dbcontext.Configuration.ProxyCreationEnabled = false;
                    int comkey = Convert.ToInt32(Session["Companykey"].ToString());
                    var ObjSales_Org = dbcontext.Tbl_Sales_Organization.Where(m => m.COM_KEY == comkey && m.DELETED == false && m.sales_Organization== orgtype).ToList();
                    string s = "";
                    for (int i = 0; i < ObjSales_Org.Count(); i++)
                    {
                        if (i == 0)
                        {
                            s = ObjSales_Org[i].ORG_EMPLOYEE_IDS.ToString();
                        }
                        else
                        {
                            s = s + "," + ObjSales_Org[i].ORG_EMPLOYEE_IDS.ToString();
                        }
                    }
                    var UID = new HashSet<decimal>(s.Split(',').Select(m => Convert.ToDecimal(m)).ToList());
                    var Users = dbcontext.Tbl_Master_User.Where(m => m.USER_ID > 0  && m.COM_KEY == comkey && UID.Contains(m.USER_ID)).Distinct().ToList();
                    var json = new JavaScriptSerializer().Serialize(Users);
                    return Json(json, JsonRequestBehavior.AllowGet);
                }
                catch (Exception exe)
                {
                    string actionName = this.ControllerContext.RouteData.Values["action"].ToString();
                    string controllerName = this.ControllerContext.RouteData.Values["controller"].ToString();
                    objERR.err_title = controllerName + "-" + controllerName;
                    objERR.err_message = "Sorry for the inconvience. Some error has been occured.";
                    objERR.err_details = exe.Message.Replace("'", "");
                    int errid = bal.ExceptionInsertLogs_BL(objERR);
                    return Json("ERR" + errid.ToString(), JsonRequestBehavior.AllowGet);
                }
            }
            else
            {
                return Json("Expired", JsonRequestBehavior.AllowGet);
            }
        }

        private string Validations(int S_ID, string S_Code, string S_ScheduleID, string S_ETD, string S_ETA, string S_DeparturePort, string S_ArrivalPort, string S_BL_NO, string S_BL_DATE, string S_INV_NO, string S_INV_DATE)
        {
            //user = 0;
            //try
            //{
            //    var approver = dbcontext.Tbl_Document_Master.Single(m => m.auto_key == 3009).workflow_status;
            //    if (approver == 1)
            //        user = dbcontext.Tbl_Document_Master.Single(m => m.auto_key == 3009).workflowapprover ?? 0;
            //    else
            //        user = 1000000;
            //}
            //catch { }
            //if (user == 0)
            //{
            //    return "Please contact Admin to set Approver.";
            //}
            if (!automanual && S_Code == "")
            {
                return "Enter Shipment Code";
            }
            if (!automanual)
            {
                if (S_ID == 0)
                {
                    var count = dbcontext.Tbl_Shipment_Header.Where(m => m.S_Code == S_Code).ToList().Count();
                    if (count > 0)
                    {
                        return "Shipment Code Already Exist";
                    }
                }
                else
                {
                    var count = dbcontext.Tbl_Shipment_Header.Where(m => m.S_ID != S_ID && m.S_Code == S_Code).ToList().Count();
                    if (count > 0)
                    {
                        return "Shipment Code Already Exist";
                    }
                }
            }
            if (S_ScheduleID == "")
            {
                return "Select Schedule ID";
            }
            if (S_ETD == "")
            {
                return "Enter ETD";
            }
            if (S_ETA == "")
            {
                return "Enter ETA";
            }
            if (S_DeparturePort == "")
            {
                return "Enter Departure Port";
            }
            if (S_ArrivalPort == "")
            {
                return "Enter Arrival Port";
            }
            if (S_BL_NO == "")
            {
                return "Enter BL NO";
            }
            if (S_BL_DATE == "")
            {
                return "Enter BL Date";
            }
            if (S_INV_NO == "")
            {
                return "Enter Invoice No";
            }
            if (S_INV_DATE == "")
            {
                return "Enter Invoice Date";
            }
            return "";
        }

        [HttpPost]
        public JsonResult ET_Sales_Shipment_Add(int S_ID, string S_Code,int  S_Type,int S_CustSup,int S_SupplierID, int S_SalesPerson,string S_ScheduleID , string S_ETD , string S_ETA, string S_DeparturePort , string S_ArrivalPort, string S_BL_NO , string S_BL_DATE, string S_INV_NO   , string S_INV_DATE,decimal S_INV_AMT, decimal S_GrossWeight, string S_ContainerNo, string S_MotherVessel, string S_FleederVessel,string shipmentdetails)
        {
            bool val = Session["UserID"] == null ? false : true;
            if (val)
            {
                decimal k = 0;
                var context = new EntityClasses();
                var transaction = context.Database.BeginTransaction();
                bool success = true;
                try
                {
                    string valid = Validations(S_ID, S_Code, S_ScheduleID, S_ETD, S_ETA, S_DeparturePort, S_ArrivalPort, S_BL_NO, S_BL_DATE, S_INV_NO, S_INV_DATE);
                    if (valid == "")
                    {
                        var Username = Session["UserID"].ToString();
                        DateTime ETD=DateTime.ParseExact(S_ETD, "dd-MM-yyyy",null),
                            ETA = DateTime.ParseExact(S_ETA, "dd-MM-yyyy", null),
                            BL = DateTime.ParseExact(S_BL_DATE, "dd-MM-yyyy", null), 
                            INV = DateTime.ParseExact(S_INV_DATE, "dd-MM-yyyy", null);
                        Tbl_Shipment_Header Objmc = new Tbl_Shipment_Header()
                        {
                            S_ID    = S_ID,
                            S_Code = S_Code,
                            S_SalesPerson= S_SalesPerson,
                            S_Type = S_Type,
                            S_CustSup = S_CustSup,
                            S_SupplierID= S_SupplierID,
                            S_ScheduleID = S_ScheduleID,
                            S_ETD = ETD,
                            S_ETA = ETA,
                            S_DeparturePort = S_DeparturePort,
                            S_ArrivalPort = S_ArrivalPort,
                            S_BL_NO = S_BL_NO,
                            S_BL_DATE = BL,
                            S_INV_NO = S_INV_NO,
                            S_INV_DATE = INV,
                            S_INV_AMT = S_INV_AMT,
                            S_BAL_AMT = 0,
                            S_GrossWeight = S_GrossWeight,
                            S_ContainerNo = S_ContainerNo,
                            S_MotherVessel = S_MotherVessel,
                            S_FleederVessel = S_FleederVessel,
                            S_STATUS = 0,
                            S_DebitNoteStatus = false,
                            S_CommissionRecievedStatus = false,
                            S_DebitNoteApprovalStatus = 0,
                            CREATED_BY = Convert.ToInt32(Session["UserID"].ToString()),
                            CREATED_DATE = DateTime.Now,
                            DELETED = false,
                            COM_KEY = Convert.ToInt32(Session["CompanyKey"]),
                            S_Approver = 0
                        };
                        decimal data = 0;
                        string ShipCode = S_Code;
                        if (Objmc.S_ID == 0)
                        {
                            context.Tbl_Shipment_Header.Add(Objmc);
                            if (context.SaveChanges() == 0)
                            {
                                success = false;
                            }
                            else
                            {
                                //var headerId=Objmc.S_ID; ;
                                //tbl_Notifications objno= new tbl_Notifications()
                                //    {
                                   
                                //    N_Date=ETD,
                                //    N_Status=0,
                                //    N_Message="We found there are some shipments are due to ",
                                //    N_HeaderID=headerId,
                                //    N_UserId=S_SalesPerson,
                                //    N_Type="",
                                //    CREATED_BY = Convert.ToInt32(Session["UserID"].ToString()),
                                //    CREATED_DATE = DateTime.Now,
                                //    DELETED = false,
                                   
                                //};
                                //context.tbl_Notifications.Add(objno);
                                //context.SaveChanges();
                            }
                            if (automanual == true)
                            {
                                int len = 10 - (prefix + Objmc.S_ID).Length;
                                string code = prefix + new String('0', len) + Objmc.S_ID;
                                Tbl_Shipment_Header _Tbl_Shipment_Header = context.Tbl_Shipment_Header.Single(m => m.S_ID == Objmc.S_ID);
                                {
                                    _Tbl_Shipment_Header.S_Code = code;
                                };
                                if (context.SaveChanges() == 0)
                                {
                                    success = false;
                                }
                                ShipCode = code;
                            }

                        }
                        else
                        {
                            Tbl_Shipment_Header Obj_Tbl_Shipment_Header = context.Tbl_Shipment_Header.Single(m => m.S_ID == Objmc.S_ID);
                            {
                                Obj_Tbl_Shipment_Header.S_ScheduleID = S_ScheduleID;
                                Obj_Tbl_Shipment_Header.S_ETD = ETD;
                                Obj_Tbl_Shipment_Header.S_ETA = ETA;
                                Obj_Tbl_Shipment_Header.S_DeparturePort = S_DeparturePort;
                                Obj_Tbl_Shipment_Header.S_ArrivalPort = S_ArrivalPort;
                                Obj_Tbl_Shipment_Header.S_BL_NO = S_BL_NO;
                                Obj_Tbl_Shipment_Header.S_BL_DATE = BL;
                                Obj_Tbl_Shipment_Header.S_INV_NO = S_INV_NO;
                                Obj_Tbl_Shipment_Header.S_INV_DATE = INV;
                                Obj_Tbl_Shipment_Header.S_INV_AMT = S_INV_AMT;
                                Obj_Tbl_Shipment_Header.S_BAL_AMT = 0;
                                Obj_Tbl_Shipment_Header.S_GrossWeight = S_GrossWeight;
                                Obj_Tbl_Shipment_Header.S_ContainerNo = S_ContainerNo;
                                Obj_Tbl_Shipment_Header.S_MotherVessel = S_MotherVessel;
                                Obj_Tbl_Shipment_Header.S_FleederVessel = S_FleederVessel;
                                Obj_Tbl_Shipment_Header.S_STATUS = 0;
                                Obj_Tbl_Shipment_Header.S_DebitNoteStatus = false;
                                Obj_Tbl_Shipment_Header.S_CommissionRecievedStatus = false;
                                Obj_Tbl_Shipment_Header.LAST_UPDATED_BY = Convert.ToInt32(Session["UserID"].ToString());
                                Obj_Tbl_Shipment_Header.LAST_UPDATED_DATE = DateTime.Now;
                                Obj_Tbl_Shipment_Header.S_SalesPerson = S_SalesPerson;
                                Obj_Tbl_Shipment_Header.S_DebitNoteApprovalStatus = 0;
                            };
                            if (context.SaveChanges() == 0)
                            {
                                success = false;
                            }
                            // obj.COM_ID = k;
                        }

                        var schs = context.Tbl_Shipment_Details.Where(m => m.SD_PID == Objmc.S_ID).Select(m => m.SD_ScheduleID);
                        var schedules = context.Tbl_Schedule.Where(m => schs.Contains(m.SH_ID)).ToList();
                        schedules.ForEach(a => a.SH_Status = false);
                        context.SaveChanges();
                        // Delete previous contact data
                        Tbl_Shipment_Details objdeletecontact = new Tbl_Shipment_Details();
                        context.Tbl_Shipment_Details.RemoveRange(context.Tbl_Shipment_Details.Where(m => m.SD_PID == Objmc.S_ID));
                        context.SaveChanges();
                        

                        // Insert new contacts data
                        string[] ChildRow = shipmentdetails.Split('|');
                        for (int i = 0; i < ChildRow.Length - 1; i++)
                        {
                            decimal schduleqty = 0;
                            decimal qty = 0;
                            string[] ChildRecord = ChildRow[i].Split(',');
                            if(S_Type==2)
                            {
                                schduleqty = Convert.ToDecimal(ChildRecord[4]);
                                qty = Convert.ToDecimal(ChildRecord[5]);
                            }
                            else
                            {
                                schduleqty = Convert.ToDecimal(ChildRecord[3]);
                                qty = Convert.ToDecimal(ChildRecord[4]);
                            }
                            Tbl_Shipment_Details objquotationdetails = new Tbl_Shipment_Details()
                            {
                                SD_PID = Objmc.S_ID,
                                SD_Type = Objmc.S_Type,
                                SD_ScheduleID = Convert.ToDecimal(ChildRecord[0]),
                                SD_OrderDetailID = Convert.ToDecimal(ChildRecord[1]),
                                SD_ProductID = Convert.ToDecimal(ChildRecord[2]),
                                SD_ScheduledQuantity = schduleqty,
                                SD_Quantity = qty
                            };
                            context.Tbl_Shipment_Details.Add(objquotationdetails);
                            if (context.SaveChanges() == 0)
                            {
                                success = false;
                            }
                            data = (int)objquotationdetails.SD_ID;
                            decimal shid = Convert.ToDecimal(ChildRecord[0]);
                            context.Tbl_Schedule.Single(m => m.SH_ID == shid).SH_Status = true;
                            if (context.SaveChanges() == 0)
                            {
                                success = false;
                            }
                        }
                        if (success)
                        {
                            transaction.Commit();
                        }
                        else
                        {
                            k = 0;
                            transaction.Rollback();
                        }
                        var json = "Success:"+ ShipCode;
                        if (data == 0)
                        {
                            json = "Failed";
                        }
                        else
                        {
                            objLOG.log_dockey = "3009";
                            objLOG.log_userid = Session["UserID"].ToString();
                            objLOG.log_recordkey = data.ToString();
                            if (S_ID == 0)
                            {
                                objLOG.log_operation = "Insert";
                                objLOG.log_Remarks = "Record Inserted Successfully";
                            }
                            else
                            {
                                objLOG.log_operation = "Update";
                                objLOG.log_Remarks = "Record Updated Successfully";
                            }
                            bal.OperationInsertLogs_BL(objLOG);
                        }
                        return Json(json, JsonRequestBehavior.AllowGet);
                    }
                    else
                    {
                        var json = "Validation:" + valid;
                        return Json(json, JsonRequestBehavior.AllowGet);
                    }
                }
                catch (System.Data.Entity.Validation.DbEntityValidationException dbEx)
                {
                    Exception raise = dbEx;
                    foreach (var validationErrors in dbEx.EntityValidationErrors)
                    {
                        foreach (var validationError in validationErrors.ValidationErrors)
                        {
                            string message = string.Format("{0}:{1}",
                                validationErrors.Entry.Entity.ToString(),
                                validationError.ErrorMessage);
                            // raise a new exception nesting  
                            // the current instance as InnerException  
                            raise = new InvalidOperationException(message, raise);
                        }
                    }
                    k = 0;
                    transaction.Rollback();
                    string actionName = this.ControllerContext.RouteData.Values["action"].ToString();
                    string controllerName = this.ControllerContext.RouteData.Values["controller"].ToString();
                    objERR.err_title = controllerName + "-" + controllerName;
                    objERR.err_message = "Sorry for the inconvience. Some error has been occured.";
                    objERR.err_details = raise.Message.Replace("'", "");
                    int errid = bal.ExceptionInsertLogs_BL(objERR);
                    return Json("ERR" + errid.ToString(), JsonRequestBehavior.AllowGet);
                }
                catch (Exception exe)
                {
                    k = 0;
                    transaction.Rollback();
                    string actionName = this.ControllerContext.RouteData.Values["action"].ToString();
                    string controllerName = this.ControllerContext.RouteData.Values["controller"].ToString();
                    objERR.err_title = controllerName + "-" + controllerName;
                    objERR.err_message = "Sorry for the inconvience. Some error has been occured.";
                    objERR.err_details = exe.Message.Replace("'", "");
                    int errid = bal.ExceptionInsertLogs_BL(objERR);
                    return Json("ERR" + errid.ToString(), JsonRequestBehavior.AllowGet);
                }
                finally
                {
                    transaction.Dispose();
                    context.Dispose();
                }
            }
            else
            {
                return Json("Expired", JsonRequestBehavior.AllowGet);
            }
        }
        public ActionResult ET_Sales_Shipment_View(int id)
        {
            bool val = Session["UserID"] == null ? false : true;
            if (val)
            {
                try
                {
                    dbcontext.Configuration.ProxyCreationEnabled = false;
                    var data1 = (from a in dbcontext.Tbl_Shipment_Header
                                 join c in dbcontext.Tbl_Master_CompanyDetails on a.S_CustSup equals c.COM_ID into ord
                                 from y in ord
                                 join d in dbcontext.Tbl_Master_CompanyDetails on a.S_SupplierID equals d.COM_ID into ord1
                                 from y1 in ord1
                                 where a.S_ID == id
                                 select new Shipment_CM
                                 {
                                     S_ID = a.S_ID,
                                     S_Code = a.S_Code,
                                     S_ETD = a.S_ETD,
                                     S_ETA = a.S_ETA,
                                     COM_DISPLAYNAME = y.COM_DISPLAYNAME,
                                     SuppName = y1.COM_DISPLAYNAME,
                                     S_DeparturePort = a.S_DeparturePort,
                                     S_ArrivalPort = a.S_ArrivalPort,
                                     S_BL_NO = a.S_BL_NO,
                                     S_BL_DATE = a.S_BL_DATE,
                                     S_INV_NO = a.S_INV_NO,
                                     S_INV_DATE = a.S_INV_DATE,
                                     S_INV_AMT = a.S_INV_AMT,
                                     S_GrossWeight = a.S_GrossWeight,
                                     S_ContainerNo = a.S_ContainerNo,
                                     S_MotherVessel = a.S_MotherVessel,
                                     SD_Type = a.S_Type,
                                     S_STATUS = a.S_STATUS,
                                     S_DebitNoteStatus = a.S_DebitNoteStatus,
                                     S_CommissionRecievedStatus = a.S_CommissionRecievedStatus,
                                     S_DebitNoteApprovalStatus = a.S_DebitNoteApprovalStatus

                                 }).ToList();
                    var data2 = (from a in dbcontext.Tbl_Schedule
                                            join c in dbcontext.Tbl_Product_Master on a.SH_ProductID equals c.P_ID into comp
                                            from x in comp
                                            join d in dbcontext.Tbl_Shipment_Details on a.SH_ID equals d.SD_ScheduleID into ord
                                            from y in ord.DefaultIfEmpty()
                                            where y.SD_PID == id
                                            select new Shipment_CM
                                            {
                                                SD_ScheduleID = a.SH_ID,
                                                SD_OrderDetailID = a.SH_OrderDetailID,
                                                SD_ProductID = a.SH_ProductID,
                                                SH_Code = a.SH_Code,
                                                SD_ProductName = x.P_ShortName,
                                                SD_ArticleNo = x.P_ArticleNo,
                                                SD_ScheduledQuantity = a.SH_SheduledQuantity,
                                                SD_Quantity = y.SD_Quantity
                                            }).ToList();
                    ShipmentView_CM obj = new ShipmentView_CM();
                    obj.headerObj = data1;
                    obj.detailsObj = data2;
                    return PartialView("/Views/Sales/ET_Sales_Shipment/ET_Sales_Shipment_View.cshtml", obj);
                }
                catch (Exception exe)
                {
                    string actionName = this.ControllerContext.RouteData.Values["action"].ToString();
                    string controllerName = this.ControllerContext.RouteData.Values["controller"].ToString();
                    objERR.err_title = controllerName + "-" + controllerName;
                    objERR.err_message = "Sorry for the inconvience. Some error has been occured.";
                    objERR.err_details = exe.Message.Replace("'", "");
                    int errid = bal.ExceptionInsertLogs_BL(objERR);
                    return Json("ERR" + errid.ToString(), JsonRequestBehavior.AllowGet);
                }
            }
            else
            {
                return RedirectToAction("ET_SessionExpire", "ET_Login");
            }
        }
        public ActionResult DebitNote_Print(int id, string lang)
        {
            bool val = Session["UserID"] == null ? false : true;
            if (val)
            {
                try
                {
                    dbcontext.Configuration.ProxyCreationEnabled = false;
                    int com_key = Convert.ToInt32(Session["Companykey"]);
                    var popupFabStatus = (from b in dbcontext.Tbl_GenerateDebitNote where b.DN_ShipmentID == id select b.DN__FOBStatus).FirstOrDefault();
                    if (popupFabStatus == 0)
                    {

                        var data2 = (from a in dbcontext.Tbl_Shipment_Details
                                     join b in dbcontext.Tbl_Shipment_Header on a.SD_PID equals b.S_ID
                                     join c in dbcontext.Tbl_Master_CompanyDetails on b.S_SupplierID equals c.COM_ID into ord
                                    
                                     from x in ord
                                     where b.S_ID == id
                                     select new
                                     {
                                         scheduleCode = (from b in dbcontext.Tbl_Schedule where b.SH_ID == a.SD_ScheduleID select b.SH_Code).FirstOrDefault(),
                                         popupOrderNo = (from b in dbcontext.Tbl_Master_Order
                                                         join c in dbcontext.Tbl_Order_Details on b.SO_ID equals c.AGEN_TRAD_PO_ID
                                                         where c.ORDER_ID == a.SD_OrderDetailID
                                                         select
                                                         b.SO_Code).FirstOrDefault(),
                                         popupCommissionPer = (from b in dbcontext.Tbl_Master_Order
                                                               join c in dbcontext.Tbl_Order_Details on b.SO_ID equals c.AGEN_TRAD_PO_ID
                                                               where c.ORDER_ID == a.SD_OrderDetailID
                                                               select
                                                               b.SO_Commision).FirstOrDefault(),
                                         OrderAmt = (from b in dbcontext.Tbl_Master_Order
                                                     join c in dbcontext.Tbl_Order_Details on b.SO_ID equals c.AGEN_TRAD_PO_ID
                                                     where c.ORDER_ID == a.SD_OrderDetailID
                                                     select (c.PRICE * a.SD_Quantity)).FirstOrDefault()
                                     }).GroupBy(m => m.popupOrderNo).Select(a => new Shipment_CM { popupOrderNo = a.Select(m => m.popupOrderNo).FirstOrDefault(), OrderAmt = a.Sum(m => m.OrderAmt), popupCommissionPer = a.Select(m => m.popupCommissionPer).FirstOrDefault() }).ToList();
                        var popupCommissionAmt = (from a in data2 select (a.popupCommissionPer * a.OrderAmt / 100)).Sum();
                        var floor = Math.Floor(popupCommissionAmt ?? 0);
                        var intval = Convert.ToInt32(floor);
                        var floatval = popupCommissionAmt - intval;
                        var floatvalexa = floatval*100;
                        //var floatint = Math.Floor(floatvalexa??0);
                        string AmtInWords = ConvertNumbertoWords(intval);
                        string FloatAmt = ConvertNumbertoWords(Convert.ToInt32(floatvalexa));
                        AmtInWords = AmtInWords + " AND " + FloatAmt;
                        var data1 = (from a in dbcontext.Tbl_Shipment_Details
                                     join b in dbcontext.Tbl_Shipment_Header on a.SD_PID equals b.S_ID
                                     join c in dbcontext.Tbl_Master_CompanyDetails on b.S_SupplierID equals c.COM_ID into ord
                                     from x in ord
                                     join c1 in dbcontext.Tbl_Master_CompanyDetails on b.S_CustSup equals c1.COM_ID into ord1
                                     from x1 in ord1
                                     where b.S_ID == id
                                     select new Shipment_CM
                                     {
                                         S_ID = b.S_ID,
                                         S_Code = b.S_Code,
                                         S_INV_NO = b.S_INV_NO,
                                         S_INV_DATE = b.S_INV_DATE,
                                         COM_DISPLAYNAME = x.COM_DISPLAYNAME,
                                         COM_DISPLAYNAME1 = x1.COM_DISPLAYNAME,
                                         CompanyCode = x.COM_CODE,
                                         CompanyName = x.COM_NAME,
                                         Street = x.COM_STREET,
                                         CityState = (x.COM_CITY + ", " + x.COM_STATE),
                                         USTID = x.COM_USTID,
                                         SO_SupSCNO = (from b in dbcontext.Tbl_Master_Order
                                                       join c in dbcontext.Tbl_Order_Details on b.SO_ID equals c.AGEN_TRAD_PO_ID
                                                       where c.ORDER_ID == a.SD_OrderDetailID
                                                       select
                                                       b.SO_SupSCNO).FirstOrDefault(),
                                         SO_Currency = (from b in dbcontext.Tbl_Master_Order
                                                        join c in dbcontext.Tbl_Order_Details on b.SO_ID equals c.AGEN_TRAD_PO_ID
                                                        join f in dbcontext.Tbl_Currency_Master on b.SO_CusCurrency equals f.CURRENCY_ID
                                                        where c.ORDER_ID == a.SD_OrderDetailID
                                                        select
                                                        f.CURRENCY_NAME).FirstOrDefault(),
                                         CountryZip = ((dbcontext.locations.Where(a => a.location_id == x.COM_COUNTRY).Select(a => a.name).FirstOrDefault()) + ", " + (x.COM_ZIP)),
                                         VatPer = (dbcontext.Tbl_SystemSetUp.Where(a => a.COMPANY_ID == com_key).Select(a => a.TAX).FirstOrDefault()),
                                         imgurl = (dbcontext.Tbl_SystemSetUp.Where(a => a.COMPANY_ID == com_key).Select(a => a.COMPANY_LOGO).FirstOrDefault()),
                                         SystemCompany = (dbcontext.Tbl_SystemSetUp.Where(a => a.COMPANY_ID == com_key).Select(a => a.COMPANY_NAME).FirstOrDefault()),
                                         DebitNoteCode = (dbcontext.Tbl_GenerateDebitNote.Where(z => z.DN_ShipmentID == id).Select(z => z.DN_Code).FirstOrDefault()),
                                         DebitNoteDate = (dbcontext.Tbl_GenerateDebitNote.Where(z => z.DN_ShipmentID == id).Select(z => z.CREATED_DATE ?? DateTime.Now).FirstOrDefault()),
                                         AmtInWords = AmtInWords,
                                         isfob = 0
                                     }).ToList();
                        ShipmentView_CM obj = new ShipmentView_CM();
                        obj.headerObj = data1;
                        obj.detailsObj = data2;
                        if (lang == "E")
                            return PartialView("/Views/Sales/ET_Sales_Shipment/ET_Sales_Shipment_Print.cshtml", obj);
                        else
                            return PartialView("/Views/Sales/ET_Sales_Shipment/ET_Sales_Shipment_Print_German.cshtml", obj);
                    }
                    else
                    {
                        string popupFabAmt = (from b in dbcontext.Tbl_GenerateDebitNote where b.DN_ShipmentID == id select b.DN_FOBAmount).FirstOrDefault();
                        if (popupFabAmt.Substring(popupFabAmt.Length - 1) == ",")
                        {
                            popupFabAmt = popupFabAmt.Substring(0, popupFabAmt.Length - 1);
                        }
                        var FabAmounts = new HashSet<decimal>(popupFabAmt.Split(',').Select(m => Convert.ToDecimal(m)).ToList()).ToList();
                        var data2 = (from a in dbcontext.Tbl_Shipment_Details
                                     join b in dbcontext.Tbl_Shipment_Header on a.SD_PID equals b.S_ID
                                     join c in dbcontext.Tbl_Master_CompanyDetails on b.S_SupplierID equals c.COM_ID into ord
                                     from x in ord
                                     where b.S_ID == id
                                     select new
                                     {
                                         scheduleCode = (from b in dbcontext.Tbl_Schedule where b.SH_ID == a.SD_ScheduleID select b.SH_Code).FirstOrDefault(),
                                         popupOrderNo = (from b in dbcontext.Tbl_Master_Order
                                                         join c in dbcontext.Tbl_Order_Details on b.SO_ID equals c.AGEN_TRAD_PO_ID
                                                         where c.ORDER_ID == a.SD_OrderDetailID
                                                         select
                                                         b.SO_Code).FirstOrDefault(),
                                         popupCommissionPer = (from b in dbcontext.Tbl_Master_Order
                                                               join c in dbcontext.Tbl_Order_Details on b.SO_ID equals c.AGEN_TRAD_PO_ID
                                                               where c.ORDER_ID == a.SD_OrderDetailID
                                                               select
                                                               b.SO_Commision).FirstOrDefault()
                                     }).GroupBy(m => m.popupOrderNo).Select(a => new Shipment_CM { popupOrderNo = a.Select(m => m.popupOrderNo).FirstOrDefault(), popupCommissionPer = a.Select(m => m.popupCommissionPer).FirstOrDefault() }).ToList();
                        for (int i = 0; i < data2.Count();i++)
                        {
                            data2[i].OrderAmt = FabAmounts[i];
                        }
                        var popupCommissionAmt = (from a in data2 select (a.popupCommissionPer * a.OrderAmt / 100)).Sum();
                        var floor = Math.Floor(popupCommissionAmt??0);
                        var intval = Convert.ToInt32(floor);
                        var floatval = popupCommissionAmt - intval;
                        var floatvalexa = floatval * 100;
                        string AmtInWords = ConvertNumbertoWords(intval);
                        string FloatAmt = ConvertNumbertoWords(Convert.ToInt32(floatvalexa));
                        AmtInWords = AmtInWords + " AND " + FloatAmt;
                        var data1 = (from a in dbcontext.Tbl_Shipment_Details
                                     join b in dbcontext.Tbl_Shipment_Header on a.SD_PID equals b.S_ID
                                     join c in dbcontext.Tbl_Master_CompanyDetails on b.S_SupplierID equals c.COM_ID into ord
                                     from x in ord
                                     join c1 in dbcontext.Tbl_Master_CompanyDetails on b.S_CustSup equals c1.COM_ID into ord1
                                     from x1 in ord1
                                     where b.S_ID == id
                                     select new Shipment_CM
                                     {
                                         S_ID = b.S_ID,
                                         S_Code = b.S_Code,
                                         S_INV_NO = b.S_INV_NO,
                                         S_INV_DATE = b.S_INV_DATE,
                                         COM_DISPLAYNAME = x.COM_DISPLAYNAME,
                                         COM_DISPLAYNAME1 = x1.COM_DISPLAYNAME,
                                         CompanyCode = x.COM_CODE,
                                         CompanyName = x.COM_NAME,
                                         Street = x.COM_STREET,
                                         CityState = (x.COM_CITY + ", " + x.COM_STATE),
                                         USTID = x.COM_USTID,
                                         SO_SupSCNO = (from b in dbcontext.Tbl_Master_Order
                                                       join c in dbcontext.Tbl_Order_Details on b.SO_ID equals c.AGEN_TRAD_PO_ID
                                                       where c.ORDER_ID == a.SD_OrderDetailID
                                                       select
                                                       b.SO_SupSCNO).FirstOrDefault(),
                                         SO_Currency = (from b in dbcontext.Tbl_Master_Order
                                                        join c in dbcontext.Tbl_Order_Details on b.SO_ID equals c.AGEN_TRAD_PO_ID
                                                        join f in dbcontext.Tbl_Currency_Master on b.SO_CusCurrency equals f.CURRENCY_ID
                                                        where c.ORDER_ID == a.SD_OrderDetailID
                                                        select
                                                        f.CURRENCY_NAME).FirstOrDefault(),
                                         CountryZip = ((dbcontext.locations.Where(a => a.location_id == x.COM_COUNTRY).Select(a => a.name).FirstOrDefault()) + ", " + (x.COM_ZIP)),
                                         VatPer = (dbcontext.Tbl_SystemSetUp.Where(a => a.COMPANY_ID == com_key).Select(a => a.TAX).FirstOrDefault()),
                                         imgurl = (dbcontext.Tbl_SystemSetUp.Where(a => a.COMPANY_ID == com_key).Select(a => a.COMPANY_LOGO).FirstOrDefault()),
                                         SystemCompany = (dbcontext.Tbl_SystemSetUp.Where(a => a.COMPANY_ID == com_key).Select(a => a.COMPANY_NAME).FirstOrDefault()),
                                         DebitNoteCode = (dbcontext.Tbl_GenerateDebitNote.Where(z => z.DN_ShipmentID == id).Select(z => z.DN_Code).FirstOrDefault()),
                                         DebitNoteDate = (dbcontext.Tbl_GenerateDebitNote.Where(z => z.DN_ShipmentID == id).Select(z => z.CREATED_DATE ?? DateTime.Now).FirstOrDefault()),
                                         AmtInWords = AmtInWords,
                                         isfob = 1
                                     }).ToList();
                        ShipmentView_CM obj = new ShipmentView_CM();
                        obj.headerObj = data1;
                        obj.detailsObj = data2;
                        if (lang == "E")
                            return PartialView("/Views/Sales/ET_Sales_Shipment/ET_Sales_Shipment_Print.cshtml", obj);
                        else
                            return PartialView("/Views/Sales/ET_Sales_Shipment/ET_Sales_Shipment_Print_German.cshtml", obj);
                    }
                }
                catch (Exception exe)
                {
                    string actionName = this.ControllerContext.RouteData.Values["action"].ToString();
                    string controllerName = this.ControllerContext.RouteData.Values["controller"].ToString();
                    objERR.err_title = controllerName + "-" + controllerName;
                    objERR.err_message = "Sorry for the inconvience. Some error has been occured.";
                    objERR.err_details = exe.Message.Replace("'", "");
                    int errid = bal.ExceptionInsertLogs_BL(objERR);
                    return Json("ERR" + errid.ToString(), JsonRequestBehavior.AllowGet);
                }
            }
            else
            {
                return RedirectToAction("ET_SessionExpire", "ET_Login");
            }
        }
        public ActionResult ET_Sales_Mail_Compose_Reply_Forward(int id)
        {
            bool val = Session["UserID"] == null ? false : true;
            if (val)
            {
                try
                {
                    dbcontext.Configuration.ProxyCreationEnabled = false;
                    decimal userid = Convert.ToDecimal(Session["UserID"]);

                    int com_key = Convert.ToInt32(Session["CompanyKey"]);
                    var data = dbcontext.Tbl_MailSettings.Single(m => m.MS_UserId == userid && m.COM_KEY == com_key);
                    var data1 = dbcontext.Tbl_Shipment_Header.Single(m => m.S_ID == id && m.COM_KEY == com_key && m.DELETED == false);
                    var TO_IDS = dbcontext.Tbl_Master_CompanyDetails.Single(m => m.COM_ID == data1.S_CustSup && m.COM_KEY == com_key);
                    SmtpClient smtp = new SmtpClient();
                    smtp.Host = data.MS_OutGoingHostName;
                    NetworkCredential NetworkCred = new NetworkCredential();
                    NetworkCred.UserName = data.MS_EmailID;
                    NetworkCred.Password = data.MS_Password;
                    smtp.UseDefaultCredentials = true;
                    smtp.EnableSsl = true;
                    smtp.Credentials = NetworkCred;
                    smtp.Port = data.MS_OutGoingPort;


                    MailMessage mm = new MailMessage(data.MS_EmailID, TO_IDS.COM_EMAIL);
                    //if (Cc != "")
                    //    mm.CC.Add(Cc);
                    mm.Subject = "Request for Quotation";
                    mm.IsBodyHtml = true;
                    string body = "Dear Sir/Madam <br /><br />";
                    body = body + "We have received an enquiry from our customer which is attached herewith. We are requesting you to submit your competitive price, payment terms and delivery terms etc at the earliest.<br /><br /> ";
                    body = body + "Please quote the RFQ No for all future purposes.<br /><br /> Regards,<br />";
                    body = body + "Procurement Department<br />Euro Textiles Gmbh.";

                    mm.Body = string.Format(body, Session["UserName"]);
                    string[] urlList = new string[Request.Files.Count];
                    bool sentAttachments = false;
                    // File.SetAttributes(path, FileAttributes.Normal);
                    System.Net.Mail.Attachment objAttachements =
                                new System.Net.Mail.Attachment(Server.MapPath("~/Sales/PDFList/Shipment/" + data1.S_Code + "/" + data1.S_Code + ".pdf"));

                    // ADD FILE ATTACHMENT TO THE EMAIL.
                    mm.Attachments.Add(objAttachements);
                    sentAttachments = true;
                    if (Request.Files.Count > 0)
                    {
                        for (int i = 0; i < Request.Files.Count; i++)
                        {
                            HttpPostedFileBase file = Request.Files[i]; //Uploaded file
                                                                        //Use the following properties to get file's name, size and MIMEType

                            int fileSize = file.ContentLength;
                            string fileName = file.FileName;
                            string mimeType = file.ContentType;
                            System.IO.Stream fileContent = file.InputStream;

                            //To save file, use SaveAs method
                            string subPath = "~/Mail/Sent/Attachments/";
                            bool exists = System.IO.Directory.Exists(Server.MapPath(subPath));
                            if (!exists)
                                System.IO.Directory.CreateDirectory(Server.MapPath(subPath));

                            string path1 = System.Web.Hosting.HostingEnvironment.MapPath(subPath) + "\\";
                            string path = System.Web.Hosting.HostingEnvironment.MapPath(subPath) + "\\" + fileName;
                            string url = subPath.Replace("~", "") + fileName;

                            FileInfo file1 = new FileInfo(path);
                            int k = 1;
                            while (file1.Exists)
                            {
                                path = path1 + "Copy" + k + fileName;
                                url = subPath.Replace("~", "") + "Copy" + k + fileName;
                                k++;
                                file1 = new FileInfo(path);
                            }


                            urlList[i] = url;



                            file.SaveAs(path); //File will be saved in application root

                            // CREATE A FILE ATTACHMENT.
                            Attachment objAttachementss =
                                new Attachment(file.InputStream,
                                    "../Sales/PDFList/Shipment/" + data1.S_Code + "");

                            // ADD FILE ATTACHMENT TO THE EMAIL.
                            mm.Attachments.Add(objAttachementss);
                            sentAttachments = true;
                        }
                    }


                    bool success = false;
                    try
                    {
                        smtp.Send(mm);
                        success = true;
                        //Inserting Into mailSent table
                        Tbl_MailSent Objmst = new Tbl_MailSent()
                        {
                            MST_Subject = "",
                            MST_Message = body,
                            MST_Date = DateTime.Now,
                            MST_To = TO_IDS.COM_EMAIL,
                            MST_cc = "",
                            MST_Attachment = sentAttachments,
                            MST_UserId = Convert.ToInt32(Session["UserID"].ToString()),
                            CREATED_BY = Convert.ToInt32(Session["UserID"].ToString()),
                            CREATED_DATE = DateTime.Now,
                            DELETED = false,
                            COM_KEY = Convert.ToInt64(Session["CompanyKey"])
                        };
                        dbcontext.Tbl_MailSent.Add(Objmst);
                        dbcontext.SaveChanges();

                        //If attachment is there then Insert Into mailSentAttachment table
                        if (sentAttachments)
                        {
                            for (int i = 0; urlList.Count() > 0; i++)
                            {
                                Tbl_MailSentAttachment Objma = new Tbl_MailSentAttachment()
                                {
                                    MST_ID = Objmst.MST_ID,
                                    MSTA_Path = urlList[i],
                                    MSTA_UserId = Convert.ToInt32(Session["UserID"].ToString()),
                                    CREATED_BY = Convert.ToInt32(Session["UserID"].ToString()),
                                    CREATED_DATE = DateTime.Now,
                                    DELETED = false,
                                    COM_KEY = Convert.ToInt64(Session["CompanyKey"])
                                };
                                dbcontext.Tbl_MailSentAttachment.Add(Objma);
                                dbcontext.SaveChanges();
                            }

                        }
                    }
                    catch (Exception exe)
                    {


                    }

                    return Json(success, JsonRequestBehavior.AllowGet);


                }
                catch (Exception exe)
                {
                    string actionName = this.ControllerContext.RouteData.Values["action"].ToString();
                    string controllerName = this.ControllerContext.RouteData.Values["controller"].ToString();
                    objERR.err_title = controllerName + "-" + controllerName;
                    objERR.err_message = "Sorry for the inconvience. Some error has been occured.";
                    objERR.err_details = exe.Message.Replace("'", "");
                    int errid = bal.ExceptionInsertLogs_BL(objERR);
                    return Json("ERR" + errid.ToString(), JsonRequestBehavior.AllowGet);
                }
            }
            else
            {
                return RedirectToAction("ET_SessionExpire", "ET_Login");
            }
        }
        [HttpPost]
        public ActionResult DebitNotePrintTrading(int id, string lang)
        {
            bool val = Session["UserID"] == null ? false : true;
            if (val)
            {
                try
                {
                    dbcontext.Configuration.ProxyCreationEnabled = false;
                    int com_key = Convert.ToInt32(Session["Companykey"]);
                    var data1 = (from MO in dbcontext.Tbl_Shipment_Header
                                 join MU in dbcontext.Tbl_Shipment_Details on MO.S_ID equals MU.SD_PID
                                 join MU1 in dbcontext.Tbl_Master_User on MO.S_SalesPerson equals MU1.USER_ID
                                 join CD in dbcontext.Tbl_Master_CompanyDetails on MO.S_CustSup equals CD.COM_ID
                                 join SCD in dbcontext.Tbl_Master_CompanyDetails on MO.S_SupplierID equals SCD.COM_ID
                                 into x
                                 from y in x.DefaultIfEmpty()
                                 where MO.S_ID == id
                                 select new Shipment_CM
                                 {
                                     Street = CD.COM_STREET,
                                     CityState = (CD.COM_CITY + ", " + CD.COM_STATE),
                                     Zipcode = CD.COM_COUNTRY,
                                     CountryZip = ((dbcontext.locations.Where(a => a.location_id == CD.COM_COUNTRY).Select(a => a.name).FirstOrDefault()) + ", " + (CD.COM_ZIP)),
                                     S_INV_DATE = MO.S_INV_DATE ?? DateTime.Now,
                                     //SO_ORGID = MO.SO_ORGID,
                                     S_Type = MO.S_Type,
                                     S_CustSup = MO.S_CustSup,
                                     imgurl = (dbcontext.Tbl_SystemSetUp.Where(a => a.COMPANY_ID == com_key).Select(a => a.COMPANY_LOGO).FirstOrDefault()),
                                     SysCompany = (dbcontext.Tbl_SystemSetUp.Where(a => a.COMPANY_ID == com_key).Select(a => a.COMPANY_NAME).FirstOrDefault()),
                                     VatPer = (dbcontext.Tbl_SystemSetUp.Where(a => a.COMPANY_ID == com_key).Select(a => a.TAX).FirstOrDefault()),
                                     //PaymentTerms = (dbcontext.Tbl_Payment_Terms.Where(m => m.PT_ID == MO.p).Select(m => m.PT_Name).FirstOrDefault()),
                                     // PaymentTermsDescription = (dbcontext.Tbl_Payment_Terms.Where(m => m.PT_ID == MO.SO_CusPaymentTermID).Select(m => m.PT_Details).FirstOrDefault()),
                                     // SO_CusDeliveryTerms = MO.SO_CusDeliveryTerms,
                                     S_SupplierID = MO.S_SupplierID,
                                     //SO_CusPONO = MO.SO_CusPONO,
                                     //SO_CusPODate = MO.SO_CusPODate,
                                     //SO_SupSCNO = MO.SO_SupSCNO,
                                     //SO_SupSCDate = MO.SO_SupSCDate,
                                     //SO_CusPaymentTermID = MO.SO_CusPaymentTermID,
                                     //SO_Commision = MO.SO_Commision,
                                     //SO_Remarks = MO.SO_Remarks,
                                     //USER_NAME = MU.USER_NAME,
                                     CUSTOMER_NAME = CD.COM_NAME,
                                     SUPPLIER_NAME = y.COM_NAME,
                                     salesPersonName = MU1.DISPLAY_NAME,
                                     S_Code = MO.S_Code,
                                     S_ID = MO.S_ID,



                                 }).ToList();
                    var data2 = (from MO in dbcontext.Tbl_Shipment_Header
                                 join OD in dbcontext.Tbl_Shipment_Details on MO.S_ID equals OD.SD_PID
                                 join PM in dbcontext.Tbl_Product_Master on OD.SD_ProductID equals PM.P_ID
                                 join b in dbcontext.tbl_LookUp on PM.P_UOM equals b.LU_Code
                                 into m
                                 from n in m.DefaultIfEmpty()
                                 join MU in dbcontext.Tbl_Master_User on MO.S_SalesPerson equals MU.USER_ID
                                 join CD in dbcontext.Tbl_Master_CompanyDetails on MO.S_CustSup equals CD.COM_ID
                                 join SCD in dbcontext.Tbl_Master_CompanyDetails on MO.S_SupplierID equals SCD.COM_ID
                                 into x
                                 from y in x.DefaultIfEmpty()
                                 where MO.S_ID == id && n.LU_Type == 2
                                 select new Shipment_CM
                                 {
                                     ArticleNo = PM.P_ArticleNo,
                                     //..AGEN_TRAD_PO = OD.AGEN_TRAD_PO,
                                     PRODUCT_Name = PM.P_Name,
                                     SD_Quantity = OD.SD_Quantity,
                                     // DiscountPer = OD.DiscountPer,
                                     UOM_NAME = n.LU_Description,
                                     S_INV_DATE = MO.S_INV_DATE,
                                     //SO_ORGID = MO.SO_ORGID,
                                     S_Type = MO.S_Type,
                                     S_CustSup = MO.S_CustSup,
                                     S_SupplierID = MO.S_SupplierID,

                                     OrderDescription = (from b in dbcontext.Tbl_Master_Order
                                                         join c in dbcontext.Tbl_Order_Details on b.SO_ID equals c.AGEN_TRAD_PO_ID
                                                         where c.ORDER_ID == OD.SD_OrderDetailID
                                                         select
                                                         c.OrderDescription).FirstOrDefault(),
                                     DesignDetail = (from b in dbcontext.Tbl_Master_Order
                                                     join c in dbcontext.Tbl_Order_Details on b.SO_ID equals c.AGEN_TRAD_PO_ID
                                                     where c.ORDER_ID == OD.SD_OrderDetailID
                                                     select
                                                     c.DesignDetail).FirstOrDefault(),
                                     CustomerDes = (from b in dbcontext.Tbl_Master_Order
                                                    join c in dbcontext.Tbl_Order_Details on b.SO_ID equals c.AGEN_TRAD_PO_ID
                                                    where c.ORDER_ID == OD.SD_OrderDetailID
                                                    select
                                                    c.CustomerDes).FirstOrDefault(),

                                     CUSTOMER_NAME = CD.COM_NAME,
                                     SUPPLIER_NAME = y.COM_NAME,
                                     S_Code = MO.S_Code,


                                 }).ToList();
                    ShipmentView_CM obj = new ShipmentView_CM();
                    obj.headerObj = data1;
                    obj.detailsObj = data2;
                    if (lang == "E")
                        return PartialView("/Views/Sales/ET_Sales_Shipment/ET_Sales_Shipment_PrintTrading.cshtml", obj);
                    else
                        return PartialView("/Views/Sales/ET_Sales_Shipment/ET_Sales_Shipment_PrintTradingGerman.cshtml", obj);

                }
                catch (Exception exe)
                {
                    string actionName = this.ControllerContext.RouteData.Values["action"].ToString();
                    string controllerName = this.ControllerContext.RouteData.Values["controller"].ToString();
                    objERR.err_title = controllerName + "-" + controllerName;
                    objERR.err_message = "Sorry for the inconvience. Some error has been occured.";
                    objERR.err_details = exe.Message.Replace("'", "");
                    int errid = bal.ExceptionInsertLogs_BL(objERR);
                    return Json("ERR" + errid.ToString(), JsonRequestBehavior.AllowGet);
                }
            }
            else
            {
                return RedirectToAction("ET_SessionExpire", "ET_Login");
            }
        }
        public ActionResult DebitNotePrint(int id, string lang)
        {
            bool val = Session["UserID"] == null ? false : true;
            if (val)
            {
                try
                {
                    dbcontext.Configuration.ProxyCreationEnabled = false;
                    int com_key = Convert.ToInt32(Session["Companykey"]);
                    var data1 = (from MO in dbcontext.Tbl_Shipment_Header
                                 join MU in dbcontext.Tbl_Shipment_Details on MO.S_ID equals MU.SD_PID
                                 join MU1 in dbcontext.Tbl_Master_User on MO.S_SalesPerson equals MU1.USER_ID
                                 join CD in dbcontext.Tbl_Master_CompanyDetails on MO.S_CustSup equals CD.COM_ID
                                 join SCD in dbcontext.Tbl_Master_CompanyDetails on MO.S_SupplierID equals SCD.COM_ID
                                 into x
                                 from y in x.DefaultIfEmpty()
                                 where MO.S_ID == id
                                 select new Shipment_CM
                                 {
                                     Street = CD.COM_STREET,
                                     CityState = (CD.COM_CITY + ", " + CD.COM_STATE),
                                     Zipcode = CD.COM_COUNTRY,
                                     CountryZip = ((dbcontext.locations.Where(a => a.location_id == CD.COM_COUNTRY).Select(a => a.name).FirstOrDefault()) + ", " + (CD.COM_ZIP)),
                                     S_INV_DATE = MO.S_INV_DATE ?? DateTime.Now,
                                     //SO_ORGID = MO.SO_ORGID,
                                     S_Type = MO.S_Type,
                                     S_CustSup = MO.S_CustSup,
                                     imgurl = (dbcontext.Tbl_SystemSetUp.Where(a => a.COMPANY_ID == com_key).Select(a => a.COMPANY_LOGO).FirstOrDefault()),
                                     SysCompany = (dbcontext.Tbl_SystemSetUp.Where(a => a.COMPANY_ID == com_key).Select(a => a.COMPANY_NAME).FirstOrDefault()),
                                     VatPer = (dbcontext.Tbl_SystemSetUp.Where(a => a.COMPANY_ID == com_key).Select(a => a.TAX).FirstOrDefault()),
                                     //PaymentTerms = (dbcontext.Tbl_Payment_Terms.Where(m => m.PT_ID == MO.p).Select(m => m.PT_Name).FirstOrDefault()),
                                     // PaymentTermsDescription = (dbcontext.Tbl_Payment_Terms.Where(m => m.PT_ID == MO.SO_CusPaymentTermID).Select(m => m.PT_Details).FirstOrDefault()),
                                     // SO_CusDeliveryTerms = MO.SO_CusDeliveryTerms,
                                     S_SupplierID = MO.S_SupplierID,
                                     //SO_CusPONO = MO.SO_CusPONO,
                                     //SO_CusPODate = MO.SO_CusPODate,
                                     //SO_SupSCNO = MO.SO_SupSCNO,
                                     //SO_SupSCDate = MO.SO_SupSCDate,
                                     //SO_CusPaymentTermID = MO.SO_CusPaymentTermID,
                                     //SO_Commision = MO.SO_Commision,
                                     //SO_Remarks = MO.SO_Remarks,
                                     //USER_NAME = MU.USER_NAME,
                                     CUSTOMER_NAME = CD.COM_NAME,
                                     SUPPLIER_NAME = y.COM_NAME,
                                     salesPersonName = MU1.DISPLAY_NAME,
                                     S_Code = MO.S_Code,
                                     S_ID = MO.S_ID,



                                 }).ToList();
                    var data2 = (from MO in dbcontext.Tbl_Shipment_Header
                                 join OD in dbcontext.Tbl_Shipment_Details on MO.S_ID equals OD.SD_PID
                                 join PM in dbcontext.Tbl_Product_Master on OD.SD_ProductID equals PM.P_ID
                                 join b in dbcontext.tbl_LookUp on PM.P_UOM equals b.LU_Code
                                 into m
                                 from n in m.DefaultIfEmpty()
                                 join MU in dbcontext.Tbl_Master_User on MO.S_SalesPerson equals MU.USER_ID
                                 join CD in dbcontext.Tbl_Master_CompanyDetails on MO.S_CustSup equals CD.COM_ID
                                 join SCD in dbcontext.Tbl_Master_CompanyDetails on MO.S_SupplierID equals SCD.COM_ID
                                 into x
                                 from y in x.DefaultIfEmpty()
                                 where MO.S_ID == id && n.LU_Type == 2
                                 select new Shipment_CM
                                 {
                                     ArticleNo = PM.P_ArticleNo,
                                     //..AGEN_TRAD_PO = OD.AGEN_TRAD_PO,
                                     PRODUCT_Name = PM.P_Name,
                                     SD_Quantity = OD.SD_Quantity,
                                     // DiscountPer = OD.DiscountPer,
                                     UOM_NAME = n.LU_Description,
                                     S_INV_DATE = MO.S_INV_DATE,
                                     //SO_ORGID = MO.SO_ORGID,
                                     S_Type = MO.S_Type,
                                     S_CustSup = MO.S_CustSup,
                                     S_SupplierID = MO.S_SupplierID,
                                     
                                     OrderDescription = (from b in dbcontext.Tbl_Master_Order
                                                   join c in dbcontext.Tbl_Order_Details on b.SO_ID equals c.AGEN_TRAD_PO_ID
                                                   where c.ORDER_ID == OD.SD_OrderDetailID
                                                   select
                                                   c.OrderDescription).FirstOrDefault(),
                                     DesignDetail = (from b in dbcontext.Tbl_Master_Order
                                                         join c in dbcontext.Tbl_Order_Details on b.SO_ID equals c.AGEN_TRAD_PO_ID
                                                         where c.ORDER_ID == OD.SD_OrderDetailID
                                                         select
                                                         c.DesignDetail).FirstOrDefault(),
                                     CustomerDes = (from b in dbcontext.Tbl_Master_Order
                                                     join c in dbcontext.Tbl_Order_Details on b.SO_ID equals c.AGEN_TRAD_PO_ID
                                                     where c.ORDER_ID == OD.SD_OrderDetailID
                                                     select
                                                     c.CustomerDes).FirstOrDefault(),
                                    
                                     CUSTOMER_NAME = CD.COM_NAME,
                                     SUPPLIER_NAME = y.COM_NAME,
                                     S_Code = MO.S_Code,
                                     

                                 }).ToList();
                    string path = "";
                    if (lang == "E")
                    {
                        for (int i = 0; i < data1.Count; i++)
                        {

                            var doc1 = new iTextSharp.text.Document(PageSize.A4, 30, 25, 130, 90);
                            string subPath = "~/Sales/PDFList/Shipment/" + data1[i].S_Code + "/";
                            bool exists = System.IO.Directory.Exists(HttpContext.Server.MapPath(subPath));
                            if (!exists)
                                System.IO.Directory.CreateDirectory(HttpContext.Server.MapPath(subPath));
                            var output = new FileStream(Server.MapPath(subPath + data1[i].S_Code + ".pdf"), FileMode.Create);
                            var writer = PdfWriter.GetInstance(doc1, output);
                            writer.PageEvent = new pdffooterclass();
                            PdfWriter.GetInstance(doc1, new FileStream(Request.PhysicalApplicationPath + "\\Invoice_Statement.pdf", FileMode.Create));
                            doc1.Open();
                            path = output.Name;
                            //////font size change from default  added by gv on 12 / 12 / 18
                            FontFactory.RegisterDirectories();
                            Font font = new Font(FontFactory.GetFont("Arial", 10, Font.NORMAL));
                            Font fontsmall = new Font(FontFactory.GetFont("Arial", 9, Font.NORMAL));
                            Font fontsmall1 = new Font(FontFactory.GetFont("Arial", 10, Font.NORMAL | Font.UNDERLINE));
                            Font Fontbigger = new Font(FontFactory.GetFont("Arial", 20, Font.BOLD));
                            Font Fontsmaller = new Font(FontFactory.GetFont("Arial", 10, Font.BOLD));
                            Font Fontsmaller1 = new Font(FontFactory.GetFont("Arial", 12, Font.BOLD));

                            PdfPTable table1 = new PdfPTable(1);
                            table1.DefaultCell.Border = 0;
                            table1.WidthPercentage = 100f;

                           
                            Paragraph pg2 = new Paragraph();
                            Phrase phraseConstant2 = new Phrase("" + data1[i].CUSTOMER_NAME + "\n", font);
                            Phrase phraseConstant3 = new Phrase("" + data1[i].Street + "\n", font);
                            Phrase phraseConstant4 = new Phrase("" + data1[i].CityState + "\n", font);
                            Phrase phraseConstant5 = new Phrase("" + data1[i].CountryZip + "\n", font);
                            pg2.Add(phraseConstant2);
                            pg2.Add(phraseConstant3);
                            pg2.Add(phraseConstant4);
                            pg2.Add(phraseConstant5);
                            PdfPCell cell21 = new PdfPCell(pg2);
                            cell21.HorizontalAlignment = 0;
                            cell21.PaddingTop = 1.0f;
                            cell21.PaddingLeft = 1.0f;
                            cell21.Border = 0;
                            table1.AddCell(cell21);
                            doc1.Add(table1);

                            PdfPTable table2 = new PdfPTable(3);
                            table2.WidthPercentage = 100f;
                            float[] widthsvalforcus = new float[] { 13f, 4f, 5f };
                            table2.TotalWidth = 100f;
                            table2.WidthPercentage = 100f;
                            table2.SetWidths(widthsvalforcus);

                            Phrase emp1 = new Phrase("", font);
                            PdfPCell cell26emp = new PdfPCell(emp1);
                            cell26emp.Border = 0;
                            cell26emp.HorizontalAlignment = 2;
                            cell26emp.PaddingBottom = 2.5f;
                            table2.AddCell(cell26emp);
                            Phrase cuscode = new Phrase("Customer Code:", font);
                            PdfPCell cell26 = new PdfPCell(cuscode);
                            cell26.Border = 0;
                            cell26.HorizontalAlignment = 0;
                            cell26.PaddingBottom = 2.5f;
                            table2.AddCell(cell26);
                            Phrase cuscodeval = new Phrase("" + data1[i].S_CustSup + "", font);
                            PdfPCell cell26val = new PdfPCell(cuscodeval);
                            cell26val.Border = 0;
                            cell26val.HorizontalAlignment = 0;
                            cell26val.PaddingBottom = 2.5f;
                            table2.AddCell(cell26val);

                            Phrase emp2 = new Phrase("", font);
                            PdfPCell cell26emp1 = new PdfPCell(emp2);
                            cell26emp1.Border = 0;
                            cell26emp1.HorizontalAlignment = 0;
                            cell26emp1.PaddingBottom = 2.5f;
                            table2.AddCell(cell26emp1);
                            Phrase Processby = new Phrase("Processed By:", font);
                            PdfPCell cell26Processby = new PdfPCell(Processby);
                            cell26Processby.Border = 0;
                            cell26Processby.HorizontalAlignment = 0;
                            cell26Processby.PaddingBottom = 2.5f;
                            table2.AddCell(cell26Processby);
                            Phrase cuscodeval1 = new Phrase("" + data1[i].salesPersonName + "", font);
                            PdfPCell cell26Processby1 = new PdfPCell(cuscodeval1);
                            cell26Processby1.Border = 0;
                            cell26Processby1.HorizontalAlignment = 0;
                            cell26Processby1.PaddingBottom = 2.5f;
                            table2.AddCell(cell26Processby1);

                            Phrase emp3 = new Phrase("", font);
                            PdfPCell cell26emp2 = new PdfPCell(emp3);
                            cell26emp2.Border = 0;
                            cell26emp2.HorizontalAlignment = 2;
                            cell26emp2.PaddingBottom = 2.5f;
                            table2.AddCell(cell26emp2);
                            Phrase Datecell = new Phrase("Date:", font);
                            PdfPCell cell26Datecell = new PdfPCell(Datecell);
                            cell26Datecell.Border = 0;
                            cell26Datecell.HorizontalAlignment = 0;
                            cell26Datecell.PaddingBottom = 2.5f;
                            table2.AddCell(cell26Datecell);
                            Phrase cuscodeval2 = new Phrase(""+(data1[i].S_INV_DATE??DateTime.Now).ToString("dd-MM-yyyy")+"", font);
                            PdfPCell cell26Processby2 = new PdfPCell(cuscodeval2);
                            cell26Processby2.Border = 0;
                            cell26Processby2.HorizontalAlignment = 0;
                            cell26Processby2.PaddingBottom = 2.5f;
                            table2.AddCell(cell26Processby2);

                            doc1.Add(table2);
                            PdfPTable contenttable = new PdfPTable(1);
                            contenttable.TotalWidth = 100f;
                            contenttable.WidthPercentage = 100f;
                            Paragraph pp1con = new Paragraph();
                            Phrase phar1con = new Phrase("Shipment Details", Fontsmaller1);
                            pp1con.Add(phar1con);
                            PdfPCell cell29Con = new PdfPCell(pp1con);
                            //cell29Con.AddElement(new Paragraph(new Chunk("" , Fontsmaller)));
                            cell29Con.PaddingTop = 4.5f;
                            cell29Con.HorizontalAlignment = 1;
                            cell29Con.PaddingBottom = 5.5f;
                            cell29Con.Border = 0;
                            contenttable.AddCell(cell29Con);
                            PdfPCell cell29 = new PdfPCell();
                            cell29.AddElement(new Paragraph(new Chunk("Shipment No::" + data1[i].S_Code + "", Fontsmaller)));
                            cell29.PaddingTop = 6.5f;
                            cell29.PaddingBottom = 20.5f;
                            cell29.Border = 0;
                            contenttable.AddCell(cell29);
                            doc1.Add(contenttable);

                            PdfPTable table4 = new PdfPTable(4);
                            float[] widths1 = new float[] { 5f, 10f, 10f, 40f };
                            table4.TotalWidth = 100f;
                            table4.WidthPercentage = 100f;
                            table4.HeaderRows = 1;
                            table4.SetWidths(widths1);

                            Phrase phraseConstantde1 = new Phrase("S.No", Fontsmaller);
                            PdfPCell cell41 = new PdfPCell(phraseConstantde1);



                            cell41.HorizontalAlignment = 1;
                            cell41.PaddingTop = 2.5f;
                            cell41.PaddingBottom = 2.5f;

                            table4.AddCell(cell41);
                            Phrase phraseConstantde2 = new Phrase("Quantity", Fontsmaller);
                            PdfPCell cell42 = new PdfPCell(phraseConstantde2);
                            cell42.Colspan = 2;
                            //cell42.AddElement(new Paragraph(new Chunk("Qty", Fontsmaller)));
                            cell42.HorizontalAlignment = 1;
                            cell42.PaddingTop = 2.5f;
                            cell42.PaddingBottom = 2.5f;
                            table4.AddCell(cell42);
                            Phrase phraseConstantde3 = new Phrase("Product Description", Fontsmaller);
                            PdfPCell cell421 = new PdfPCell(phraseConstantde3);
                            cell421.HorizontalAlignment = 1;
                            //cell421.AddElement(new Paragraph(new Chunk("UOM", Fontsmaller)));
                            cell421.PaddingTop = 2.5f;
                            cell421.PaddingBottom = 2.5f;

                            table4.AddCell(cell421);


                            decimal? total = 0;
                            for (int j = 0; j < data2.Count; j++)
                            {
                                Paragraph Snopp = new Paragraph();
                                Phrase Snophar = new Phrase("" + (j + 1) + "\n", font);
                                Snopp.Add(Snophar);
                                PdfPCell cell51 = new PdfPCell(Snopp);
                                cell51.HorizontalAlignment = 1;
                                //cell51.AddElement(new Paragraph(new Chunk("" + (j + 1) + "", font)));

                                // cell51.PaddingTop = 2.5f;
                                // cell51.PaddingBottom = 2.5f;

                                table4.AddCell(cell51);
                                Paragraph qtypp = new Paragraph();
                                Phrase qtyphar = new Phrase("" + data2[j].SD_Quantity + "", font);
                                qtypp.Add(qtyphar);
                                PdfPCell cell52 = new PdfPCell(qtypp);
                                cell52.HorizontalAlignment = 2;
                                //  cell52.PaddingTop = 2.5f;
                                // cell52.PaddingBottom = 2.5f;

                                table4.AddCell(cell52);
                                Paragraph uompp = new Paragraph();
                                Phrase uomphar = new Phrase("" + data2[j].UOM_NAME + "", font);
                                uompp.Add(uomphar);
                                PdfPCell uomcell = new PdfPCell(uompp);

                                // uomcell.AddElement(new Paragraph(new Chunk("" +  + "", font)));
                                uomcell.HorizontalAlignment = 0;
                                // uomcell.PaddingTop = 2.5f;
                                // uomcell.PaddingBottom = 2.5f;

                                table4.AddCell(uomcell);

                                Paragraph uomppdes = new Paragraph();
                                Phrase uomphardes = new Phrase("" + data2[j].PRODUCT_Name + "", font);
                                uomppdes.Add(uomphardes);
                                PdfPCell uomcelldes = new PdfPCell(uomppdes);
                                uomcelldes.HorizontalAlignment = 0;
                                table4.AddCell(uomcelldes);


                            }
                            doc1.Add(table4);

                            PdfPTable table6 = new PdfPTable(1);
                            PdfPCell cell31 = new PdfPCell();
                            cell31.Border = 0;
                            cell31.AddElement(new Paragraph(new Chunk("", font)));
                            cell31.PaddingTop = 20.5f;
                            cell31.PaddingBottom = 2.5f;
                            table6.AddCell(cell31);

                            PdfPCell cell39 = new PdfPCell();
                            cell39.Border = 0;
                            cell39.AddElement(new Paragraph(""));
                            cell39.PaddingTop = 28.0f;
                            cell39.PaddingBottom = 2.5f;
                            table6.AddCell(cell39);
                            doc1.Add(table6);

                            PdfPTable table7 = new PdfPTable(1);
                            table7.WidthPercentage = 100f;
                         
                            if (data2.Count > 11)
                            {
                                doc1.NewPage();
                            }
                           
                            
                            PdfPCell line1 = new PdfPCell();

                            line1.AddElement(new Paragraph(new Chunk("It is the General Terms and Conditions (GTC) of Eurotextiles GmbH & Co. KG. Downgrades of quality / quantity of goods must be given in writing before use, but in any case 7 days after receipt of the goods. Goods that are washed or washed are excluded from the complaint.", font)));

                            line1.PaddingTop = 6.5f;
                            line1.PaddingBottom = 2.5f;
                            line1.Border = 0;
                            table7.AddCell(line1);
                            PdfPCell line2 = new PdfPCell();

                            line2.AddElement(new Paragraph(new Chunk("Note according to the Federal Data Protection Act: We work with EDP and have stored your name and the data otherwise required in the context of the matter. A transmission to third does not take place.", font)));

                            line2.PaddingTop = 2.5f;
                            line2.PaddingBottom = 2.5f;
                            line2.Border = 0;
                            table7.AddCell(line2);
                           
                            doc1.Add(table7);

                            doc1.Close();

                        }
                    }

                    if (lang == "G")
                    {
                        for (int i = 0; i < data1.Count; i++)
                        {

                            var doc1 = new iTextSharp.text.Document(PageSize.A4, 30, 25, 130, 90);
                            string subPath = "~/Sales/PDFList/Shipment/" + data1[i].S_Code + "/";
                            bool exists = System.IO.Directory.Exists(HttpContext.Server.MapPath(subPath));
                            if (!exists)
                                System.IO.Directory.CreateDirectory(HttpContext.Server.MapPath(subPath));
                            var output = new FileStream(Server.MapPath(subPath + data1[i].S_Code + ".pdf"), FileMode.Create);
                            var writer = PdfWriter.GetInstance(doc1, output);
                            writer.PageEvent = new pdffooterclass();
                            PdfWriter.GetInstance(doc1, new FileStream(Request.PhysicalApplicationPath + "\\Invoice_Statement.pdf", FileMode.Create));
                            doc1.Open();
                            path = output.Name;
                            //////font size change from default  added by gv on 12 / 12 / 18
                            FontFactory.RegisterDirectories();
                            Font font = new Font(FontFactory.GetFont("Arial", 10, Font.NORMAL));
                            Font fontsmall = new Font(FontFactory.GetFont("Arial", 9, Font.NORMAL));
                            Font fontsmall1 = new Font(FontFactory.GetFont("Arial", 10, Font.NORMAL | Font.UNDERLINE));
                            Font Fontbigger = new Font(FontFactory.GetFont("Arial", 20, Font.BOLD));
                            Font Fontsmaller = new Font(FontFactory.GetFont("Arial", 10, Font.BOLD));
                            Font Fontsmaller1 = new Font(FontFactory.GetFont("Arial", 12, Font.BOLD));

                            PdfPTable table1 = new PdfPTable(1);
                            table1.DefaultCell.Border = 0;
                            table1.WidthPercentage = 100f;

                            
                            Paragraph pg2 = new Paragraph();
                            Phrase phraseConstant2 = new Phrase("" + data1[i].CUSTOMER_NAME + "\n", font);
                            Phrase phraseConstant3 = new Phrase("" + data1[i].Street + "\n", font);
                            Phrase phraseConstant4 = new Phrase("" + data1[i].CityState + "\n", font);
                            Phrase phraseConstant5 = new Phrase("" + data1[i].CountryZip + "\n", font);
                            pg2.Add(phraseConstant2);
                            pg2.Add(phraseConstant3);
                            pg2.Add(phraseConstant4);
                            pg2.Add(phraseConstant5);
                            PdfPCell cell21 = new PdfPCell(pg2);
                            cell21.HorizontalAlignment = 0;
                            cell21.PaddingTop = 1.0f;
                            cell21.PaddingLeft = 1.0f;
                            cell21.Border = 0;
                            table1.AddCell(cell21);
                            doc1.Add(table1);

                            PdfPTable table2 = new PdfPTable(3);
                            table2.WidthPercentage = 100f;
                            float[] widthsvalforcus = new float[] { 13f, 4f, 5f };
                            table2.TotalWidth = 100f;
                            table2.WidthPercentage = 100f;
                            table2.SetWidths(widthsvalforcus);

                            Phrase emp1 = new Phrase("", font);
                            PdfPCell cell26emp = new PdfPCell(emp1);
                            cell26emp.Border = 0;
                            cell26emp.HorizontalAlignment = 2;
                            cell26emp.PaddingBottom = 2.5f;
                            table2.AddCell(cell26emp);
                            Phrase cuscode = new Phrase("Customer Code:", font);
                            PdfPCell cell26 = new PdfPCell(cuscode);
                            cell26.Border = 0;
                            cell26.HorizontalAlignment = 0;
                            cell26.PaddingBottom = 2.5f;
                            table2.AddCell(cell26);
                            Phrase cuscodeval = new Phrase("" + data1[i].CompanyCode + "", font);
                            PdfPCell cell26val = new PdfPCell(cuscodeval);
                            cell26val.Border = 0;
                            cell26val.HorizontalAlignment = 0;
                            cell26val.PaddingBottom = 2.5f;
                            table2.AddCell(cell26val);

                            Phrase emp2 = new Phrase("", font);
                            PdfPCell cell26emp1 = new PdfPCell(emp2);
                            cell26emp1.Border = 0;
                            cell26emp1.HorizontalAlignment = 0;
                            cell26emp1.PaddingBottom = 2.5f;
                            table2.AddCell(cell26emp1);
                            Phrase Processby = new Phrase("Processed By:", font);
                            PdfPCell cell26Processby = new PdfPCell(Processby);
                            cell26Processby.Border = 0;
                            cell26Processby.HorizontalAlignment = 0;
                            cell26Processby.PaddingBottom = 2.5f;
                            table2.AddCell(cell26Processby);
                            Phrase cuscodeval1 = new Phrase("" + data1[i].salesPersonName + "", font);
                            PdfPCell cell26Processby1 = new PdfPCell(cuscodeval1);
                            cell26Processby1.Border = 0;
                            cell26Processby1.HorizontalAlignment = 0;
                            cell26Processby1.PaddingBottom = 2.5f;
                            table2.AddCell(cell26Processby1);

                            Phrase emp3 = new Phrase("", font);
                            PdfPCell cell26emp2 = new PdfPCell(emp3);
                            cell26emp2.Border = 0;
                            cell26emp2.HorizontalAlignment = 2;
                            cell26emp2.PaddingBottom = 2.5f;
                            table2.AddCell(cell26emp2);
                            Phrase Datecell = new Phrase("Date:", font);
                            PdfPCell cell26Datecell = new PdfPCell(Datecell);
                            cell26Datecell.Border = 0;
                            cell26Datecell.HorizontalAlignment = 0;
                            cell26Datecell.PaddingBottom = 2.5f;
                            table2.AddCell(cell26Datecell);
                            Phrase cuscodeval2 = new Phrase("" + (data1[i].S_INV_DATE ?? DateTime.Now).ToString("dd-MM-yyyy") + "", font);
                            PdfPCell cell26Processby2 = new PdfPCell(cuscodeval2);
                            cell26Processby2.Border = 0;
                            cell26Processby2.HorizontalAlignment = 0;
                            cell26Processby2.PaddingBottom = 2.5f;
                            table2.AddCell(cell26Processby2);

                            doc1.Add(table2);
                            PdfPTable contenttable = new PdfPTable(1);
                            contenttable.TotalWidth = 100f;
                            contenttable.WidthPercentage = 100f;
                            Paragraph pp1con = new Paragraph();
                            Phrase phar1con = new Phrase("Shipment Details", Fontsmaller1);
                            pp1con.Add(phar1con);
                            PdfPCell cell29Con = new PdfPCell(pp1con);
                            //cell29Con.AddElement(new Paragraph(new Chunk("" , Fontsmaller)));
                            cell29Con.PaddingTop = 4.5f;
                            cell29Con.HorizontalAlignment = 1;
                            cell29Con.PaddingBottom = 5.5f;
                            cell29Con.Border = 0;
                            contenttable.AddCell(cell29Con);
                            PdfPCell cell29 = new PdfPCell();
                            cell29.AddElement(new Paragraph(new Chunk("Shipment No:" + data1[i].S_Code + "", Fontsmaller)));
                            cell29.PaddingTop = 6.5f;
                            cell29.PaddingBottom = 20.5f;
                            cell29.Border = 0;
                            contenttable.AddCell(cell29);
                            doc1.Add(contenttable);

                            PdfPTable table4 = new PdfPTable(4);
                            float[] widths1 = new float[] { 5f, 10f, 10f, 40f };
                            table4.TotalWidth = 100f;
                            table4.WidthPercentage = 100f;
                            table4.HeaderRows = 1;
                            table4.SetWidths(widths1);

                            Phrase phraseConstantde1 = new Phrase("S.No", Fontsmaller);
                            PdfPCell cell41 = new PdfPCell(phraseConstantde1);



                            cell41.HorizontalAlignment = 1;
                            cell41.PaddingTop = 2.5f;
                            cell41.PaddingBottom = 2.5f;

                            table4.AddCell(cell41);
                            Phrase phraseConstantde2 = new Phrase("Quantity", Fontsmaller);
                            PdfPCell cell42 = new PdfPCell(phraseConstantde2);
                            cell42.Colspan = 2;
                            //cell42.AddElement(new Paragraph(new Chunk("Qty", Fontsmaller)));
                            cell42.HorizontalAlignment = 1;
                            cell42.PaddingTop = 2.5f;
                            cell42.PaddingBottom = 2.5f;
                            table4.AddCell(cell42);
                            Phrase phraseConstantde3 = new Phrase("Product Description", Fontsmaller);
                            PdfPCell cell421 = new PdfPCell(phraseConstantde3);
                            cell421.HorizontalAlignment = 1;
                            //cell421.AddElement(new Paragraph(new Chunk("UOM", Fontsmaller)));
                            cell421.PaddingTop = 2.5f;
                            cell421.PaddingBottom = 2.5f;

                            table4.AddCell(cell421);


                            decimal? total = 0;
                            for (int j = 0; j < data2.Count; j++)
                            {
                                Paragraph Snopp = new Paragraph();
                                Phrase Snophar = new Phrase("" + (j + 1) + "\n", font);
                                Snopp.Add(Snophar);
                                PdfPCell cell51 = new PdfPCell(Snopp);
                                cell51.HorizontalAlignment = 1;
                                //cell51.AddElement(new Paragraph(new Chunk("" + (j + 1) + "", font)));

                                // cell51.PaddingTop = 2.5f;
                                // cell51.PaddingBottom = 2.5f;

                                table4.AddCell(cell51);
                                Paragraph qtypp = new Paragraph();
                                Phrase qtyphar = new Phrase("" + data2[j].SD_Quantity + "", font);
                                qtypp.Add(qtyphar);
                                PdfPCell cell52 = new PdfPCell(qtypp);
                                cell52.HorizontalAlignment = 2;
                                //  cell52.PaddingTop = 2.5f;
                                // cell52.PaddingBottom = 2.5f;

                                table4.AddCell(cell52);
                                Paragraph uompp = new Paragraph();
                                Phrase uomphar = new Phrase("" + data2[j].UOM_NAME + "", font);
                                uompp.Add(uomphar);
                                PdfPCell uomcell = new PdfPCell(uompp);

                                // uomcell.AddElement(new Paragraph(new Chunk("" +  + "", font)));
                                uomcell.HorizontalAlignment = 0;
                                // uomcell.PaddingTop = 2.5f;
                                // uomcell.PaddingBottom = 2.5f;

                                table4.AddCell(uomcell);

                                Paragraph uomppdes = new Paragraph();
                                Phrase uomphardes = new Phrase("" + data2[j].PRODUCT_Name + "", font);
                                uomppdes.Add(uomphardes);
                                PdfPCell uomcelldes = new PdfPCell(uomppdes);
                                uomcelldes.HorizontalAlignment = 0;
                                table4.AddCell(uomcelldes);


                            }
                            doc1.Add(table4);

                            PdfPTable table6 = new PdfPTable(1);
                            PdfPCell cell31 = new PdfPCell();
                            cell31.Border = 0;
                            cell31.AddElement(new Paragraph(new Chunk("", font)));
                            cell31.PaddingTop = 20.5f;
                            cell31.PaddingBottom = 2.5f;
                            table6.AddCell(cell31);

                            PdfPCell cell39 = new PdfPCell();
                            cell39.Border = 0;
                            cell39.AddElement(new Paragraph(""));
                            cell39.PaddingTop = 28.0f;
                            cell39.PaddingBottom = 2.5f;
                            table6.AddCell(cell39);
                            doc1.Add(table6);

                            PdfPTable table7 = new PdfPTable(1);
                            table7.WidthPercentage = 100f;
                            
                            if (data2.Count > 11)
                            {
                                doc1.NewPage();
                            }
                            
                            PdfPCell line1 = new PdfPCell();

                            line1.AddElement(new Paragraph(new Chunk("Es gelten die Allgemeinen Geschäftsbedingungen (AGB) der Eurotextiles GmbH & Co. KG. Abweichungen von Qualität/Stückzahl der Ware müssen uns vor Benutzung, aber in jedem Fall innerhalb von 7 Tagen nach Erhalt der Ware, schriftlich mitgeteilt werden. Ware die bereits gewaschen oder benutzt wurde ist von der Reklamation ausgeschlossen.", font)));

                            line1.PaddingTop = 6.5f;
                            line1.PaddingBottom = 2.5f;
                            line1.Border = 0;
                            table7.AddCell(line1);
                            PdfPCell line2 = new PdfPCell();

                            line2.AddElement(new Paragraph(new Chunk("Hinweis nach Bundesdatenschutzgesetz: Wir arbeiten mit EDV und haben Ihren Namen und die sonst im Rahmen der Angelegenheit benötigten Daten gespeichert. Eine Übermittlung an Dritte findet nicht statt.", font)));

                            line2.PaddingTop = 2.5f;
                            line2.PaddingBottom = 2.5f;
                            line2.Border = 0;
                            table7.AddCell(line2);

                            doc1.Add(table7);

                            doc1.Close();

                        }
                    }
                    return Json(data1, JsonRequestBehavior.AllowGet);
                        
                }
                catch (Exception exe)
                {
                    string actionName = this.ControllerContext.RouteData.Values["action"].ToString();
                    string controllerName = this.ControllerContext.RouteData.Values["controller"].ToString();
                    objERR.err_title = controllerName + "-" + controllerName;
                    objERR.err_message = "Sorry for the inconvience. Some error has been occured.";
                    objERR.err_details = exe.Message.Replace("'", "");
                    int errid = bal.ExceptionInsertLogs_BL(objERR);
                    return Json("ERR" + errid.ToString(), JsonRequestBehavior.AllowGet);
                }
            }
            else
            {
                return RedirectToAction("ET_SessionExpire", "ET_Login");
            }
        }
        public class pdffooterclass : PdfPageEventHelper
        {
            PdfTemplate headerTemplate, footerTemplate;
            BaseFont bf = null;
            PdfContentByte cb;
            Color FontColour = new Color(35, 31, 32);
            Font Fontbiggest = new Font(FontFactory.GetFont("Arial", 50, Font.BOLD, new Color(180)));
            Font Fontbigger = new Font(FontFactory.GetFont("Arial", 20, Font.BOLD));
            Font Fontsmaller = new Font(FontFactory.GetFont("Arial", 10, Font.BOLD));

           // Image logo = iTextSharp.text.Image.GetInstance("E:/Projects/Indra/Images/euro_logowithText.png");
            Image logo = iTextSharp.text.Image.GetInstance("C:/Websites/Indra/Images/euro_logowithText.png");
            public override void OnStartPage(PdfWriter writer, Document document)
            {
                base.OnStartPage(writer, document);
                //logo.ScaleAbsoluteHeight(100);
                //logo.ScaleAbsoluteWidth(500);
                PdfPCell imageCell = new PdfPCell(logo);
                imageCell.HorizontalAlignment = Element.ALIGN_CENTER;
                imageCell.Border = 0;
                PdfPTable table0 = new PdfPTable(1);
                table0.WidthPercentage = 200f;
                table0.TotalWidth = 200f;
                imageCell.PaddingLeft = 109f;
                float[] widths = new float[] { 200f };
                table0.SetWidths(widths);
                table0.AddCell(imageCell);
                // Phrase phraseConstant = new Phrase("EUROTEXTILES\n", Fontbiggest);
                // Phrase phraseConstant1 = new Phrase("Order Conformation", Fontbigger);
                //PdfPCell cell = new PdfPCell(phraseConstant);
                //cell.HorizontalAlignment = 0;
                //Paragraph pg1 = new Paragraph();
                //pg1.Add(phraseConstant);
                // pg1.Add(phraseConstant1);
                //PdfPCell cell12 = new PdfPCell(pg1);
                //cell12.HorizontalAlignment = 1;
                //cell12.Border = 0;
                //cell12.PaddingTop = 2.5f;
                //cell12.PaddingLeft = 2.5f;
                //cell12.PaddingBottom = 2.5f;
                //table0.AddCell(cell12);
                //cb.MoveTo(40, document.PageSize.Height - 100);
                //cb.LineTo(document.PageSize.Width - 40, document.PageSize.Height - 100);
                table0.WriteSelectedRows(0, -1, 0, (document.PageSize.Height - 10), writer.DirectContent);
            }
            public override void OnEndPage(PdfWriter writer, Document document)
            {
                Font fontsmall = new Font(FontFactory.GetFont("Arial", 8, Font.NORMAL));

                base.OnEndPage(writer, document);

                PdfPTable tabFot = new PdfPTable(4);
                tabFot.WidthPercentage = 100f;
                tabFot.TotalWidth = 100f;
                //PdfPCell cell;
                tabFot.TotalWidth = 300F;
                //PdfPTable table10 = new PdfPTable(4);
                PdfPCell cell35 = new PdfPCell();

                PdfPCell cell35line = new PdfPCell();
                float[] widths2 = new float[] { 120f, 130f, 162f, 160f };
                tabFot.SetTotalWidth(widths2);
                tabFot.SetWidthPercentage(widths2, PageSize.A4);
                tabFot.SetWidths(widths2);
                cell35line.AddElement(new Paragraph(new Chunk("________________________________________________________________________________________________________________", fontsmall)));
                cell35line.Colspan = 4;
                cell35line.Border = 0;
                cell35line.NoWrap = true;
                tabFot.AddCell(cell35line);
                cell35.AddElement(new Paragraph(new Chunk("Eurotextiles GmbH & Co. KG", fontsmall)));
                //cell35.PaddingTop = 7.5f;
                //cell35.PaddingBottom = 7.5f;
                cell35.Border = 0;
                tabFot.AddCell(cell35);

                PdfPCell cell36 = new PdfPCell();

                cell36.AddElement(new Paragraph(new Chunk("HRA 3451", fontsmall)));
                cell36.PaddingTop = 1.5f;
                cell36.Border = 0;
                tabFot.AddCell(cell36);

                PdfPCell cell37 = new PdfPCell();

                cell37.AddElement(new Paragraph(new Chunk("Kompl.Indra Enterprises GmbH", fontsmall)));
                cell37.PaddingTop = 1.5f;
                cell37.Border = 0;
                tabFot.AddCell(cell37);

                PdfPCell cell38 = new PdfPCell();

                cell38.AddElement(new Paragraph(new Chunk("Bankverbindung", fontsmall)));
                cell38.PaddingTop = 1.5f;
                cell38.Border = 0;
                tabFot.AddCell(cell38);

                PdfPCell cell310 = new PdfPCell();

                cell310.AddElement(new Paragraph(new Chunk("Mammolshainer Weg 14", fontsmall)));
                cell310.PaddingTop = 1.5f;
                cell310.Border = 0;
                tabFot.AddCell(cell310);

                PdfPCell cell40 = new PdfPCell();

                cell40.AddElement(new Paragraph(new Chunk("Amtsgericht Königstein", fontsmall)));
                cell40.PaddingTop = 1.5f;
                cell40.Border = 0;
                tabFot.AddCell(cell40);

                PdfPCell cell59 = new PdfPCell();

                cell59.AddElement(new Paragraph(new Chunk("Geschäftsführer:Krishna Javaji", fontsmall)));
                cell59.PaddingTop = 1.5f;
                cell59.Border = 0;
                tabFot.AddCell(cell59);

                PdfPCell cell60 = new PdfPCell();

                cell60.AddElement(new Paragraph(new Chunk("Nassauische Sparkasse", fontsmall)));
                cell60.PaddingTop = 1.5f;
                cell60.Border = 0;
                tabFot.AddCell(cell60);

                PdfPCell cell61 = new PdfPCell();

                cell61.AddElement(new Paragraph(new Chunk("61462 Königstein im Taunus", fontsmall)));
                cell61.PaddingTop = 1.5f;
                cell61.Border = 0;
                tabFot.AddCell(cell61);


                PdfPCell cell62 = new PdfPCell();

                cell62.AddElement(new Paragraph(new Chunk("Steuerrnummer 003 315 60117", fontsmall)));
                cell62.PaddingTop = 1.5f;
                cell62.Border = 0;
                tabFot.AddCell(cell62);
                PdfPCell cell64 = new PdfPCell();

                cell64.AddElement(new Paragraph(new Chunk("HRB 5137 Amtsgericht Königstein", fontsmall)));
                cell64.PaddingTop = 1.5f;
                cell64.Border = 0;
                tabFot.AddCell(cell64);

                PdfPCell cell65 = new PdfPCell();

                cell65.AddElement(new Paragraph(new Chunk("IBAN :DE15 5105 00150 270 0607 06", fontsmall)));
                cell65.PaddingTop = 1.5f;
                cell65.Border = 0;
                tabFot.AddCell(cell65);

                PdfPCell cell66 = new PdfPCell();

                cell66.AddElement(new Paragraph(new Chunk("Fon +49 6174/25980", fontsmall)));
                cell66.PaddingTop = 1.5f;
                cell66.PaddingBottom = 5.5f;
                cell66.Border = 0;
                tabFot.AddCell(cell66);

                PdfPCell cell67 = new PdfPCell();

                cell67.AddElement(new Paragraph(new Chunk("USt-IdNr.DE279479010", fontsmall)));
                cell67.PaddingTop = 1.5f;
                cell67.PaddingBottom = 5.5f;
                cell67.Border = 0;
                tabFot.AddCell(cell67);

                PdfPCell cell68 = new PdfPCell();

                cell68.AddElement(new Paragraph(new Chunk("Steuernummer 003 236 16128", fontsmall)));
                cell68.PaddingTop = 1.5f;
                cell68.PaddingBottom = 5.5f;
                cell68.Border = 0;
                tabFot.AddCell(cell68);


                PdfPCell cell71 = new PdfPCell();

                cell71.AddElement(new Paragraph(new Chunk("SWIFT:-BIC NASSDE55XXX", fontsmall)));
                cell71.PaddingTop = 1.5f;
                cell71.PaddingBottom = 5.5f;
                cell71.Border = 0;
                tabFot.AddCell(cell71);
                tabFot.WriteSelectedRows(-300, -1, 20, (document.PageSize.Height - 735), writer.DirectContent);
            }
            public override void OnCloseDocument(PdfWriter writer, Document document)
            {
                base.OnCloseDocument(writer, document);

                //headerTemplate.BeginText();
                //headerTemplate.SetFontAndSize(bf, 12);
                //headerTemplate.SetTextMatrix(0, 0);
                //headerTemplate.ShowText((writer.PageNumber - 1).ToString());
                //headerTemplate.EndText();

                //footerTemplate.BeginText();
                //footerTemplate.SetFontAndSize(bf, 12);
                //footerTemplate.SetTextMatrix(0, 0);
                //footerTemplate.ShowText((writer.PageNumber - 1).ToString());
                //footerTemplate.EndText();
            }
            public override void OnOpenDocument(PdfWriter writer, Document document)
            {
                try
                {
                    DateTime PrintTime = DateTime.Now;
                    bf = BaseFont.CreateFont(BaseFont.HELVETICA, BaseFont.CP1252, BaseFont.NOT_EMBEDDED);
                    cb = writer.DirectContent;
                    headerTemplate = cb.CreateTemplate(100, 100);
                    footerTemplate = cb.CreateTemplate(50, 50);
                }
                catch (DocumentException de)
                {
                }
                catch (System.IO.IOException ioe)
                {
                }
            }
        }
        public string ConvertNumbertoWords(int number)
        {
            if (number == 0)
                return "ZERO";
            if (number < 0)
                return "minus " + ConvertNumbertoWords(Math.Abs(number));
            string words = "";
            if ((number / 1000000) > 0)
            {
                words += ConvertNumbertoWords(number / 1000000) + " MILLION ";
                number %= 1000000;
            }
            if ((number / 1000) > 0)
            {
                words += ConvertNumbertoWords(number / 1000) + " THOUSAND ";
                number %= 1000;
            }
            if ((number / 100) > 0)
            {
                words += ConvertNumbertoWords(number / 100) + " HUNDRED ";
                number %= 100;
            }
            if (number > 0)
            {
                if (words != "")
                    words += "AND ";
                var unitsMap = new[] { "ZERO", "ONE", "TWO", "THREE", "FOUR", "FIVE", "SIX", "SEVEN", "EIGHT", "NINE", "TEN", "ELEVEN", "TWELVE", "THIRTEEN", "FOURTEEN", "FIFTEEN", "SIXTEEN", "SEVENTEEN", "EIGHTEEN", "NINETEEN" };
                var tensMap = new[] { "ZERO", "TEN", "TWENTY", "THIRTY", "FORTY", "FIFTY", "SIXTY", "SEVENTY", "EIGHTY", "NINETY" };

                if (number < 20)
                    words += unitsMap[Convert.ToInt32(number)];
                else
                {
                    words += tensMap[Convert.ToInt32(number) / 10];
                    if ((number % 10) > 0)
                        words += " " + unitsMap[Convert.ToInt32(number) % 10];
                }
            }
            return words;
        }
        public ActionResult ET_Sales_Shipment_RestoreDelete(int id, bool type)
        {
            bool val = Session["UserID"] == null ? false : true;
            if (val)
            {
                try
                {
                    Tbl_Shipment_Header m = dbcontext.Tbl_Shipment_Header.Single(x => x.S_ID == id);
                    {
                        m.DELETED = type;
                        m.DELETED_BY = id;
                        m.DELETED_DATE = DateTime.Now;
                    };
                    var result = dbcontext.SaveChanges();
                    var json = "Failed";
                    if (result != 0)
                    {
                        json = "Success";
                    }
                    else
                    {
                        objLOG.log_dockey = "3007";
                        objLOG.log_operation = "Restore";
                        objLOG.log_userid = Session["UserID"].ToString();
                        objLOG.log_recordkey = id.ToString();
                        objLOG.log_Remarks = "Record Restored Successfully";
                        bal.OperationInsertLogs_BL(objLOG);
                    }
                    return Json(json, JsonRequestBehavior.AllowGet);
                }
                catch (Exception exe)
                {
                    string actionName = this.ControllerContext.RouteData.Values["action"].ToString();
                    string controllerName = this.ControllerContext.RouteData.Values["controller"].ToString();
                    objERR.err_title = controllerName + "-" + controllerName;
                    objERR.err_message = "Sorry for the inconvience. Some error has been occured.";
                    objERR.err_details = exe.Message.Replace("'", "");
                    int errid = bal.ExceptionInsertLogs_BL(objERR);
                    return Json("ERR" + errid.ToString(), JsonRequestBehavior.AllowGet);
                }
            }
            else
            {
                return RedirectToAction("ET_SessionExpire", "ET_Login");
            }
        }


        public ActionResult ET_Sales_Shipment_Update_GetbyID(int id)
        {
            bool val = Session["UserID"] == null ? false : true;
            if (val)
            {
                try
                {
                    //TempData["CompaycontctID"] = id;
                    dbcontext.Configuration.ProxyCreationEnabled = false;
                    var data = dbcontext.Tbl_Shipment_Header.Single(m => m.S_ID == id);
                    var json = new JavaScriptSerializer().Serialize(data);
                    return Json(json, JsonRequestBehavior.AllowGet);
                }
                catch (Exception exe)
                {
                    string actionName = this.ControllerContext.RouteData.Values["action"].ToString();
                    string controllerName = this.ControllerContext.RouteData.Values["controller"].ToString();
                    objERR.err_title = controllerName + "-" + controllerName;
                    objERR.err_message = "Sorry for the inconvience. Some error has been occured.";
                    objERR.err_details = exe.Message.Replace("'", "");
                    int errid = bal.ExceptionInsertLogs_BL(objERR);
                    return Json("ERR" + errid.ToString(), JsonRequestBehavior.AllowGet);
                }
            }
            else
            {
                return RedirectToAction("ET_SessionExpire", "ET_Login");
            }
        }
        public ActionResult ET_Sales_ShipmentDetails(string ids)
        {
            bool val = Session["UserID"] == null ? false : true;
            if (val)
            {
                try
                {
                    dbcontext.Configuration.ProxyCreationEnabled = false;
                        var data1 = (from a in dbcontext.Tbl_Schedule
                                     join e in dbcontext.Tbl_Order_Details on a.SH_OrderDetailID equals e.ORDER_ID into orddet from f in orddet
                                     join c in dbcontext.Tbl_Product_Master on a.SH_ProductID equals c.P_ID into comp
                                     from x in comp
                                     join d in dbcontext.Tbl_Shipment_Details on a.SH_ID equals d.SD_ScheduleID into ord
                                     from y in ord.DefaultIfEmpty()
                                     where ids.Contains(a.SH_Code)
                                     select new Shipment_CM
                                     {
                                         SD_ScheduleID = a.SH_ID,
                                         SD_OrderDetailID = a.SH_OrderDetailID,
                                         SD_ProductID = a.SH_ProductID,
                                         SH_Code = a.SH_Code,
                                         S_Type=a.SH_Type,
                                         DesignNo=f.DesignDetail,
                                         SD_ArticleNo = x.P_ArticleNo,
                                         SD_ProductName = x.P_ShortName,
                                         Price=f.PRICE,
                                         SD_ScheduledQuantity = a.SH_SheduledQuantity,
                                         SD_Quantity = y.SD_Quantity
                                     }).ToList();
                        return PartialView("/Views/Sales/ET_Sales_Shipment/ET_Sales_ShipmentDetails.cshtml", data1);
                }
                catch (Exception exe)
                {
                    string actionName = this.ControllerContext.RouteData.Values["action"].ToString();
                    string controllerName = this.ControllerContext.RouteData.Values["controller"].ToString();
                    objERR.err_title = controllerName + "-" + controllerName;
                    objERR.err_message = "Sorry for the inconvience. Some error has been occured.";
                    objERR.err_details = exe.Message.Replace("'", "");
                    int errid = bal.ExceptionInsertLogs_BL(objERR);
                    return Json("ERR" + errid.ToString(), JsonRequestBehavior.AllowGet);
                }
            }
            else
            {
                return RedirectToAction("ET_SessionExpire", "ET_Login");
            }
        }
        public ActionResult GetDebitNoteDetails(int id)
        {
            bool val = Session["UserID"] == null ? false : true;
            if (val)
            {
                try
                {
                    dbcontext.Configuration.ProxyCreationEnabled = false;
                    var data = (from a in dbcontext.Tbl_Shipment_Details
                                where a.SD_PID == id
                                select new
                                {
                                    popupOrderNo = (from b in dbcontext.Tbl_Master_Order
                                                    join c in dbcontext.Tbl_Order_Details on b.SO_ID equals c.AGEN_TRAD_PO_ID
                                                    where c.ORDER_ID == a.SD_OrderDetailID
                                                    select
                                                    b.SO_Code).FirstOrDefault(),
                                    OrderAmt = (from b in dbcontext.Tbl_Master_Order
                                                join c in dbcontext.Tbl_Order_Details on b.SO_ID equals c.AGEN_TRAD_PO_ID
                                                where c.ORDER_ID == a.SD_OrderDetailID
                                                select (c.PRICE * a.SD_Quantity)).FirstOrDefault(),
                                });
                    var data1 = data.GroupBy(m => m.popupOrderNo).Select(a => new { ordNo=a.Select(m=>m.popupOrderNo).FirstOrDefault(), ordAmt = a.Sum(m=>m.OrderAmt) }).ToList();
                    var json = new JavaScriptSerializer().Serialize(data1);
                    return Json(json, JsonRequestBehavior.AllowGet);
                }
                catch (Exception exe)
                {
                    string actionName = this.ControllerContext.RouteData.Values["action"].ToString();
                    string controllerName = this.ControllerContext.RouteData.Values["controller"].ToString();
                    objERR.err_title = controllerName + "-" + controllerName;
                    objERR.err_message = "Sorry for the inconvience. Some error has been occured.";
                    objERR.err_details = exe.Message.Replace("'", "");
                    int errid = bal.ExceptionInsertLogs_BL(objERR);
                    return Json("ERR" + errid.ToString(), JsonRequestBehavior.AllowGet);
                }
            }
            else
            {
                return RedirectToAction("ET_SessionExpire", "ET_Login");
            }
        }
        public ActionResult ET_Sales_Shipment_GenerateDebitNote(int id,string fabamount,decimal invamt,int fabstatus)
        {
            bool val = Session["UserID"] == null ? false : true;
            if (val)
            {
                try
                {
                    dbcontext.Configuration.ProxyCreationEnabled = false;
                    string code = "";
                    string[] FOBORD = new string[2];
                    if (fabstatus == 1)
                    {
                        FOBORD = fabamount.Split('|');
                    }
                    else
                    {
                        FOBORD[0] = "";
                        FOBORD[1] = "";
                    }
                    var DebitDetails = dbcontext.Tbl_GenerateDebitNote.Where(a => a.DN_ShipmentID == id).ToList();
                    if (DebitDetails.Count() == 0)
                    {
                        Tbl_GenerateDebitNote Objmc = new Tbl_GenerateDebitNote()
                        {
                            DN_ShipmentID = id,
                            DN_ShipmentAmount = invamt,
                            DN_FOBAmount = FOBORD[0],
                            DN_OrderCodes = FOBORD[1],
                            DN__FOBStatus = fabstatus,
                            DN_Status = 0,
                            CREATED_BY = Convert.ToInt32(Session["UserID"].ToString()),
                            CREATED_DATE = DateTime.Now,
                            DELETED = false,
                            COM_KEY = Convert.ToInt32(Session["CompanyKey"].ToString()),
                        };
                        dbcontext.Tbl_GenerateDebitNote.Add(Objmc);
                        dbcontext.SaveChanges();
                        int len = 10 - ("DBT" + Objmc.DN_ID).Length;
                        code = "DBT" + new String('0', len) + Objmc.DN_ID;
                        Tbl_GenerateDebitNote _Tbl_GenerateDebitNote = dbcontext.Tbl_GenerateDebitNote.Single(m => m.DN_ID == Objmc.DN_ID);
                        {
                            _Tbl_GenerateDebitNote.DN_Code = code;
                        };
                        dbcontext.SaveChanges();
                    }
                    else
                    {
                        code = DebitDetails[0].DN_Code;
                        decimal did = DebitDetails[0].DN_ID;
                        Tbl_GenerateDebitNote _Tbl_GenerateDebitNote = dbcontext.Tbl_GenerateDebitNote.Single(m => m.DN_ID == did);
                        {
                            _Tbl_GenerateDebitNote.DN_FOBAmount = FOBORD[0];
                            _Tbl_GenerateDebitNote.DN_OrderCodes = FOBORD[1];
                            _Tbl_GenerateDebitNote.DN_Status = 0;
                            _Tbl_GenerateDebitNote.DN__FOBStatus = fabstatus;
                            _Tbl_GenerateDebitNote.LAST_UPDATED_BY = Convert.ToInt32(Session["UserID"].ToString());
                            _Tbl_GenerateDebitNote.LAST_UPDATED_DATE = DateTime.Now;
                        };
                        dbcontext.SaveChanges();
                    }
                    dbcontext.Tbl_Shipment_Header.Single(m => m.S_ID == id).S_STATUS = 1;
                    dbcontext.Tbl_Shipment_Header.Single(m => m.S_ID == id).S_DebitNoteStatus = true;
                    dbcontext.Tbl_Shipment_Header.Single(m => m.S_ID == id).S_DebitNoteApprovalStatus = 1;
                    dbcontext.SaveChanges();
                    return Json(code, JsonRequestBehavior.AllowGet);
                }
                catch (Exception exe)
                {
                    string actionName = this.ControllerContext.RouteData.Values["action"].ToString();
                    string controllerName = this.ControllerContext.RouteData.Values["controller"].ToString();
                    objERR.err_title = controllerName + "-" + controllerName;
                    objERR.err_message = "Sorry for the inconvience. Some error has been occured.";
                    objERR.err_details = exe.Message.Replace("'", "");
                    int errid = bal.ExceptionInsertLogs_BL(objERR);
                    return Json("ERR" + errid.ToString(), JsonRequestBehavior.AllowGet);
                }
            }
            else
            {
                return RedirectToAction("ET_SessionExpire", "ET_Login");
            }
        }
        public ActionResult GetCommissionDetails(int id)
        {
            bool val = Session["UserID"] == null ? false : true;
            if (val)
            {
                try
                {
                    dbcontext.Configuration.ProxyCreationEnabled = false;
                    var popupInvoiceAmt = (from b in dbcontext.Tbl_GenerateDebitNote where b.DN_ShipmentID == id select b.DN_ShipmentAmount);
                    var popupFabStatus = (from b in dbcontext.Tbl_GenerateDebitNote where b.DN_ShipmentID == id select b.DN__FOBStatus).FirstOrDefault();
                    if (popupFabStatus == 0)
                    {
                        var data = (from a in dbcontext.Tbl_Shipment_Details
                                    where a.SD_PID == id
                                    select new
                                    {
                                        scheduleCode = (from b in dbcontext.Tbl_Schedule where b.SH_ID == a.SD_ScheduleID select b.SH_Code).FirstOrDefault(),
                                        popupOrderNo = (from b in dbcontext.Tbl_Master_Order
                                                        join c in dbcontext.Tbl_Order_Details on b.SO_ID equals c.AGEN_TRAD_PO_ID
                                                        where c.ORDER_ID == a.SD_OrderDetailID
                                                        select
                                                        b.SO_Code).FirstOrDefault(),
                                        popupCommissionPer = (from b in dbcontext.Tbl_Master_Order
                                                              join c in dbcontext.Tbl_Order_Details on b.SO_ID equals c.AGEN_TRAD_PO_ID
                                                              where c.ORDER_ID == a.SD_OrderDetailID
                                                              select
                                                              b.SO_Commision).FirstOrDefault(),
                                        OrderAmt = (from b in dbcontext.Tbl_Master_Order
                                                    join c in dbcontext.Tbl_Order_Details on b.SO_ID equals c.AGEN_TRAD_PO_ID
                                                    where c.ORDER_ID == a.SD_OrderDetailID
                                                    select (c.PRICE * a.SD_Quantity)).FirstOrDefault(),
                                    }).GroupBy(m => m.popupOrderNo).Select(a => new { ordNo = a.Select(m => m.popupOrderNo).FirstOrDefault(), ordAmt = a.Sum(m => m.OrderAmt), commission = a.Select(m => m.popupCommissionPer).FirstOrDefault() }).ToList();
                        var popupCommissionAmt = (from a in data select (a.commission * a.ordAmt / 100)).Sum();
                        var result = new { popupInvoiceAmt, data, popupCommissionAmt,isfab = 0 };
                        var json = new JavaScriptSerializer().Serialize(result);
                        return Json(json, JsonRequestBehavior.AllowGet);
                    }
                    else
                    {
                        string popupFabAmt = (from b in dbcontext.Tbl_GenerateDebitNote where b.DN_ShipmentID == id select b.DN_FOBAmount).FirstOrDefault();
                        if (popupFabAmt.Substring(popupFabAmt.Length - 1) == ",")
                        {
                            popupFabAmt = popupFabAmt.Substring(0, popupFabAmt.Length - 1);
                        }
                        var FabAmounts = new HashSet<decimal>(popupFabAmt.Split(',').Select(m => Convert.ToDecimal(m)).ToList()).ToList();
                        
                        var data = (from a in dbcontext.Tbl_Shipment_Details
                                    where a.SD_PID == id
                                    select new
                                    {
                                        scheduleCode = (from b in dbcontext.Tbl_Schedule where b.SH_ID == a.SD_ScheduleID select b.SH_Code).FirstOrDefault(),
                                        popupOrderNo = (from b in dbcontext.Tbl_Master_Order
                                                        join c in dbcontext.Tbl_Order_Details on b.SO_ID equals c.AGEN_TRAD_PO_ID
                                                        where c.ORDER_ID == a.SD_OrderDetailID
                                                        select
                                                        b.SO_Code).FirstOrDefault(),
                                        popupCommissionPer = (from b in dbcontext.Tbl_Master_Order
                                                              join c in dbcontext.Tbl_Order_Details on b.SO_ID equals c.AGEN_TRAD_PO_ID
                                                              where c.ORDER_ID == a.SD_OrderDetailID
                                                              select
                                                              b.SO_Commision).FirstOrDefault(),
                                    }).GroupBy(m => m.popupOrderNo).Select(a=> new { ordNo = a.Select(m => m.popupOrderNo).FirstOrDefault(), commission = a.Select(m => m.popupCommissionPer).FirstOrDefault() }).ToList();
                        decimal popupCommissionAmt = 0;
                        for (int i = 0; i < data.Count(); i++)
                        {
                            popupCommissionAmt = popupCommissionAmt +( data[i].commission * FabAmounts[i]/100)??0;
                        }
                        var result = new { popupInvoiceAmt, data, popupCommissionAmt, isfab = 1, FabAmounts };
                        var json = new JavaScriptSerializer().Serialize(result);
                        return Json(json, JsonRequestBehavior.AllowGet);

                    }
                }
                catch (Exception exe)
                {
                    string actionName = this.ControllerContext.RouteData.Values["action"].ToString();
                    string controllerName = this.ControllerContext.RouteData.Values["controller"].ToString();
                    objERR.err_title = controllerName + "-" + controllerName;
                    objERR.err_message = "Sorry for the inconvience. Some error has been occured.";
                    objERR.err_details = exe.Message.Replace("'", "");
                    int errid = bal.ExceptionInsertLogs_BL(objERR);
                    return Json("ERR" + errid.ToString(), JsonRequestBehavior.AllowGet);
                }
            }
            else
            {
                return RedirectToAction("ET_SessionExpire", "ET_Login");
            }
        }
        public ActionResult ET_Sales_Shipment_CommissionRecieve(int id, decimal fabamount, decimal invamt,decimal CommissionAmount,decimal CommissionRecieved,string CommissionDate)
        {
            bool val = Session["UserID"] == null ? false : true;
            if (val)
            {
                try
                {
                    dbcontext.Configuration.ProxyCreationEnabled = false;
                    DateTime date = DateTime.ParseExact(CommissionDate, "dd-MM-yyyy", null);
                    Tbl_CommissionRecieve Objmc = new Tbl_CommissionRecieve()
                    {
                        CR_ShipmentID = id,
                        CR_ShipmentAmount = invamt,
                        CR_FABAmount = fabamount,
                        CR_CommissionAmount = CommissionAmount,
                        CR_CommissionRecieved = CommissionRecieved,
                        CR_Date = date,
                        CREATED_BY = Convert.ToInt32(Session["UserID"].ToString()),
                        CREATED_DATE = DateTime.Now,
                        DELETED = false,
                        COM_KEY = Convert.ToInt32(Session["CompanyKey"].ToString()),
                    };
                    dbcontext.Tbl_CommissionRecieve.Add(Objmc);
                    dbcontext.SaveChanges();
                    int len = 10 - ("CMM" + Objmc.CR_ID).Length;
                    string code = "CMM" + new String('0', len) + Objmc.CR_ID;
                    Tbl_CommissionRecieve _Tbl_CommissionRecieve = dbcontext.Tbl_CommissionRecieve.Single(m => m.CR_ID == Objmc.CR_ID);
                    {
                        _Tbl_CommissionRecieve.CR_Code = code;
                    };
                    dbcontext.SaveChanges();
                    dbcontext.Tbl_Shipment_Header.Single(m => m.S_ID == id).S_CommissionRecievedStatus = true;
                    dbcontext.SaveChanges();
                    return Json(code, JsonRequestBehavior.AllowGet);
                }
                catch (Exception exe)
                {
                    string actionName = this.ControllerContext.RouteData.Values["action"].ToString();
                    string controllerName = this.ControllerContext.RouteData.Values["controller"].ToString();
                    objERR.err_title = controllerName + "-" + controllerName;
                    objERR.err_message = "Sorry for the inconvience. Some error has been occured.";
                    objERR.err_details = exe.Message.Replace("'", "");
                    int errid = bal.ExceptionInsertLogs_BL(objERR);
                    return Json("ERR" + errid.ToString(), JsonRequestBehavior.AllowGet);
                }
            }
            else
            {
                return RedirectToAction("ET_SessionExpire", "ET_Login");
            }
        }
    }
}