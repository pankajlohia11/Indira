using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.Mvc;
using BusinessEntity.EntityModels;
using BusinessLogic.Admin_BL;
using BusinessLogic;
using System.Web.Script.Serialization;
using System.Data.Entity;
/* Author       = Rajkumar
Created Date = 5th Apr 2018
[Action Method=ET_Admin_DocumentSetup ]
*/
namespace Euro.Controllers.Admin
{
    public class ET_Admin_SalesOrganizationController : Controller
    {
        public static string prefix = "";
        public static bool automanual = false;
        ET_Admin_SalesOrganization_BL objBL = new ET_Admin_SalesOrganization_BL();
        BAL bal = new BAL();
        
        error_master objERR = new error_master();
        tbl_loginfo objLOG = new tbl_loginfo();
        // GET: ET_Admin_SalesOrganization
        public ActionResult ET_Admin_SalesOrganization()
        {
            bool val = Session["UserID"] == null ? false : true;
            if (val)
            {
                try
                {

                    SetPrivilages();
                    AutoManual();
                    var data = objBL.ET_Admin_SalesOrganizationList_BL();
                    Binddropdown_User();
                    return View(data);
                }
                catch (Exception exe)
                {
                    string actionName = this.ControllerContext.RouteData.Values["action"].ToString();
                    string controllerName = this.ControllerContext.RouteData.Values["controller"].ToString();
                    objERR.err_title = controllerName + "-" + controllerName;
                    objERR.err_message = "Sorry for the inconvience. Some error has been occured.";
                    objERR.err_details = exe.Message.Replace("'", "");
                    int errid = bal.ExceptionInsertLogs_BL(objERR);
                    ViewBag.Error = errid;
                    return View();
                }
            }
            else
            {
                return RedirectToAction("ET_SessionExpire", "ET_Login");
            }
        }

        public ActionResult Binddropdown_User()
        {
            var Users = objBL.Binddropdown_User_BL();
            ViewBag.Users = Users;
            return View();
        }

        [HttpGet]
        public ActionResult Binddropdown_Employees(int id)
        {
            var Employeeslist = objBL.Binddropdown_Employees_BL(id);
            return Json(Employeeslist, JsonRequestBehavior.AllowGet);
        }

        public ActionResult Binddropdown_ORGParent(int id)
        {
            var ORGlist = objBL.Binddropdown_ORGParent_BL(id);
            return Json(ORGlist, JsonRequestBehavior.AllowGet);
        }

        public void SetPrivilages()
        {
            ViewBag.Create = "CreateNo";
            ViewBag.Edit = "EditNo";
            ViewBag.Delete = "DeleteNo";
            ViewBag.Restore = "RestoreNo";
            ViewBag.View = "ViewNo";
            List<Tbl_AccessPermissions> ObjPermissions = bal.GetPrivilages_BL(Convert.ToInt32(Session["UserID"].ToString()), 2);
            foreach (var item in ObjPermissions)
            {
                if (item.IS_ADD)
                {
                    ViewBag.Create = "CreateYes";
                }
                if (item.IS_EDIT)
                {
                    ViewBag.Edit = "EditYes";
                }
                if (item.IS_DELETE)
                {
                    ViewBag.Delete = "DeleteYes";
                }
                if (item.IS_FULLCONTROL)
                {
                    ViewBag.Restore = "RestoreYes";
                }
                if (item.IS_VIEW)
                {
                    ViewBag.View = "ViewYes";
                }
            }

        }

        private void AutoManual()
        {
            ViewBag.AutoManual = false;
            automanual = false;
            List<Tbl_Document_Master> ObjDoc = bal.AutoManual_BL(5);
            if (ObjDoc.Count > 0)
            {
                foreach (var item in ObjDoc)
                {
                    if (item.autogen_type == "Automatic")
                    {
                        ViewBag.AutoManual = true;
                        prefix = item.autogen_prefix;
                        automanual = true;
                    }
                    else
                    {
                        ViewBag.Required = "required";
                    }
                }

            }
        }

        [HttpGet]
        public ActionResult ET_Admin_SalesOrganization_Add(int OrganizationID, string txtOrganizationCode, string txtOrganizationName, int drpOrganizationHead, int drpOrganizationType,int drpOrganizationParent, string drpEmployees)
        {
            bool val = Session["UserID"] == null ? false : true;
            if (val)
            {
                try
                {
                    Tbl_Sales_Organization tbl_Sales_org = new Tbl_Sales_Organization()
                    {
                        ORG_ID = OrganizationID,
                        ORG_CODE = txtOrganizationCode,
                        ORG_NAME = txtOrganizationName,
                        ORG_HEAD_ID = drpOrganizationHead,
                        ORG_PARENT_ID = drpOrganizationParent,
                        ORG_TYPE=drpOrganizationType,
                        ORG_EMPLOYEE_IDS = drpEmployees,
                        CREATED_BY = Convert.ToInt32(Session["UserID"].ToString()),
                        CREATED_DATE=DateTime.Now,
                        DELETED = false

                    };

                    decimal d = objBL.Tbl_Sales_Organization_Add(tbl_Sales_org, automanual, prefix);
                    var json = "Success";
                    if (d == 0)
                    {
                        json = "Failed";
                    }
                    else
                    {
                        objLOG.log_dockey = "5";
                        objLOG.log_operation = "Insert";
                        objLOG.log_userid = Session["UserID"].ToString();
                        objLOG.log_recordkey = d.ToString();
                        objLOG.log_Remarks = "Record Inserted Successfully";
                        bal.OperationInsertLogs_BL(objLOG);
                    }
                    return Json(json, JsonRequestBehavior.AllowGet);
                    // return RedirectToAction("ET_Admin_Roles");
                }
                catch (Exception exe)
                {
                    string actionName = this.ControllerContext.RouteData.Values["action"].ToString();
                    string controllerName = this.ControllerContext.RouteData.Values["controller"].ToString();
                    objERR.err_title = controllerName + "-" + controllerName;
                    objERR.err_message = "Sorry for the inconvience. Some error has been occured.";
                    objERR.err_details = exe.Message.Replace("'", "");
                    int errid = bal.ExceptionInsertLogs_BL(objERR);
                    return Json("ERR" + errid.ToString(), JsonRequestBehavior.AllowGet);
                }
            }
            else
            {
                return RedirectToAction("ET_SessionExpire", "ET_Login");
            }
        }

        public ActionResult ET_Admin_SalesOrganization_Update_Get(int id)
        {
            bool val = Session["UserID"] == null ? false : true;
            if (val)
            {
                try
                {
                    var data = objBL.ET_Admin_SalesOrganization_Update_Get(id);
                    var json = new JavaScriptSerializer().Serialize(data);
                    return Json(json, JsonRequestBehavior.AllowGet);
                }
                catch (Exception exe)
                {
                    string actionName = this.ControllerContext.RouteData.Values["action"].ToString();
                    string controllerName = this.ControllerContext.RouteData.Values["controller"].ToString();
                    objERR.err_title = controllerName + "-" + controllerName;
                    objERR.err_message = "Sorry for the inconvience. Some error has been occured.";
                    objERR.err_details = exe.Message.Replace("'", "");
                    int errid = bal.ExceptionInsertLogs_BL(objERR);
                    return Json("ERR" + errid.ToString(), JsonRequestBehavior.AllowGet);
                }
            }
            else
            {
                return RedirectToAction("ET_SessionExpire", "ET_Login");
            }
        }

        public ActionResult ET_Admin_SalesOrganization_View(int id)
        {
            bool val = Session["UserID"] == null ? false : true;
            if (val)
            {
                try
                {
                    var data = objBL.ET_Admin_SalesOrganization_View(id);
                    return PartialView("/Views/Admin/ET_Admin_SalesOrganization/_ET_Admin_SalesOrganization_view.cshtml", data);
                }
                catch (Exception exe)
                {
                    string actionName = this.ControllerContext.RouteData.Values["action"].ToString();
                    string controllerName = this.ControllerContext.RouteData.Values["controller"].ToString();
                    objERR.err_title = controllerName + "-" + controllerName;
                    objERR.err_message = "Sorry for the inconvience. Some error has been occured.";
                    objERR.err_details = exe.Message.Replace("'", "");
                    int errid = bal.ExceptionInsertLogs_BL(objERR);
                    return Json("ERR" + errid.ToString(), JsonRequestBehavior.AllowGet);
                }
            }
            else
            {
                return RedirectToAction("ET_SessionExpire", "ET_Login");
            }
        }
    }
}