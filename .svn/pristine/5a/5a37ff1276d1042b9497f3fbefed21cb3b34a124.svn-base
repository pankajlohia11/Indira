using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.Mvc;
using BusinessEntity.EntityModels;
using BusinessEntity.CustomModels;
using BusinessLogic.Admin_BL;
using BusinessLogic;
using System.Web.Script.Serialization;

namespace Euro.Controllers.Admin
{
    public class ET_Admin_LC_DetailsController : Controller
    {
        // GET: ET_Admin_LC_Details

        public static string prefix = "";
        public static bool automanual = false;
        BAL bal = new BAL();
        error_master objERR = new error_master();
        tbl_loginfo objLOG = new tbl_loginfo();
        ET_Admin_LC_Details_BL ObjBL = new ET_Admin_LC_Details_BL();

        public JsonResult GetPrivilages()
        {

            bool val = Session["UserID"] == null ? false : true;
            if (val)
            {
                try
                {
                    using (EntityClasses dbcontext = new EntityClasses())
                    {
                        var privilagelist = bal.GetPrivilages_BL(Convert.ToInt32(Session["UserID"].ToString()), 3014);
                        var json = new JavaScriptSerializer().Serialize(privilagelist);
                        return Json(json, JsonRequestBehavior.AllowGet);
                    }
                }
                catch (Exception exe)
                {
                    string actionName = this.ControllerContext.RouteData.Values["action"].ToString();
                    string controllerName = this.ControllerContext.RouteData.Values["controller"].ToString();
                    objERR.err_title = controllerName + "-" + controllerName;
                    objERR.err_message = "Sorry for the inconvience. Some error has been occured.";
                    objERR.err_details = exe.Message.Replace("'", "");
                    int errid = bal.ExceptionInsertLogs_BL(objERR);
                    return Json("ERR" + errid.ToString(), JsonRequestBehavior.AllowGet);
                }
            }
            else
            {
                return Json("Expired", JsonRequestBehavior.AllowGet);
            }
        }
        private void AutoManual()
        {
            ViewBag.AutoManual = false;
            automanual = false;
            List<Tbl_Document_Master> ObjDoc = bal.AutoManual_BL(3014);
            if (ObjDoc.Count > 0)
            {
                foreach (var item in ObjDoc)
                {
                    if (item.autogen_type == "Automatic")
                    {
                        ViewBag.AutoManual = true;
                        prefix = item.autogen_prefix;
                        automanual = true;
                    }
                    else
                    {
                        ViewBag.Required = "required";
                    }
                }

            }
        }

        public ActionResult Bind_dropdown_Customer()
        {
            try
            {
                var Customer = ObjBL.Bind_dropdown_Customer_BL();
                var json = new JavaScriptSerializer().Serialize(Customer);
                return Json(json, JsonRequestBehavior.AllowGet);

            }
            catch (Exception exe)
            {
                throw exe;
            }
        }
        public ActionResult Bind_dropdown_Supplier()
        {
            try
            {
                var Supplier = ObjBL.Bind_dropdown_Supplier_BL();
                var json = new JavaScriptSerializer().Serialize(Supplier);
                return Json(json, JsonRequestBehavior.AllowGet);
            }
            catch (Exception exe)
            {
                throw exe;
            }
        }
        public ActionResult Bind_dropdown_Bankname()
        {
            try
            {
                var Bank = ObjBL.Bind_dropdown_Bankname_BL();
                var json = new JavaScriptSerializer().Serialize(Bank);
                return Json(json, JsonRequestBehavior.AllowGet);
            }
            catch (Exception exe)
            {
                throw exe;
            }
        }

        public void Bind_Currency()
        {
            try
            {
                var Currency = ObjBL.Bind_Currency_BL();
                ViewBag.currency = Currency;
            }
            catch (Exception exe)
            {
                throw exe;
            }
        }
        public ActionResult ET_Admin_LC_Details()
        {
            bool val = Session["UserID"] == null ? false : true;
            if (val)
            {
                try
                {
                    GetPrivilages();
                    AutoManual();
                    Bind_Currency();
                    var data = ObjBL.ET_Admin_LC_Detailslist_BL();
                    return View(data);
                }
                catch (Exception exe)
                {
                    string actionName = this.ControllerContext.RouteData.Values["action"].ToString();
                    string controllerName = this.ControllerContext.RouteData.Values["controller"].ToString();
                    objERR.err_title = controllerName + "-" + controllerName;
                    objERR.err_message = "Sorry for the inconvience. Some error has been occured.";
                    objERR.err_details = exe.Message.Replace("'", "");
                    int errid = bal.ExceptionInsertLogs_BL(objERR);
                    return Json("ERR" + errid.ToString(), JsonRequestBehavior.AllowGet);
                }
            }
            else
            {
                return Json("Expired", JsonRequestBehavior.AllowGet);
            }
        }
        public ActionResult ET_Admin_LC_Details_Add(string StoreName, string LCNo, DateTime LCcalendar,DateTime Expirydate, decimal CustomerID, decimal LCID, string LCCode, string BankName,decimal BankID, decimal BalAmount, decimal Currency,decimal amount)
        {
            bool val = Session["UserID"] == null ? false : true;
            if (val)
            {
                try
                {
                    // string valid = validations(StoreName, DisplayName, ZipCode, StoreKeeper, StoreID, Storecode);
                    //if (valid == "")
                    //{
                    ET_TBL_LC_DETAILS_CM obj = new ET_TBL_LC_DETAILS_CM()
                    {
                        LC_CODE= LCCode,
                        LC_ID = LCID,
                        CUST_ID = CustomerID,
                        CUST_SUPP = StoreName,
                        CURRENCY_ID = Currency,
                        LC_NO = LCNo,
                        LC_DATE = LCcalendar,
                        LC_EXPIRYDATE = Expirydate,
                        LC_AMOUNT = amount,
                        LC_BAL_AMT = BalAmount,
                       // LC_CLOSE_AMT = ContactNo,
                        LC_BANK_NAME = BankName,                        
                        LC_BANK_ID = BankID,
                        CREATED_BY = Convert.ToInt32(Session["UserID"]),
                        LAST_UPDATED_BY = Convert.ToInt32(Session["UserID"])
                    };
                    var data = ObjBL.ET_Admin_LC_Details_Add_BL(obj, prefix, automanual);
                    var json = "Success";
                    if (data == 0)
                    {
                        json = "Failed";
                    }
                    else
                    {
                        objLOG.log_dockey = "3014";
                        objLOG.log_userid = Session["UserID"].ToString();
                        objLOG.log_recordkey = data.ToString();
                        if (LCID == 0)
                        {
                            objLOG.log_operation = "Insert";
                            objLOG.log_Remarks = "Record Inserted Successfully";
                        }
                        else
                        {
                            objLOG.log_operation = "Update";
                            objLOG.log_Remarks = "Record Updated Successfully";
                        }
                        bal.OperationInsertLogs_BL(objLOG);
                    }
                    return Json(json, JsonRequestBehavior.AllowGet);
                }
                //else
                //{
                //    var json = "Validation:" + valid;
                //    return Json(json, JsonRequestBehavior.AllowGet);
                //}
                //  }
                catch (Exception exe)
                {
                    string actionName = this.ControllerContext.RouteData.Values["action"].ToString();
                    string controllerName = this.ControllerContext.RouteData.Values["controller"].ToString();
                    objERR.err_title = controllerName + "-" + controllerName;
                    objERR.err_message = "Sorry for the inconvience. Some error has been occured.";
                    objERR.err_details = exe.Message.Replace("'", "");
                    int errid = bal.ExceptionInsertLogs_BL(objERR);
                    return Json("ERR" + errid.ToString(), JsonRequestBehavior.AllowGet);
                }
            }
            else
            {
                return RedirectToAction("ET_SessionExpire", "ET_Login");
            }
        }

        public ActionResult ET_Admin_LC_Details_Update_GetbyID(int id)
        {
            bool val = Session["UserID"] == null ? false : true;
            if (val)
            {
                try
                {
                    var data = ObjBL.ET_Admin_LC_Details_Update_GetbyID_BL(id);
                    var json = new JavaScriptSerializer().Serialize(data);
                    return Json(json, JsonRequestBehavior.AllowGet);
                }
                catch (Exception exe)
                {
                    string actionName = this.ControllerContext.RouteData.Values["action"].ToString();
                    string controllerName = this.ControllerContext.RouteData.Values["controller"].ToString();
                    objERR.err_title = controllerName + "-" + controllerName;
                    objERR.err_message = "Sorry for the inconvience. Some error has been occured.";
                    objERR.err_details = exe.Message.Replace("'", "");
                    int errid = bal.ExceptionInsertLogs_BL(objERR);
                    return Json("ERR" + errid.ToString(), JsonRequestBehavior.AllowGet);
                }
            }
            else
            {
                return RedirectToAction("ET_SessionExpire", "ET_Login");
            }
        }

        public ActionResult ET_Admin_LC_Details_Delete(int id)
        {
            bool val = Session["UserID"] == null ? false : true;
            if (val)
            {
                try
                {
                    var deleteby = Convert.ToInt64(Session["UserID"]);
                    int i = ObjBL.ET_Admin_LC_Details_Delete_BL(id, deleteby);
                    var json = "Success";
                    if (i == 0)
                        json = "False";
                    else
                    {
                        objLOG.log_dockey = "3014";
                        objLOG.log_operation = "Delete";
                        objLOG.log_userid = Session["UserID"].ToString();
                        objLOG.log_recordkey = id.ToString();
                        objLOG.log_Remarks = "Record Deleted Successfully";
                        bal.OperationInsertLogs_BL(objLOG);
                    }
                    return Json(json, JsonRequestBehavior.AllowGet);
                }
                catch (Exception exe)
                {
                    string actionName = this.ControllerContext.RouteData.Values["action"].ToString();
                    string controllerName = this.ControllerContext.RouteData.Values["controller"].ToString();
                    objERR.err_title = controllerName + "-" + controllerName;
                    objERR.err_message = "Sorry for the inconvience. Some error has been occured.";
                    objERR.err_details = exe.Message.Replace("'", "");
                    int errid = bal.ExceptionInsertLogs_BL(objERR);
                    return Json("ERR" + errid.ToString(), JsonRequestBehavior.AllowGet);
                }
            }
            else
            {
                return RedirectToAction("ET_SessionExpire", "ET_Login");
            }
        }

        public ActionResult ET_Admin_LC_Details_Restore()
        {
            bool val = Session["UserID"] == null ? false : true;
            if (val)
            {
                try
                {
                    var data = ObjBL.ET_Admin_LC_Details_Restore_BL();
                    return PartialView("/Views/Admin/ET_Admin_Store/_ET_Admin_Store_Restore.cshtml", data);
                }
                catch (Exception exe)
                {
                    string actionName = this.ControllerContext.RouteData.Values["action"].ToString();
                    string controllerName = this.ControllerContext.RouteData.Values["controller"].ToString();
                    objERR.err_title = controllerName + "-" + controllerName;
                    objERR.err_message = "Sorry for the inconvience. Some error has been occured.";
                    objERR.err_details = exe.Message.Replace("'", "");
                    int errid = bal.ExceptionInsertLogs_BL(objERR);
                    return Json("ERR" + errid.ToString(), JsonRequestBehavior.AllowGet);
                }

            }
            else
            {
                return RedirectToAction("ET_SessionExpire", "ET_Login");
            }
        }

        public ActionResult ET_Admin_LC_Details_Restore_Insert(int id)
        {
            try
            {
                var Updatedby = Convert.ToInt64(Session["UserID"]);
                var result = ObjBL.ET_Admin_LC_Details_Restore_Insert_BL(id, Updatedby);
                var json = "Failed";
                if (result != 0)
                {
                    json = "Success";
                }
                else
                {
                    objLOG.log_dockey = "3014";
                    objLOG.log_operation = "Restore";
                    objLOG.log_userid = Session["UserID"].ToString();
                    objLOG.log_recordkey = id.ToString();
                    objLOG.log_Remarks = "Record Restored Successfully";
                    bal.OperationInsertLogs_BL(objLOG);
                }
                return Json(json, JsonRequestBehavior.AllowGet);
            }
            catch (Exception exe)
            {
                string actionName = this.ControllerContext.RouteData.Values["action"].ToString();
                string controllerName = this.ControllerContext.RouteData.Values["controller"].ToString();
                objERR.err_title = controllerName + "-" + controllerName;
                objERR.err_message = "Sorry for the inconvience. Some error has been occured.";
                objERR.err_details = exe.Message.Replace("'", "");
                int errid = bal.ExceptionInsertLogs_BL(objERR);
                return Json("ERR" + errid.ToString(), JsonRequestBehavior.AllowGet);
            }
        }
        public ActionResult ET_Admin_LC_Details_View(int id)
        {
            bool val = Session["UserID"] == null ? false : true;
            if (val)
            {
                try
                {
                    var data = ObjBL.ET_Admin_LC_Details_View_BL(id);
                    return PartialView("/Views/Admin/ET_Admin_Store/_ET_Admin_Store_View.cshtml", data);
                }
                catch (Exception exe)
                {
                    string actionName = this.ControllerContext.RouteData.Values["action"].ToString();
                    string controllerName = this.ControllerContext.RouteData.Values["controller"].ToString();
                    objERR.err_title = controllerName + "-" + controllerName;
                    objERR.err_message = "Sorry for the inconvience. Some error has been occured.";
                    objERR.err_details = exe.Message.Replace("'", "");
                    int errid = bal.ExceptionInsertLogs_BL(objERR);
                    return Json("ERR" + errid.ToString(), JsonRequestBehavior.AllowGet);
                }
            }
            else
            {
                return RedirectToAction("ET_SessionExpire", "ET_Login");
            }
        }

        public DateTime Add_Days(string EndDate,int day)
        {
            try
            {
                DateTime Newdate;
                DateTime EndDateone = Convert.ToDateTime(EndDate);
                Newdate = EndDateone.AddDays(day);
                return Newdate;
            }
            catch (Exception exe)
            {
                throw exe;
            }
        }
    }
}