using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.Mvc;
using BusinessEntity.CustomModels;
using BusinessEntity.EntityModels;
using BusinessLogic.Admin_BL;
using BusinessLogic;
using System.Web.Script.Serialization;

namespace Euro.Controllers.Admin
{
    public class ET_Admin_ProductController : Controller
    {
        // GET: ET_Admin_Product

        public static string prefix = "";
        public static bool automanual = false;
        BAL bal = new BAL();
        error_master objERR = new error_master();
        tbl_loginfo objLOG = new tbl_loginfo();
        ET_Admin_Product_BL ObjBL = new ET_Admin_Product_BL();

        public JsonResult GetPrivilages()
        {

            bool val = Session["UserID"] == null ? false : true;
            if (val)
            {
                try
                {
                    using (EntityClasses dbcontext = new EntityClasses())
                    {
                        var privilagelist = bal.GetPrivilages_BL(Convert.ToInt32(Session["UserID"].ToString()), 3007);
                        var json = new JavaScriptSerializer().Serialize(privilagelist);
                        return Json(json, JsonRequestBehavior.AllowGet);
                    }
                }
                catch (Exception exe)
                {
                    string actionName = this.ControllerContext.RouteData.Values["action"].ToString();
                    string controllerName = this.ControllerContext.RouteData.Values["controller"].ToString();
                    objERR.err_title = controllerName + "-" + controllerName;
                    objERR.err_message = "Sorry for the inconvience. Some error has been occured.";
                    objERR.err_details = exe.Message.Replace("'", "");
                    int errid = bal.ExceptionInsertLogs_BL(objERR);
                    return Json("ERR" + errid.ToString(), JsonRequestBehavior.AllowGet);
                }
            }
            else
            {
                return Json("Expired", JsonRequestBehavior.AllowGet);
            }
        }

        private void AutoManual()
        {
            ViewBag.AutoManual = false;
            automanual = false;
            List<Tbl_Document_Master> ObjDoc = bal.AutoManual_BL(3007);
            if (ObjDoc.Count > 0)
            {
                foreach (var item in ObjDoc)
                {
                    if (item.autogen_type == "Automatic")
                    {
                        ViewBag.AutoManual = true;
                        prefix = item.autogen_prefix;
                        automanual = true;
                    }
                    else
                    {
                        ViewBag.Required = "required";
                    }
                }

            }
        }

        public JsonResult BindTree()
        {
            bool val = Session["UserID"] == null ? false : true;
            if (val)
            {
                try
                {
                    using (EntityClasses dbcontext = new EntityClasses())
                    {
                        int com_key = Convert.ToInt32(Session["CompanyKey"]);
                        //get all the parent groups
                        var parentgroups = dbcontext.Tbl_ProductGroup.Where(x=>x.COM_KEY == com_key && x.DELETED==false && x.PG_TYPE==1 ).ToList();
                        string s = "";
                        for (int i = 0; i < parentgroups.Count(); i++)
                        {
                            if (i == 0)
                            {
                                s = s + " [{'text':'" + parentgroups[i].PG_NAME + "','id':'" + parentgroups[i].PG_ID + "'";
                            }
                            else
                            {
                                s = s + ", {'text':'" + parentgroups[i].PG_NAME + "','id':'" + parentgroups[i].PG_ID + "'";
                            }
                            //get all the child groups of this parent
                            decimal parentid = parentgroups[i].PG_ID;
                            var childgroups = dbcontext.Tbl_ProductGroup.Where(x => x.COM_KEY == com_key && x.DELETED == false && x.PG_TYPE == 2 && x.PG_PARENT_ID==parentid).ToList();
                            if (childgroups.Count() > 0)
                            {
                                s = s + ",'children':[";
                            }
                            for (int j = 0; j < childgroups.Count(); j++)
                            {
                                if (j == 0)
                                {
                                    s = s + " {'text':'" + childgroups[j].PG_NAME + "','id':'" + childgroups[j].PG_ID + "'";
                                }
                                else
                                {
                                    s = s + ", {'text':'" + childgroups[j].PG_NAME + "','id':'" + childgroups[j].PG_ID + "'";
                                }
                                //get all the products of this parent
                                decimal childid = childgroups[j].PG_ID;
                                var products = dbcontext.Tbl_Product_Master.Where(x => x.COM_KEY == com_key && x.DELETED == false && x.P_SubcategoryID == childid).ToList();
                                if (products.Count() > 0)
                                {
                                    s = s + ",'children':[";
                                }
                                for (int k = 0; k < products.Count(); k++)
                                {
                                    if (k == 0)
                                    {
                                        s = s + " {'text':'" + products[k].P_Name + "','id':'P_" + products[k].P_ID + "','icon' : 'jstree-file'}";
                                    }
                                    else
                                    {
                                        s = s + ", {'text':'" + products[k].P_Name + "','id':'P_" + products[k].P_ID + "','icon' : 'jstree-file'}";
                                    }
                                }
                                if (products.Count() > 0)
                                {
                                    s = s + "]";
                                }
                                s = s + "}";
                            }
                            
                            decimal productid = parentgroups[i].PG_ID;
                            var products1 = dbcontext.Tbl_Product_Master.Where(x => x.COM_KEY == com_key && x.DELETED == false && x.P_SubcategoryID == productid).ToList();
                            if (childgroups.Count() == 0)
                            {
                                if (products1.Count() > 0)
                                {
                                    s = s + ",'children':[";
                                }
                                for (int k = 0; k < products1.Count(); k++)
                                {
                                    if (k == 0)
                                    {
                                        s = s + " {'text':'" + products1[k].P_Name + "','id':'P_" + products1[k].P_ID + "','icon' : 'jstree-file'}";
                                    }
                                    else
                                    {
                                        s = s + ", {'text':'" + products1[k].P_Name + "','id':'P_" + products1[k].P_ID + "','icon' : 'jstree-file'}";
                                    }
                                }
                                if (products1.Count() > 0)
                                {
                                    s = s + "]";
                                }
                            }
                            else
                            {
                                if (products1.Count() > 0)
                                {
                                    for (int k = 0; k < products1.Count(); k++)
                                    {
                                        s = s + ", {'text':'" + products1[k].P_Name + "','id':'P_" + products1[k].P_ID + "','icon' : 'jstree-file'}";
                                    }
                                    s = s + "]";
                                }
                            }
                            if (childgroups.Count() > 0 && products1.Count()==0)
                            {
                                s = s + "]";
                            }
                            s = s + "}";
                        }
                        if(parentgroups.Count()>0)
                            s = s + "]";
                        return Json(s.Replace("'", "\""), JsonRequestBehavior.AllowGet);
                    }
                }
                catch (Exception exe)
                {
                    string actionName = this.ControllerContext.RouteData.Values["action"].ToString();
                    string controllerName = this.ControllerContext.RouteData.Values["controller"].ToString();
                    objERR.err_title = controllerName + "-" + controllerName;
                    objERR.err_message = "Sorry for the inconvience. Some error has been occured.";
                    objERR.err_details = exe.Message.Replace("'", "");
                    int errid = bal.ExceptionInsertLogs_BL(objERR);
                    return Json("ERR" + errid.ToString(), JsonRequestBehavior.AllowGet);
                }
            }
            else
            {
                return Json("Expired", JsonRequestBehavior.AllowGet);
            }
        }

        public ActionResult ET_Admin_Product()
        {
            bool val = Session["UserID"] == null ? false : true;
            if (val)
            {
                try
                {
                    AutoManual();
                    var data = ObjBL.Product_Yarn_list();
                    return View(data);
                }
                catch (Exception exe)
                {
                    string actionName = this.ControllerContext.RouteData.Values["action"].ToString();
                    string controllerName = this.ControllerContext.RouteData.Values["controller"].ToString();
                    objERR.err_title = controllerName + "-" + controllerName;
                    objERR.err_message = "Sorry for the inconvience. Some error has been occured.";
                    objERR.err_details = exe.Message.Replace("'", "");
                    int errid = bal.ExceptionInsertLogs_BL(objERR);
                    return Json("ERR" + errid.ToString(), JsonRequestBehavior.AllowGet);
                }
            }
            else
            {
                return RedirectToAction("ET_SessionExpire", "ET_Login");
            }
        }

        public ActionResult ET_Admin_Product_Yarn_Add(int YarnID, string YarnCode,decimal UOM, string Count,string ShortName, string CountPercentage, string drpBlend1, string txtBlend1, string drpBlend2, string txtBlend2, string drpBlend3, string txtBlend3, string drpBlend4, string txtBlend4, string SubRange1, string SubRange2, string SubRange3, string SubRange4, string SubRange5, string Package, string Cottontype)
        {
            bool val = Session["UserID"] == null ? false : true;
            if (val)
            {
                try
                {
                    Tbl_Product_Yarn_CM obj = new Tbl_Product_Yarn_CM()
                    {
                        CATEGORY = 1,
                        UOM = UOM,
                        PRODUCT_YARN_CODE = YarnCode,
                        COUNT = Count,
                        SHORT_NAME = ShortName,
                        COUNT_VAL = CountPercentage,
                        BLEND1 = drpBlend1,
                        BLEND1_VAL = txtBlend1,
                        BLEND2 = drpBlend2,
                        BLEND2_VAL = txtBlend2,
                        BLEND3 = drpBlend3,
                        BLEND3_VAL = txtBlend3,
                        BLEND4 = drpBlend4,
                        BLEND4_VAL = drpBlend4,
                        SUB_RANGE1 = SubRange1,
                        SUB_RANGE2 = SubRange2,
                        SUB_RANGE3 = SubRange3,
                        SUB_RANGE4 = SubRange4,
                        SUB_RANGE5 = SubRange5,
                        PACKAGE = Package,
                        COTTON_TYPE = Cottontype,
                        CREATED_BY = Convert.ToInt64(Session["UserID"]),
                        LAST_UPDATED_BY = Convert.ToInt64(Session["UserID"])
                    };
                    var data = ObjBL.ET_Admin_Product_Yarn_Add_BL(obj, automanual, prefix);
                    var json = "Success";
                    if (data == 0)
                    {
                        json = "Failed";
                    }
                    else
                    {
                        objLOG.log_dockey = "3007";
                        objLOG.log_userid = Session["UserID"].ToString();
                        objLOG.log_recordkey = data.ToString();
                        if (YarnID == 0)
                        {
                            objLOG.log_operation = "Insert";
                            objLOG.log_Remarks = "Record Inserted Successfully";
                        }
                        else
                        {
                            objLOG.log_operation = "Update";
                            objLOG.log_Remarks = "Record Updated Successfully";
                        }
                        bal.OperationInsertLogs_BL(objLOG);
                    }
                    return Json(data, JsonRequestBehavior.AllowGet);

                }
                catch (Exception exe)
                {
                    string actionName = this.ControllerContext.RouteData.Values["action"].ToString();
                    string controllerName = this.ControllerContext.RouteData.Values["controller"].ToString();
                    objERR.err_title = controllerName + "-" + controllerName;
                    objERR.err_message = "Sorry for the inconvience. Some error has been occured.";
                    objERR.err_details = exe.Message.Replace("'", "");
                    int errid = bal.ExceptionInsertLogs_BL(objERR);
                    return Json("ERR" + errid.ToString(), JsonRequestBehavior.AllowGet);
                }
            }
            else
            {
                return RedirectToAction("ET_SessionExpire", "ET_Login");
            }
        }

        public ActionResult ET_Admin_Product_Yarn_Deleted(int id)
        {
            bool val = Session["UserID"] == null ? false : true;
            if (val)
            {
                try
                {
                    var deleteby = Convert.ToInt64(Session["UserID"]);
                    int i = ObjBL.ET_Admin_Product_Yarn_Deleted_BL(id, deleteby);
                    var json = "Success";
                    if (i == 0)
                        json = "False";
                    else
                    {
                        objLOG.log_dockey = "7";
                        objLOG.log_operation = "Delete";
                        objLOG.log_userid = Session["UserID"].ToString();
                        objLOG.log_recordkey = id.ToString();
                        objLOG.log_Remarks = "Record Deleted Successfully";
                        bal.OperationInsertLogs_BL(objLOG);
                    }
                    return Json(json, JsonRequestBehavior.AllowGet);
                }
                catch (Exception exe)
                {
                    string actionName = this.ControllerContext.RouteData.Values["action"].ToString();
                    string controllerName = this.ControllerContext.RouteData.Values["controller"].ToString();
                    objERR.err_title = controllerName + "-" + controllerName;
                    objERR.err_message = "Sorry for the inconvience. Some error has been occured.";
                    objERR.err_details = exe.Message.Replace("'", "");
                    int errid = bal.ExceptionInsertLogs_BL(objERR);
                    return Json("ERR" + errid.ToString(), JsonRequestBehavior.AllowGet);
                }
            }
            else
            {
                return RedirectToAction("ET_SessionExpire", "ET_Login");
            }
        }

        public ActionResult ET_Admin_Product_Yarn_Restore_Insert(int id)
        {
            bool val = Session["UserID"] == null ? false : true;
            if (val)
            {
                try
                {
                    var deleteby = Convert.ToInt64(Session["UserID"]);
                    var result = ObjBL.ET_Admin_Product_Yarn_Restore_Insert_BL(id, deleteby);
                    var json = "Failed";
                    if (result != 0)
                    {
                        json = "Success";
                    }
                    else
                    {
                        objLOG.log_dockey = "3007";
                        objLOG.log_operation = "Restore";
                        objLOG.log_userid = Session["UserID"].ToString();
                        objLOG.log_recordkey = id.ToString();
                        objLOG.log_Remarks = "Record Restored Successfully";
                        bal.OperationInsertLogs_BL(objLOG);
                    }
                    return Json(json, JsonRequestBehavior.AllowGet);
                }
                catch (Exception exe)
                {
                    string actionName = this.ControllerContext.RouteData.Values["action"].ToString();
                    string controllerName = this.ControllerContext.RouteData.Values["controller"].ToString();
                    objERR.err_title = controllerName + "-" + controllerName;
                    objERR.err_message = "Sorry for the inconvience. Some error has been occured.";
                    objERR.err_details = exe.Message.Replace("'", "");
                    int errid = bal.ExceptionInsertLogs_BL(objERR);
                    return Json("ERR" + errid.ToString(), JsonRequestBehavior.AllowGet);
                }
            }
            else
            {
                return RedirectToAction("ET_SessionExpire", "ET_Login");
            }
        }

        public ActionResult ET_Admin_Product_Yarn_Restore()
        {
            bool val = Session["UserID"] == null ? false : true;
            if (val)
            {
                try
                {
                    var data = ObjBL.ET_Admin_Product_Yarn_Restore_BL();
                    return PartialView("/Views/Admin/ET_Admin_Bank/_ET_Admin_Bank_Restore.cshtml", data);
                }
                catch (Exception exe)
                {
                    string actionName = this.ControllerContext.RouteData.Values["action"].ToString();
                    string controllerName = this.ControllerContext.RouteData.Values["controller"].ToString();
                    objERR.err_title = controllerName + "-" + controllerName;
                    objERR.err_message = "Sorry for the inconvience. Some error has been occured.";
                    objERR.err_details = exe.Message.Replace("'", "");
                    int errid = bal.ExceptionInsertLogs_BL(objERR);
                    return Json("ERR" + errid.ToString(), JsonRequestBehavior.AllowGet);
                }

            }
            else
            {
                return RedirectToAction("ET_SessionExpire", "ET_Login");
            }
        }

        public ActionResult ET_Admin_Product_Yarn_View(int id)
        {
            bool val = Session["UserID"] == null ? false : true;
            if (val)
            {
                try
                {
                    var data = ObjBL.ET_Admin_Product_Yarn_View_BL(id);
                    return PartialView("/Views/Admin/ET_Admin_Bank/_ET_Admin_Bank_View.cshtml", data);
                }
                catch (Exception exe)
                {
                    string actionName = this.ControllerContext.RouteData.Values["action"].ToString();
                    string controllerName = this.ControllerContext.RouteData.Values["controller"].ToString();
                    objERR.err_title = controllerName + "-" + controllerName;
                    objERR.err_message = "Sorry for the inconvience. Some error has been occured.";
                    objERR.err_details = exe.Message.Replace("'", "");
                    int errid = bal.ExceptionInsertLogs_BL(objERR);
                    return Json("ERR" + errid.ToString(), JsonRequestBehavior.AllowGet);
                }
            }
            else
            {
                return RedirectToAction("ET_SessionExpire", "ET_Login");
            }
        }

        public ActionResult ET_Admin_Product_Yarn_Update_GetbyID(int id)
        {
            bool val = Session["UserID"] == null ? false : true;
            if (val)
            {
                try
                {
                    var data = ObjBL.ET_Admin_Product_Yarn_Update_GetbyID_BL(id);
                    var json = new JavaScriptSerializer().Serialize(data);
                    return Json(json, JsonRequestBehavior.AllowGet);
                }
                catch (Exception exe)
                {
                    string actionName = this.ControllerContext.RouteData.Values["action"].ToString();
                    string controllerName = this.ControllerContext.RouteData.Values["controller"].ToString();
                    objERR.err_title = controllerName + "-" + controllerName;
                    objERR.err_message = "Sorry for the inconvience. Some error has been occured.";
                    objERR.err_details = exe.Message.Replace("'", "");
                    int errid = bal.ExceptionInsertLogs_BL(objERR);
                    return Json("ERR" + errid.ToString(), JsonRequestBehavior.AllowGet);
                }
            }
            else
            {
                return RedirectToAction("ET_SessionExpire", "ET_Login");
            }
        }
    }
}
